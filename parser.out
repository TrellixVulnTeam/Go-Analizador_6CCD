Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> instrucciones
Rule 1     instrucciones -> asignacion
Rule 2     instrucciones -> expresion
Rule 3     instrucciones -> condiciones
Rule 4     instrucciones -> sentenciaIf
Rule 5     instrucciones -> sentenciaFor
Rule 6     instrucciones -> print
Rule 7     instrucciones -> mapa
Rule 8     instrucciones -> puntero
Rule 9     instrucciones -> lectura
Rule 10    instrucciones -> array
Rule 11    instrucciones -> switch
Rule 12    instrucciones -> funcion
Rule 13    instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion
Rule 14    masInstrucciones -> masInstrucciones instrucciones
Rule 15    masInstrucciones -> masInstrucciones
Rule 16    masInstrucciones -> <empty>
Rule 17    asignacion -> VAR VARIABLE BOOL IGUAL booleano
Rule 18    asignacion -> VAR VARIABLE INT IGUAL expresionInt
Rule 19    asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat
Rule 20    asignacion -> VAR VARIABLE STRING IGUAL CADENA
Rule 21    asignacion -> VAR VARIABLE puntero IGUAL refer
Rule 22    asignacion -> VAR VARIABLE puntero
Rule 23    asignacion -> slices
Rule 24    asignacion -> VARIABLE DECLARADOR valor
Rule 25    asignacion -> VARIABLE IGUAL valor
Rule 26    asignacion -> VARIABLE MASIGUAL acumular
Rule 27    asignacion -> VARIABLE MENOSIGUAL expresion
Rule 28    asignacion -> derefer IGUAL valor
Rule 29    booleano -> condicion
Rule 30    booleano -> TRUE
Rule 31    booleano -> FALSE
Rule 32    valor -> booleano
Rule 33    valor -> expresion
Rule 34    valor -> CADENA
Rule 35    valor -> VARIABLE
Rule 36    valor -> mapa
Rule 37    valor -> refer
Rule 38    acumular -> expresion
Rule 39    acumular -> CADENA
Rule 40    acumular -> VARIABLE
Rule 41    sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
Rule 42    sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
Rule 43    sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
Rule 44    sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
Rule 45    sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
Rule 46    sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
Rule 47    else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
Rule 48    else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
Rule 49    else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT
Rule 50    else -> ELSE sentenciaIf
Rule 51    mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
Rule 52    mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa
Rule 53    contMapa -> INT LLAVELEFT parEntero LLAVERIGHT
Rule 54    contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT
Rule 55    contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT
Rule 56    contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT
Rule 57    parEntero -> CADENA DOSPUNTOS datoEntero masEntero
Rule 58    parEntero -> CADENA DOSPUNTOS datoEntero
Rule 59    masEntero -> masEntero COMA CADENA DOSPUNTOS datoEntero
Rule 60    masEntero -> COMA CADENA DOSPUNTOS datoEntero
Rule 61    datoEntero -> VARIABLE
Rule 62    datoEntero -> expresion
Rule 63    parCadena -> CADENA DOSPUNTOS datoCadena masCadena
Rule 64    parCadena -> CADENA DOSPUNTOS datoCadena
Rule 65    masCadena -> masCadena COMA CADENA DOSPUNTOS datoCadena
Rule 66    masCadena -> COMA CADENA DOSPUNTOS datoCadena
Rule 67    datoCadena -> VARIABLE
Rule 68    datoCadena -> CADENA
Rule 69    parFlotante -> CADENA DOSPUNTOS datoFlotante masFlotante
Rule 70    parFlotante -> CADENA DOSPUNTOS datoFlotante
Rule 71    masFlotante -> masFlotante COMA CADENA DOSPUNTOS datoFlotante
Rule 72    masFlotante -> COMA CADENA DOSPUNTOS datoFlotante
Rule 73    datoFlotante -> VARIABLE
Rule 74    datoFlotante -> expresion
Rule 75    parBoolean -> CADENA DOSPUNTOS datoBoolean masBoolean
Rule 76    parBoolean -> CADENA DOSPUNTOS datoBoolean
Rule 77    masBoolean -> masBoolean COMA CADENA DOSPUNTOS datoBoolean
Rule 78    masBoolean -> COMA CADENA DOSPUNTOS datoBoolean
Rule 79    datoBoolean -> condicion
Rule 80    datoBoolean -> TRUE
Rule 81    datoBoolean -> FALSE
Rule 82    puntero -> PRODUCTO typeData
Rule 83    refer -> AMPERSAND VARIABLE
Rule 84    derefer -> PRODUCTO VARIABLE
Rule 85    sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
Rule 86    inicio -> VARIABLE DECLARADOR ENTERO
Rule 87    incrementa -> VARIABLE INCREMENTO
Rule 88    typeData -> BOOL
Rule 89    typeData -> INT
Rule 90    typeData -> FLOAT
Rule 91    typeData -> STRING
Rule 92    array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
Rule 93    contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT
Rule 94    contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT
Rule 95    contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT
Rule 96    contArrayEnteros -> ENTERO COMA ENTERO
Rule 97    contArrayEnteros -> contArrayEnteros COMA ENTERO
Rule 98    contArrayCadenas -> CADENA COMA CADENA
Rule 99    contArrayCadenas -> contArrayCadenas COMA CADENA
Rule 100   contArrayFloat -> FLOTANTE COMA FLOTANTE
Rule 101   contArrayFloat -> contArrayFloat COMA FLOTANTE
Rule 102   method -> methodArray
Rule 103   methodArray -> namemetodoArr PARLEFT VARIABLE PARRIGHT
Rule 104   namemetodoArr -> LEN
Rule 105   namemetodoArr -> CAP
Rule 106   print -> IMPRIMIR PARLEFT contPrint PARRIGHT
Rule 107   contPrint -> contenido masCont
Rule 108   contPrint -> contenido
Rule 109   masCont -> masCont COMA contenido
Rule 110   masCont -> COMA contenido
Rule 111   contenido -> CADENA
Rule 112   contenido -> VARIABLE
Rule 113   contenido -> method
Rule 114   contenido -> <empty>
Rule 115   lectura -> SCAN PARLEFT contScan PARRIGHT
Rule 116   contScan -> AMPERSAND VARIABLE
Rule 117   expresion -> expresionInt
Rule 118   expresion -> expresionFloat
Rule 119   expresionInt -> expresionInt operadorArit ENTERO
Rule 120   expresionInt -> ENTERO operadorArit ENTERO
Rule 121   expresionFloat -> expresionFloat operadorArit FLOTANTE
Rule 122   expresionFloat -> FLOTANTE operadorArit FLOTANTE
Rule 123   operadorArit -> SUMA
Rule 124   operadorArit -> RESTA
Rule 125   operadorArit -> PRODUCTO
Rule 126   operadorArit -> DIVISION
Rule 127   operadorArit -> MODULO
Rule 128   expresion -> term
Rule 129   term -> numericos
Rule 130   factor -> numericos
Rule 131   factor -> VARIABLE
Rule 132   numericos -> ENTERO
Rule 133   numericos -> FLOTANTE
Rule 134   numericos -> PARLEFT expresion PARRIGHT
Rule 135   slices -> declaracion_slices
Rule 136   slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT
Rule 137   slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT
Rule 138   slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT
Rule 139   slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT
Rule 140   metodos_slices -> MAKE
Rule 141   declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
Rule 142   declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
Rule 143   declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
Rule 144   declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
Rule 145   declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData
Rule 146   comparacion -> condiciones
Rule 147   comparacion -> NEGACION PARLEFT condiciones PARRIGHT
Rule 148   comparacion -> PARLEFT condiciones PARRIGHT
Rule 149   funcion -> funcion_sin_parametro
Rule 150   funcion -> funcion_parametro
Rule 151   funcion -> funcion_sin_parametro_return
Rule 152   funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
Rule 153   funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
Rule 154   funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
Rule 155   funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
Rule 156   funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
Rule 157   funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
Rule 158   funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
Rule 159   parametros -> VARIABLE
Rule 160   parametros -> VARIABLE COMA parametros
Rule 161   parametros -> typeData VARIABLE
Rule 162   parametros -> typeData VARIABLE COMA parametros
Rule 163   switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
Rule 164   bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK
Rule 165   bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones CONTINUE
Rule 166   bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK bloque_switch
Rule 167   bloque_switch -> switch_default
Rule 168   caso_switch -> VARIABLE
Rule 169   caso_switch -> CADENA
Rule 170   caso_switch -> ENTERO
Rule 171   switch_default -> DEFAULT DOSPUNTOS instrucciones masInstrucciones BREAK
Rule 172   switch_default -> DEFAULT DOSPUNTOS instrucciones masInstrucciones CONTINUE
Rule 173   condiciones -> factor MAYORQUE factor
Rule 174   condiciones -> factor MENORQUE factor
Rule 175   condiciones -> factor DIFERENTE factor
Rule 176   condiciones -> factor ESIGUAL factor
Rule 177   condiciones -> factor MENORIGUAL factor
Rule 178   condiciones -> factor MAYORIGUAL factor
Rule 179   comparaciones -> comparacion
Rule 180   comparaciones -> comparacion anado comparaciones
Rule 181   anado -> condicion
Rule 182   condicion -> AND
Rule 183   condicion -> OR
Rule 184   factor -> BOOL

Terminals, with rules where they appear

AMPERSAND            : 83 116
AND                  : 182
BOOL                 : 17 56 88 184
BREAK                : 164 166 171
CADENA               : 13 20 34 39 57 58 59 60 63 64 65 66 68 69 70 71 72 75 76 77 78 98 98 99 111 169
CAP                  : 105
CASE                 : 164 165 166
COMA                 : 59 60 65 66 71 72 77 78 96 97 98 99 100 101 109 110 138 139 139 160 162
CONTINUE             : 165 172
CORCHLEFT            : 51 52 92 138 139 141 142 143 144 145
CORCHRIGHT           : 51 52 92 138 139 141 142 143 144 145
DECLARADOR           : 24 86 92 138 139 145
DEFAULT              : 171 172
DIFERENTE            : 175
DIVISION             : 126
DOSPUNTOS            : 57 58 59 60 63 64 65 66 69 70 71 72 75 76 77 78 164 165 166 171 172
ELSE                 : 47 48 49 50
ENTERO               : 86 92 96 96 97 119 120 120 132 138 139 139 141 143 170
ESIGUAL              : 176
FALSE                : 31 81
FLOAT                : 19 55 90 95
FLOTANTE             : 100 100 101 121 122 122 133
FOR                  : 85
FUNC                 : 152 153 154 155 156 157 158
IF                   : 41 42 43 44 45 46
IGUAL                : 17 18 19 20 21 25 28 141 142 143 144
IMPORT               : 13
IMPRIMIR             : 106
INCREMENTO           : 87
INT                  : 18 53 89 93
LEN                  : 104
LLAVELEFT            : 41 42 43 44 45 46 47 48 49 51 53 54 55 56 85 93 94 95 136 137 152 153 154 155 156 157 158 163
LLAVERIGHT           : 41 42 43 44 45 46 47 48 49 51 53 54 55 56 85 93 94 95 136 137 152 153 154 155 156 157 158 163
MAKE                 : 140
MAP                  : 51 52
MASIGUAL             : 26
MAYORIGUAL           : 178
MAYORQUE             : 173
MENORIGUAL           : 177
MENORQUE             : 174
MENOSIGUAL           : 27
MODULO               : 127
NEGACION             : 147
OR                   : 183
PACKAGE              : 13
PARLEFT              : 103 106 115 134 138 139 147 148 152 153 154 155 156 157 158
PARRIGHT             : 103 106 115 134 138 139 147 148 152 153 154 155 156 157 158
PRODUCTO             : 82 84 125
PUNTOCOMA            : 85 85
RESTA                : 124
RETURN               : 41 42 45 46 48 49 153 154 155 157 158
SCAN                 : 115
STRING               : 20 51 52 54 91 94
SUMA                 : 123
SWITCH               : 163
TRUE                 : 30 80
VAR                  : 17 18 19 20 21 22 141 142
VARIABLE             : 13 17 18 19 20 21 22 24 25 26 27 35 40 41 42 45 46 48 49 61 67 73 83 84 86 87 92 103 112 116 131 138 139 141 142 143 144 145 152 153 154 155 155 156 157 158 159 160 161 162 163 168
error                : 

Nonterminals, with rules where they appear

acumular             : 26
anado                : 180
array                : 10
asignacion           : 1
bloque_switch        : 163 166
booleano             : 17 32
caso_switch          : 164 165 166
comparacion          : 179 180
comparaciones        : 41 42 43 44 45 46 180
condicion            : 29 79 181
condiciones          : 3 85 146 147 148
contArray            : 92
contArrayCadenas     : 94 99 137
contArrayEnteros     : 93 97 136
contArrayFloat       : 95 101
contMapa             : 52
contPrint            : 106
contScan             : 115
contenido            : 107 108 109 110
datoBoolean          : 75 76 77 78
datoCadena           : 63 64 65 66
datoEntero           : 57 58 59 60
datoFlotante         : 69 70 71 72
declaracion_slices   : 135 136 137
derefer              : 28
else                 : 42 44 46
expresion            : 2 27 33 38 62 74 134
expresionFloat       : 19 118 121
expresionInt         : 18 117 119
factor               : 173 173 174 174 175 175 176 176 177 177 178 178
funcion              : 12 13
funcion_parametro    : 150
funcion_sin_parametro : 149
funcion_sin_parametro_return : 151
incrementa           : 85
inicio               : 85
instrucciones        : 14 41 42 43 44 47 48 85 152 154 155 156 157 164 165 166 171 172 0
lectura              : 9
mapa                 : 7 36
masBoolean           : 75 77
masCadena            : 63 65
masCont              : 107 109
masEntero            : 57 59
masFlotante          : 69 71
masInstrucciones     : 14 15 41 42 43 44 47 48 85 152 154 155 156 157 164 165 166 171 172
method               : 113
methodArray          : 102
metodos_slices       : 138 139
namemetodoArr        : 103
numericos            : 129 130
operadorArit         : 119 120 121 122
parBoolean           : 56
parCadena            : 54
parEntero            : 53
parFlotante          : 55
parametros           : 156 157 158 160 162
print                : 6
puntero              : 8 21 22
refer                : 21 37
sentenciaFor         : 5
sentenciaIf          : 4 50
slices               : 23
switch               : 11
switch_default       : 167
term                 : 128
typeData             : 51 82 138 139 141 142 143 144 145 161 162
valor                : 24 25 28

Parsing method: LALR

state 0

    (0) S' -> . instrucciones
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (173) condiciones -> . factor MAYORQUE factor
    (174) condiciones -> . factor MENORQUE factor
    (175) condiciones -> . factor DIFERENTE factor
    (176) condiciones -> . factor ESIGUAL factor
    (177) condiciones -> . factor MENORIGUAL factor
    (178) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (163) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (149) funcion -> . funcion_sin_parametro
    (150) funcion -> . funcion_parametro
    (151) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices
    (136) slices -> . declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT
    (137) slices -> . declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT
    (138) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT
    (139) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (152) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (153) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (154) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (156) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (141) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (142) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (143) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (144) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (145) declaracion_slices -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    BOOL            shift and go to state 17
    FUNC            shift and go to state 39
    PARLEFT         shift and go to state 27

    instrucciones                  shift and go to state 1
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices             shift and go to state 36
    numericos                      shift and go to state 38

state 1

    (0) S' -> instrucciones .



state 2

    (1) instrucciones -> asignacion .

    $end            reduce using rule 1 (instrucciones -> asignacion .)
    RETURN          reduce using rule 1 (instrucciones -> asignacion .)
    LLAVERIGHT      reduce using rule 1 (instrucciones -> asignacion .)
    PACKAGE         reduce using rule 1 (instrucciones -> asignacion .)
    VAR             reduce using rule 1 (instrucciones -> asignacion .)
    VARIABLE        reduce using rule 1 (instrucciones -> asignacion .)
    IF              reduce using rule 1 (instrucciones -> asignacion .)
    FOR             reduce using rule 1 (instrucciones -> asignacion .)
    IMPRIMIR        reduce using rule 1 (instrucciones -> asignacion .)
    MAP             reduce using rule 1 (instrucciones -> asignacion .)
    PRODUCTO        reduce using rule 1 (instrucciones -> asignacion .)
    SCAN            reduce using rule 1 (instrucciones -> asignacion .)
    SWITCH          reduce using rule 1 (instrucciones -> asignacion .)
    ENTERO          reduce using rule 1 (instrucciones -> asignacion .)
    FLOTANTE        reduce using rule 1 (instrucciones -> asignacion .)
    BOOL            reduce using rule 1 (instrucciones -> asignacion .)
    FUNC            reduce using rule 1 (instrucciones -> asignacion .)
    PARLEFT         reduce using rule 1 (instrucciones -> asignacion .)
    BREAK           reduce using rule 1 (instrucciones -> asignacion .)
    CONTINUE        reduce using rule 1 (instrucciones -> asignacion .)


state 3

    (2) instrucciones -> expresion .

    $end            reduce using rule 2 (instrucciones -> expresion .)
    RETURN          reduce using rule 2 (instrucciones -> expresion .)
    LLAVERIGHT      reduce using rule 2 (instrucciones -> expresion .)
    PACKAGE         reduce using rule 2 (instrucciones -> expresion .)
    VAR             reduce using rule 2 (instrucciones -> expresion .)
    VARIABLE        reduce using rule 2 (instrucciones -> expresion .)
    IF              reduce using rule 2 (instrucciones -> expresion .)
    FOR             reduce using rule 2 (instrucciones -> expresion .)
    IMPRIMIR        reduce using rule 2 (instrucciones -> expresion .)
    MAP             reduce using rule 2 (instrucciones -> expresion .)
    PRODUCTO        reduce using rule 2 (instrucciones -> expresion .)
    SCAN            reduce using rule 2 (instrucciones -> expresion .)
    SWITCH          reduce using rule 2 (instrucciones -> expresion .)
    ENTERO          reduce using rule 2 (instrucciones -> expresion .)
    FLOTANTE        reduce using rule 2 (instrucciones -> expresion .)
    BOOL            reduce using rule 2 (instrucciones -> expresion .)
    FUNC            reduce using rule 2 (instrucciones -> expresion .)
    PARLEFT         reduce using rule 2 (instrucciones -> expresion .)
    BREAK           reduce using rule 2 (instrucciones -> expresion .)
    CONTINUE        reduce using rule 2 (instrucciones -> expresion .)


state 4

    (3) instrucciones -> condiciones .

    $end            reduce using rule 3 (instrucciones -> condiciones .)
    RETURN          reduce using rule 3 (instrucciones -> condiciones .)
    LLAVERIGHT      reduce using rule 3 (instrucciones -> condiciones .)
    PACKAGE         reduce using rule 3 (instrucciones -> condiciones .)
    VAR             reduce using rule 3 (instrucciones -> condiciones .)
    VARIABLE        reduce using rule 3 (instrucciones -> condiciones .)
    IF              reduce using rule 3 (instrucciones -> condiciones .)
    FOR             reduce using rule 3 (instrucciones -> condiciones .)
    IMPRIMIR        reduce using rule 3 (instrucciones -> condiciones .)
    MAP             reduce using rule 3 (instrucciones -> condiciones .)
    PRODUCTO        reduce using rule 3 (instrucciones -> condiciones .)
    SCAN            reduce using rule 3 (instrucciones -> condiciones .)
    SWITCH          reduce using rule 3 (instrucciones -> condiciones .)
    ENTERO          reduce using rule 3 (instrucciones -> condiciones .)
    FLOTANTE        reduce using rule 3 (instrucciones -> condiciones .)
    BOOL            reduce using rule 3 (instrucciones -> condiciones .)
    FUNC            reduce using rule 3 (instrucciones -> condiciones .)
    PARLEFT         reduce using rule 3 (instrucciones -> condiciones .)
    BREAK           reduce using rule 3 (instrucciones -> condiciones .)
    CONTINUE        reduce using rule 3 (instrucciones -> condiciones .)


state 5

    (4) instrucciones -> sentenciaIf .

    $end            reduce using rule 4 (instrucciones -> sentenciaIf .)
    RETURN          reduce using rule 4 (instrucciones -> sentenciaIf .)
    LLAVERIGHT      reduce using rule 4 (instrucciones -> sentenciaIf .)
    PACKAGE         reduce using rule 4 (instrucciones -> sentenciaIf .)
    VAR             reduce using rule 4 (instrucciones -> sentenciaIf .)
    VARIABLE        reduce using rule 4 (instrucciones -> sentenciaIf .)
    IF              reduce using rule 4 (instrucciones -> sentenciaIf .)
    FOR             reduce using rule 4 (instrucciones -> sentenciaIf .)
    IMPRIMIR        reduce using rule 4 (instrucciones -> sentenciaIf .)
    MAP             reduce using rule 4 (instrucciones -> sentenciaIf .)
    PRODUCTO        reduce using rule 4 (instrucciones -> sentenciaIf .)
    SCAN            reduce using rule 4 (instrucciones -> sentenciaIf .)
    SWITCH          reduce using rule 4 (instrucciones -> sentenciaIf .)
    ENTERO          reduce using rule 4 (instrucciones -> sentenciaIf .)
    FLOTANTE        reduce using rule 4 (instrucciones -> sentenciaIf .)
    BOOL            reduce using rule 4 (instrucciones -> sentenciaIf .)
    FUNC            reduce using rule 4 (instrucciones -> sentenciaIf .)
    PARLEFT         reduce using rule 4 (instrucciones -> sentenciaIf .)
    BREAK           reduce using rule 4 (instrucciones -> sentenciaIf .)
    CONTINUE        reduce using rule 4 (instrucciones -> sentenciaIf .)


state 6

    (5) instrucciones -> sentenciaFor .

    $end            reduce using rule 5 (instrucciones -> sentenciaFor .)
    RETURN          reduce using rule 5 (instrucciones -> sentenciaFor .)
    LLAVERIGHT      reduce using rule 5 (instrucciones -> sentenciaFor .)
    PACKAGE         reduce using rule 5 (instrucciones -> sentenciaFor .)
    VAR             reduce using rule 5 (instrucciones -> sentenciaFor .)
    VARIABLE        reduce using rule 5 (instrucciones -> sentenciaFor .)
    IF              reduce using rule 5 (instrucciones -> sentenciaFor .)
    FOR             reduce using rule 5 (instrucciones -> sentenciaFor .)
    IMPRIMIR        reduce using rule 5 (instrucciones -> sentenciaFor .)
    MAP             reduce using rule 5 (instrucciones -> sentenciaFor .)
    PRODUCTO        reduce using rule 5 (instrucciones -> sentenciaFor .)
    SCAN            reduce using rule 5 (instrucciones -> sentenciaFor .)
    SWITCH          reduce using rule 5 (instrucciones -> sentenciaFor .)
    ENTERO          reduce using rule 5 (instrucciones -> sentenciaFor .)
    FLOTANTE        reduce using rule 5 (instrucciones -> sentenciaFor .)
    BOOL            reduce using rule 5 (instrucciones -> sentenciaFor .)
    FUNC            reduce using rule 5 (instrucciones -> sentenciaFor .)
    PARLEFT         reduce using rule 5 (instrucciones -> sentenciaFor .)
    BREAK           reduce using rule 5 (instrucciones -> sentenciaFor .)
    CONTINUE        reduce using rule 5 (instrucciones -> sentenciaFor .)


state 7

    (6) instrucciones -> print .

    $end            reduce using rule 6 (instrucciones -> print .)
    RETURN          reduce using rule 6 (instrucciones -> print .)
    LLAVERIGHT      reduce using rule 6 (instrucciones -> print .)
    PACKAGE         reduce using rule 6 (instrucciones -> print .)
    VAR             reduce using rule 6 (instrucciones -> print .)
    VARIABLE        reduce using rule 6 (instrucciones -> print .)
    IF              reduce using rule 6 (instrucciones -> print .)
    FOR             reduce using rule 6 (instrucciones -> print .)
    IMPRIMIR        reduce using rule 6 (instrucciones -> print .)
    MAP             reduce using rule 6 (instrucciones -> print .)
    PRODUCTO        reduce using rule 6 (instrucciones -> print .)
    SCAN            reduce using rule 6 (instrucciones -> print .)
    SWITCH          reduce using rule 6 (instrucciones -> print .)
    ENTERO          reduce using rule 6 (instrucciones -> print .)
    FLOTANTE        reduce using rule 6 (instrucciones -> print .)
    BOOL            reduce using rule 6 (instrucciones -> print .)
    FUNC            reduce using rule 6 (instrucciones -> print .)
    PARLEFT         reduce using rule 6 (instrucciones -> print .)
    BREAK           reduce using rule 6 (instrucciones -> print .)
    CONTINUE        reduce using rule 6 (instrucciones -> print .)


state 8

    (7) instrucciones -> mapa .

    $end            reduce using rule 7 (instrucciones -> mapa .)
    RETURN          reduce using rule 7 (instrucciones -> mapa .)
    LLAVERIGHT      reduce using rule 7 (instrucciones -> mapa .)
    PACKAGE         reduce using rule 7 (instrucciones -> mapa .)
    VAR             reduce using rule 7 (instrucciones -> mapa .)
    VARIABLE        reduce using rule 7 (instrucciones -> mapa .)
    IF              reduce using rule 7 (instrucciones -> mapa .)
    FOR             reduce using rule 7 (instrucciones -> mapa .)
    IMPRIMIR        reduce using rule 7 (instrucciones -> mapa .)
    MAP             reduce using rule 7 (instrucciones -> mapa .)
    PRODUCTO        reduce using rule 7 (instrucciones -> mapa .)
    SCAN            reduce using rule 7 (instrucciones -> mapa .)
    SWITCH          reduce using rule 7 (instrucciones -> mapa .)
    ENTERO          reduce using rule 7 (instrucciones -> mapa .)
    FLOTANTE        reduce using rule 7 (instrucciones -> mapa .)
    BOOL            reduce using rule 7 (instrucciones -> mapa .)
    FUNC            reduce using rule 7 (instrucciones -> mapa .)
    PARLEFT         reduce using rule 7 (instrucciones -> mapa .)
    BREAK           reduce using rule 7 (instrucciones -> mapa .)
    CONTINUE        reduce using rule 7 (instrucciones -> mapa .)


state 9

    (8) instrucciones -> puntero .

    $end            reduce using rule 8 (instrucciones -> puntero .)
    RETURN          reduce using rule 8 (instrucciones -> puntero .)
    LLAVERIGHT      reduce using rule 8 (instrucciones -> puntero .)
    PACKAGE         reduce using rule 8 (instrucciones -> puntero .)
    VAR             reduce using rule 8 (instrucciones -> puntero .)
    VARIABLE        reduce using rule 8 (instrucciones -> puntero .)
    IF              reduce using rule 8 (instrucciones -> puntero .)
    FOR             reduce using rule 8 (instrucciones -> puntero .)
    IMPRIMIR        reduce using rule 8 (instrucciones -> puntero .)
    MAP             reduce using rule 8 (instrucciones -> puntero .)
    PRODUCTO        reduce using rule 8 (instrucciones -> puntero .)
    SCAN            reduce using rule 8 (instrucciones -> puntero .)
    SWITCH          reduce using rule 8 (instrucciones -> puntero .)
    ENTERO          reduce using rule 8 (instrucciones -> puntero .)
    FLOTANTE        reduce using rule 8 (instrucciones -> puntero .)
    BOOL            reduce using rule 8 (instrucciones -> puntero .)
    FUNC            reduce using rule 8 (instrucciones -> puntero .)
    PARLEFT         reduce using rule 8 (instrucciones -> puntero .)
    BREAK           reduce using rule 8 (instrucciones -> puntero .)
    CONTINUE        reduce using rule 8 (instrucciones -> puntero .)


state 10

    (9) instrucciones -> lectura .

    $end            reduce using rule 9 (instrucciones -> lectura .)
    RETURN          reduce using rule 9 (instrucciones -> lectura .)
    LLAVERIGHT      reduce using rule 9 (instrucciones -> lectura .)
    PACKAGE         reduce using rule 9 (instrucciones -> lectura .)
    VAR             reduce using rule 9 (instrucciones -> lectura .)
    VARIABLE        reduce using rule 9 (instrucciones -> lectura .)
    IF              reduce using rule 9 (instrucciones -> lectura .)
    FOR             reduce using rule 9 (instrucciones -> lectura .)
    IMPRIMIR        reduce using rule 9 (instrucciones -> lectura .)
    MAP             reduce using rule 9 (instrucciones -> lectura .)
    PRODUCTO        reduce using rule 9 (instrucciones -> lectura .)
    SCAN            reduce using rule 9 (instrucciones -> lectura .)
    SWITCH          reduce using rule 9 (instrucciones -> lectura .)
    ENTERO          reduce using rule 9 (instrucciones -> lectura .)
    FLOTANTE        reduce using rule 9 (instrucciones -> lectura .)
    BOOL            reduce using rule 9 (instrucciones -> lectura .)
    FUNC            reduce using rule 9 (instrucciones -> lectura .)
    PARLEFT         reduce using rule 9 (instrucciones -> lectura .)
    BREAK           reduce using rule 9 (instrucciones -> lectura .)
    CONTINUE        reduce using rule 9 (instrucciones -> lectura .)


state 11

    (10) instrucciones -> array .

    $end            reduce using rule 10 (instrucciones -> array .)
    RETURN          reduce using rule 10 (instrucciones -> array .)
    LLAVERIGHT      reduce using rule 10 (instrucciones -> array .)
    PACKAGE         reduce using rule 10 (instrucciones -> array .)
    VAR             reduce using rule 10 (instrucciones -> array .)
    VARIABLE        reduce using rule 10 (instrucciones -> array .)
    IF              reduce using rule 10 (instrucciones -> array .)
    FOR             reduce using rule 10 (instrucciones -> array .)
    IMPRIMIR        reduce using rule 10 (instrucciones -> array .)
    MAP             reduce using rule 10 (instrucciones -> array .)
    PRODUCTO        reduce using rule 10 (instrucciones -> array .)
    SCAN            reduce using rule 10 (instrucciones -> array .)
    SWITCH          reduce using rule 10 (instrucciones -> array .)
    ENTERO          reduce using rule 10 (instrucciones -> array .)
    FLOTANTE        reduce using rule 10 (instrucciones -> array .)
    BOOL            reduce using rule 10 (instrucciones -> array .)
    FUNC            reduce using rule 10 (instrucciones -> array .)
    PARLEFT         reduce using rule 10 (instrucciones -> array .)
    BREAK           reduce using rule 10 (instrucciones -> array .)
    CONTINUE        reduce using rule 10 (instrucciones -> array .)


state 12

    (11) instrucciones -> switch .

    $end            reduce using rule 11 (instrucciones -> switch .)
    RETURN          reduce using rule 11 (instrucciones -> switch .)
    LLAVERIGHT      reduce using rule 11 (instrucciones -> switch .)
    PACKAGE         reduce using rule 11 (instrucciones -> switch .)
    VAR             reduce using rule 11 (instrucciones -> switch .)
    VARIABLE        reduce using rule 11 (instrucciones -> switch .)
    IF              reduce using rule 11 (instrucciones -> switch .)
    FOR             reduce using rule 11 (instrucciones -> switch .)
    IMPRIMIR        reduce using rule 11 (instrucciones -> switch .)
    MAP             reduce using rule 11 (instrucciones -> switch .)
    PRODUCTO        reduce using rule 11 (instrucciones -> switch .)
    SCAN            reduce using rule 11 (instrucciones -> switch .)
    SWITCH          reduce using rule 11 (instrucciones -> switch .)
    ENTERO          reduce using rule 11 (instrucciones -> switch .)
    FLOTANTE        reduce using rule 11 (instrucciones -> switch .)
    BOOL            reduce using rule 11 (instrucciones -> switch .)
    FUNC            reduce using rule 11 (instrucciones -> switch .)
    PARLEFT         reduce using rule 11 (instrucciones -> switch .)
    BREAK           reduce using rule 11 (instrucciones -> switch .)
    CONTINUE        reduce using rule 11 (instrucciones -> switch .)


state 13

    (12) instrucciones -> funcion .

    $end            reduce using rule 12 (instrucciones -> funcion .)
    RETURN          reduce using rule 12 (instrucciones -> funcion .)
    LLAVERIGHT      reduce using rule 12 (instrucciones -> funcion .)
    PACKAGE         reduce using rule 12 (instrucciones -> funcion .)
    VAR             reduce using rule 12 (instrucciones -> funcion .)
    VARIABLE        reduce using rule 12 (instrucciones -> funcion .)
    IF              reduce using rule 12 (instrucciones -> funcion .)
    FOR             reduce using rule 12 (instrucciones -> funcion .)
    IMPRIMIR        reduce using rule 12 (instrucciones -> funcion .)
    MAP             reduce using rule 12 (instrucciones -> funcion .)
    PRODUCTO        reduce using rule 12 (instrucciones -> funcion .)
    SCAN            reduce using rule 12 (instrucciones -> funcion .)
    SWITCH          reduce using rule 12 (instrucciones -> funcion .)
    ENTERO          reduce using rule 12 (instrucciones -> funcion .)
    FLOTANTE        reduce using rule 12 (instrucciones -> funcion .)
    BOOL            reduce using rule 12 (instrucciones -> funcion .)
    FUNC            reduce using rule 12 (instrucciones -> funcion .)
    PARLEFT         reduce using rule 12 (instrucciones -> funcion .)
    BREAK           reduce using rule 12 (instrucciones -> funcion .)
    CONTINUE        reduce using rule 12 (instrucciones -> funcion .)


state 14

    (13) instrucciones -> PACKAGE . VARIABLE IMPORT CADENA funcion

    VARIABLE        shift and go to state 40


state 15

    (24) asignacion -> VARIABLE . DECLARADOR valor
    (25) asignacion -> VARIABLE . IGUAL valor
    (26) asignacion -> VARIABLE . MASIGUAL acumular
    (27) asignacion -> VARIABLE . MENOSIGUAL expresion
    (92) array -> VARIABLE . DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (138) slices -> VARIABLE . DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT
    (139) slices -> VARIABLE . DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT
    (131) factor -> VARIABLE .
    (143) declaracion_slices -> VARIABLE . IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (144) declaracion_slices -> VARIABLE . IGUAL CORCHLEFT CORCHRIGHT typeData
    (145) declaracion_slices -> VARIABLE . DECLARADOR CORCHLEFT CORCHRIGHT typeData

    DECLARADOR      shift and go to state 41
    IGUAL           shift and go to state 42
    MASIGUAL        shift and go to state 43
    MENOSIGUAL      shift and go to state 44
    MAYORQUE        reduce using rule 131 (factor -> VARIABLE .)
    MENORQUE        reduce using rule 131 (factor -> VARIABLE .)
    DIFERENTE       reduce using rule 131 (factor -> VARIABLE .)
    ESIGUAL         reduce using rule 131 (factor -> VARIABLE .)
    MENORIGUAL      reduce using rule 131 (factor -> VARIABLE .)
    MAYORIGUAL      reduce using rule 131 (factor -> VARIABLE .)


state 16

    (17) asignacion -> VAR . VARIABLE BOOL IGUAL booleano
    (18) asignacion -> VAR . VARIABLE INT IGUAL expresionInt
    (19) asignacion -> VAR . VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> VAR . VARIABLE STRING IGUAL CADENA
    (21) asignacion -> VAR . VARIABLE puntero IGUAL refer
    (22) asignacion -> VAR . VARIABLE puntero
    (141) declaracion_slices -> VAR . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (142) declaracion_slices -> VAR . VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData

    VARIABLE        shift and go to state 45


state 17

    (184) factor -> BOOL .

    MAYORQUE        reduce using rule 184 (factor -> BOOL .)
    MENORQUE        reduce using rule 184 (factor -> BOOL .)
    DIFERENTE       reduce using rule 184 (factor -> BOOL .)
    ESIGUAL         reduce using rule 184 (factor -> BOOL .)
    MENORIGUAL      reduce using rule 184 (factor -> BOOL .)
    MAYORIGUAL      reduce using rule 184 (factor -> BOOL .)
    $end            reduce using rule 184 (factor -> BOOL .)
    AND             reduce using rule 184 (factor -> BOOL .)
    OR              reduce using rule 184 (factor -> BOOL .)
    LLAVELEFT       reduce using rule 184 (factor -> BOOL .)
    PARRIGHT        reduce using rule 184 (factor -> BOOL .)
    RETURN          reduce using rule 184 (factor -> BOOL .)
    LLAVERIGHT      reduce using rule 184 (factor -> BOOL .)
    PACKAGE         reduce using rule 184 (factor -> BOOL .)
    VAR             reduce using rule 184 (factor -> BOOL .)
    VARIABLE        reduce using rule 184 (factor -> BOOL .)
    IF              reduce using rule 184 (factor -> BOOL .)
    FOR             reduce using rule 184 (factor -> BOOL .)
    IMPRIMIR        reduce using rule 184 (factor -> BOOL .)
    MAP             reduce using rule 184 (factor -> BOOL .)
    PRODUCTO        reduce using rule 184 (factor -> BOOL .)
    SCAN            reduce using rule 184 (factor -> BOOL .)
    SWITCH          reduce using rule 184 (factor -> BOOL .)
    ENTERO          reduce using rule 184 (factor -> BOOL .)
    FLOTANTE        reduce using rule 184 (factor -> BOOL .)
    BOOL            reduce using rule 184 (factor -> BOOL .)
    FUNC            reduce using rule 184 (factor -> BOOL .)
    PARLEFT         reduce using rule 184 (factor -> BOOL .)
    PUNTOCOMA       reduce using rule 184 (factor -> BOOL .)
    BREAK           reduce using rule 184 (factor -> BOOL .)
    CONTINUE        reduce using rule 184 (factor -> BOOL .)


state 18

    (117) expresion -> expresionInt .
    (119) expresionInt -> expresionInt . operadorArit ENTERO
    (123) operadorArit -> . SUMA
    (124) operadorArit -> . RESTA
    (125) operadorArit -> . PRODUCTO
    (126) operadorArit -> . DIVISION
    (127) operadorArit -> . MODULO

  ! shift/reduce conflict for PRODUCTO resolved as shift
    $end            reduce using rule 117 (expresion -> expresionInt .)
    PARRIGHT        reduce using rule 117 (expresion -> expresionInt .)
    RETURN          reduce using rule 117 (expresion -> expresionInt .)
    LLAVERIGHT      reduce using rule 117 (expresion -> expresionInt .)
    PACKAGE         reduce using rule 117 (expresion -> expresionInt .)
    VAR             reduce using rule 117 (expresion -> expresionInt .)
    VARIABLE        reduce using rule 117 (expresion -> expresionInt .)
    IF              reduce using rule 117 (expresion -> expresionInt .)
    FOR             reduce using rule 117 (expresion -> expresionInt .)
    IMPRIMIR        reduce using rule 117 (expresion -> expresionInt .)
    MAP             reduce using rule 117 (expresion -> expresionInt .)
    SCAN            reduce using rule 117 (expresion -> expresionInt .)
    SWITCH          reduce using rule 117 (expresion -> expresionInt .)
    ENTERO          reduce using rule 117 (expresion -> expresionInt .)
    FLOTANTE        reduce using rule 117 (expresion -> expresionInt .)
    BOOL            reduce using rule 117 (expresion -> expresionInt .)
    FUNC            reduce using rule 117 (expresion -> expresionInt .)
    PARLEFT         reduce using rule 117 (expresion -> expresionInt .)
    BREAK           reduce using rule 117 (expresion -> expresionInt .)
    CONTINUE        reduce using rule 117 (expresion -> expresionInt .)
    COMA            reduce using rule 117 (expresion -> expresionInt .)
    SUMA            shift and go to state 47
    RESTA           shift and go to state 48
    PRODUCTO        shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51

  ! PRODUCTO        [ reduce using rule 117 (expresion -> expresionInt .) ]

    operadorArit                   shift and go to state 46

state 19

    (118) expresion -> expresionFloat .
    (121) expresionFloat -> expresionFloat . operadorArit FLOTANTE
    (123) operadorArit -> . SUMA
    (124) operadorArit -> . RESTA
    (125) operadorArit -> . PRODUCTO
    (126) operadorArit -> . DIVISION
    (127) operadorArit -> . MODULO

  ! shift/reduce conflict for PRODUCTO resolved as shift
    $end            reduce using rule 118 (expresion -> expresionFloat .)
    PARRIGHT        reduce using rule 118 (expresion -> expresionFloat .)
    RETURN          reduce using rule 118 (expresion -> expresionFloat .)
    LLAVERIGHT      reduce using rule 118 (expresion -> expresionFloat .)
    PACKAGE         reduce using rule 118 (expresion -> expresionFloat .)
    VAR             reduce using rule 118 (expresion -> expresionFloat .)
    VARIABLE        reduce using rule 118 (expresion -> expresionFloat .)
    IF              reduce using rule 118 (expresion -> expresionFloat .)
    FOR             reduce using rule 118 (expresion -> expresionFloat .)
    IMPRIMIR        reduce using rule 118 (expresion -> expresionFloat .)
    MAP             reduce using rule 118 (expresion -> expresionFloat .)
    SCAN            reduce using rule 118 (expresion -> expresionFloat .)
    SWITCH          reduce using rule 118 (expresion -> expresionFloat .)
    ENTERO          reduce using rule 118 (expresion -> expresionFloat .)
    FLOTANTE        reduce using rule 118 (expresion -> expresionFloat .)
    BOOL            reduce using rule 118 (expresion -> expresionFloat .)
    FUNC            reduce using rule 118 (expresion -> expresionFloat .)
    PARLEFT         reduce using rule 118 (expresion -> expresionFloat .)
    BREAK           reduce using rule 118 (expresion -> expresionFloat .)
    CONTINUE        reduce using rule 118 (expresion -> expresionFloat .)
    COMA            reduce using rule 118 (expresion -> expresionFloat .)
    SUMA            shift and go to state 47
    RESTA           shift and go to state 48
    PRODUCTO        shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51

  ! PRODUCTO        [ reduce using rule 118 (expresion -> expresionFloat .) ]

    operadorArit                   shift and go to state 52

state 20

    (23) asignacion -> slices .

    $end            reduce using rule 23 (asignacion -> slices .)
    RETURN          reduce using rule 23 (asignacion -> slices .)
    LLAVERIGHT      reduce using rule 23 (asignacion -> slices .)
    PACKAGE         reduce using rule 23 (asignacion -> slices .)
    VAR             reduce using rule 23 (asignacion -> slices .)
    VARIABLE        reduce using rule 23 (asignacion -> slices .)
    IF              reduce using rule 23 (asignacion -> slices .)
    FOR             reduce using rule 23 (asignacion -> slices .)
    IMPRIMIR        reduce using rule 23 (asignacion -> slices .)
    MAP             reduce using rule 23 (asignacion -> slices .)
    PRODUCTO        reduce using rule 23 (asignacion -> slices .)
    SCAN            reduce using rule 23 (asignacion -> slices .)
    SWITCH          reduce using rule 23 (asignacion -> slices .)
    ENTERO          reduce using rule 23 (asignacion -> slices .)
    FLOTANTE        reduce using rule 23 (asignacion -> slices .)
    BOOL            reduce using rule 23 (asignacion -> slices .)
    FUNC            reduce using rule 23 (asignacion -> slices .)
    PARLEFT         reduce using rule 23 (asignacion -> slices .)
    BREAK           reduce using rule 23 (asignacion -> slices .)
    CONTINUE        reduce using rule 23 (asignacion -> slices .)


state 21

    (28) asignacion -> derefer . IGUAL valor

    IGUAL           shift and go to state 53


state 22

    (128) expresion -> term .

    $end            reduce using rule 128 (expresion -> term .)
    PARRIGHT        reduce using rule 128 (expresion -> term .)
    RETURN          reduce using rule 128 (expresion -> term .)
    LLAVERIGHT      reduce using rule 128 (expresion -> term .)
    PACKAGE         reduce using rule 128 (expresion -> term .)
    VAR             reduce using rule 128 (expresion -> term .)
    VARIABLE        reduce using rule 128 (expresion -> term .)
    IF              reduce using rule 128 (expresion -> term .)
    FOR             reduce using rule 128 (expresion -> term .)
    IMPRIMIR        reduce using rule 128 (expresion -> term .)
    MAP             reduce using rule 128 (expresion -> term .)
    PRODUCTO        reduce using rule 128 (expresion -> term .)
    SCAN            reduce using rule 128 (expresion -> term .)
    SWITCH          reduce using rule 128 (expresion -> term .)
    ENTERO          reduce using rule 128 (expresion -> term .)
    FLOTANTE        reduce using rule 128 (expresion -> term .)
    BOOL            reduce using rule 128 (expresion -> term .)
    FUNC            reduce using rule 128 (expresion -> term .)
    PARLEFT         reduce using rule 128 (expresion -> term .)
    BREAK           reduce using rule 128 (expresion -> term .)
    CONTINUE        reduce using rule 128 (expresion -> term .)
    COMA            reduce using rule 128 (expresion -> term .)


state 23

    (173) condiciones -> factor . MAYORQUE factor
    (174) condiciones -> factor . MENORQUE factor
    (175) condiciones -> factor . DIFERENTE factor
    (176) condiciones -> factor . ESIGUAL factor
    (177) condiciones -> factor . MENORIGUAL factor
    (178) condiciones -> factor . MAYORIGUAL factor

    MAYORQUE        shift and go to state 54
    MENORQUE        shift and go to state 55
    DIFERENTE       shift and go to state 56
    ESIGUAL         shift and go to state 57
    MENORIGUAL      shift and go to state 58
    MAYORIGUAL      shift and go to state 59


state 24

    (41) sentenciaIf -> IF . comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> IF . comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> IF . comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> IF . comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> IF . comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> IF . comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (179) comparaciones -> . comparacion
    (180) comparaciones -> . comparacion anado comparaciones
    (146) comparacion -> . condiciones
    (147) comparacion -> . NEGACION PARLEFT condiciones PARRIGHT
    (148) comparacion -> . PARLEFT condiciones PARRIGHT
    (173) condiciones -> . factor MAYORQUE factor
    (174) condiciones -> . factor MENORQUE factor
    (175) condiciones -> . factor DIFERENTE factor
    (176) condiciones -> . factor ESIGUAL factor
    (177) condiciones -> . factor MENORIGUAL factor
    (178) condiciones -> . factor MAYORIGUAL factor
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    NEGACION        shift and go to state 64
    PARLEFT         shift and go to state 65
    VARIABLE        shift and go to state 61
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 67
    FLOTANTE        shift and go to state 68

    comparaciones                  shift and go to state 60
    comparacion                    shift and go to state 62
    condiciones                    shift and go to state 63
    factor                         shift and go to state 23
    numericos                      shift and go to state 66

state 25

    (85) sentenciaFor -> FOR . inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (86) inicio -> . VARIABLE DECLARADOR ENTERO

    VARIABLE        shift and go to state 70

    inicio                         shift and go to state 69

state 26

    (106) print -> IMPRIMIR . PARLEFT contPrint PARRIGHT

    PARLEFT         shift and go to state 71


state 27

    (134) numericos -> PARLEFT . expresion PARRIGHT
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    PARLEFT         shift and go to state 27

    expresion                      shift and go to state 72
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 73

state 28

    (51) mapa -> MAP . CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> MAP . CORCHLEFT STRING CORCHRIGHT contMapa

    CORCHLEFT       shift and go to state 74


state 29

    (82) puntero -> PRODUCTO . typeData
    (84) derefer -> PRODUCTO . VARIABLE
    (88) typeData -> . BOOL
    (89) typeData -> . INT
    (90) typeData -> . FLOAT
    (91) typeData -> . STRING

    VARIABLE        shift and go to state 76
    BOOL            shift and go to state 77
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 80

    typeData                       shift and go to state 75

state 30

    (115) lectura -> SCAN . PARLEFT contScan PARRIGHT

    PARLEFT         shift and go to state 81


state 31

    (120) expresionInt -> ENTERO . operadorArit ENTERO
    (132) numericos -> ENTERO .
    (123) operadorArit -> . SUMA
    (124) operadorArit -> . RESTA
    (125) operadorArit -> . PRODUCTO
    (126) operadorArit -> . DIVISION
    (127) operadorArit -> . MODULO

  ! shift/reduce conflict for PRODUCTO resolved as shift
    $end            reduce using rule 132 (numericos -> ENTERO .)
    MAYORQUE        reduce using rule 132 (numericos -> ENTERO .)
    MENORQUE        reduce using rule 132 (numericos -> ENTERO .)
    DIFERENTE       reduce using rule 132 (numericos -> ENTERO .)
    ESIGUAL         reduce using rule 132 (numericos -> ENTERO .)
    MENORIGUAL      reduce using rule 132 (numericos -> ENTERO .)
    MAYORIGUAL      reduce using rule 132 (numericos -> ENTERO .)
    PARRIGHT        reduce using rule 132 (numericos -> ENTERO .)
    RETURN          reduce using rule 132 (numericos -> ENTERO .)
    LLAVERIGHT      reduce using rule 132 (numericos -> ENTERO .)
    PACKAGE         reduce using rule 132 (numericos -> ENTERO .)
    VAR             reduce using rule 132 (numericos -> ENTERO .)
    VARIABLE        reduce using rule 132 (numericos -> ENTERO .)
    IF              reduce using rule 132 (numericos -> ENTERO .)
    FOR             reduce using rule 132 (numericos -> ENTERO .)
    IMPRIMIR        reduce using rule 132 (numericos -> ENTERO .)
    MAP             reduce using rule 132 (numericos -> ENTERO .)
    SCAN            reduce using rule 132 (numericos -> ENTERO .)
    SWITCH          reduce using rule 132 (numericos -> ENTERO .)
    ENTERO          reduce using rule 132 (numericos -> ENTERO .)
    FLOTANTE        reduce using rule 132 (numericos -> ENTERO .)
    BOOL            reduce using rule 132 (numericos -> ENTERO .)
    FUNC            reduce using rule 132 (numericos -> ENTERO .)
    PARLEFT         reduce using rule 132 (numericos -> ENTERO .)
    BREAK           reduce using rule 132 (numericos -> ENTERO .)
    CONTINUE        reduce using rule 132 (numericos -> ENTERO .)
    COMA            reduce using rule 132 (numericos -> ENTERO .)
    SUMA            shift and go to state 47
    RESTA           shift and go to state 48
    PRODUCTO        shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51

  ! PRODUCTO        [ reduce using rule 132 (numericos -> ENTERO .) ]

    operadorArit                   shift and go to state 82

state 32

    (163) switch -> SWITCH . VARIABLE LLAVELEFT bloque_switch LLAVERIGHT

    VARIABLE        shift and go to state 83


state 33

    (149) funcion -> funcion_sin_parametro .

    $end            reduce using rule 149 (funcion -> funcion_sin_parametro .)
    RETURN          reduce using rule 149 (funcion -> funcion_sin_parametro .)
    LLAVERIGHT      reduce using rule 149 (funcion -> funcion_sin_parametro .)
    PACKAGE         reduce using rule 149 (funcion -> funcion_sin_parametro .)
    VAR             reduce using rule 149 (funcion -> funcion_sin_parametro .)
    VARIABLE        reduce using rule 149 (funcion -> funcion_sin_parametro .)
    IF              reduce using rule 149 (funcion -> funcion_sin_parametro .)
    FOR             reduce using rule 149 (funcion -> funcion_sin_parametro .)
    IMPRIMIR        reduce using rule 149 (funcion -> funcion_sin_parametro .)
    MAP             reduce using rule 149 (funcion -> funcion_sin_parametro .)
    PRODUCTO        reduce using rule 149 (funcion -> funcion_sin_parametro .)
    SCAN            reduce using rule 149 (funcion -> funcion_sin_parametro .)
    SWITCH          reduce using rule 149 (funcion -> funcion_sin_parametro .)
    ENTERO          reduce using rule 149 (funcion -> funcion_sin_parametro .)
    FLOTANTE        reduce using rule 149 (funcion -> funcion_sin_parametro .)
    BOOL            reduce using rule 149 (funcion -> funcion_sin_parametro .)
    FUNC            reduce using rule 149 (funcion -> funcion_sin_parametro .)
    PARLEFT         reduce using rule 149 (funcion -> funcion_sin_parametro .)
    BREAK           reduce using rule 149 (funcion -> funcion_sin_parametro .)
    CONTINUE        reduce using rule 149 (funcion -> funcion_sin_parametro .)


state 34

    (150) funcion -> funcion_parametro .

    $end            reduce using rule 150 (funcion -> funcion_parametro .)
    RETURN          reduce using rule 150 (funcion -> funcion_parametro .)
    LLAVERIGHT      reduce using rule 150 (funcion -> funcion_parametro .)
    PACKAGE         reduce using rule 150 (funcion -> funcion_parametro .)
    VAR             reduce using rule 150 (funcion -> funcion_parametro .)
    VARIABLE        reduce using rule 150 (funcion -> funcion_parametro .)
    IF              reduce using rule 150 (funcion -> funcion_parametro .)
    FOR             reduce using rule 150 (funcion -> funcion_parametro .)
    IMPRIMIR        reduce using rule 150 (funcion -> funcion_parametro .)
    MAP             reduce using rule 150 (funcion -> funcion_parametro .)
    PRODUCTO        reduce using rule 150 (funcion -> funcion_parametro .)
    SCAN            reduce using rule 150 (funcion -> funcion_parametro .)
    SWITCH          reduce using rule 150 (funcion -> funcion_parametro .)
    ENTERO          reduce using rule 150 (funcion -> funcion_parametro .)
    FLOTANTE        reduce using rule 150 (funcion -> funcion_parametro .)
    BOOL            reduce using rule 150 (funcion -> funcion_parametro .)
    FUNC            reduce using rule 150 (funcion -> funcion_parametro .)
    PARLEFT         reduce using rule 150 (funcion -> funcion_parametro .)
    BREAK           reduce using rule 150 (funcion -> funcion_parametro .)
    CONTINUE        reduce using rule 150 (funcion -> funcion_parametro .)


state 35

    (151) funcion -> funcion_sin_parametro_return .

    $end            reduce using rule 151 (funcion -> funcion_sin_parametro_return .)
    RETURN          reduce using rule 151 (funcion -> funcion_sin_parametro_return .)
    LLAVERIGHT      reduce using rule 151 (funcion -> funcion_sin_parametro_return .)
    PACKAGE         reduce using rule 151 (funcion -> funcion_sin_parametro_return .)
    VAR             reduce using rule 151 (funcion -> funcion_sin_parametro_return .)
    VARIABLE        reduce using rule 151 (funcion -> funcion_sin_parametro_return .)
    IF              reduce using rule 151 (funcion -> funcion_sin_parametro_return .)
    FOR             reduce using rule 151 (funcion -> funcion_sin_parametro_return .)
    IMPRIMIR        reduce using rule 151 (funcion -> funcion_sin_parametro_return .)
    MAP             reduce using rule 151 (funcion -> funcion_sin_parametro_return .)
    PRODUCTO        reduce using rule 151 (funcion -> funcion_sin_parametro_return .)
    SCAN            reduce using rule 151 (funcion -> funcion_sin_parametro_return .)
    SWITCH          reduce using rule 151 (funcion -> funcion_sin_parametro_return .)
    ENTERO          reduce using rule 151 (funcion -> funcion_sin_parametro_return .)
    FLOTANTE        reduce using rule 151 (funcion -> funcion_sin_parametro_return .)
    BOOL            reduce using rule 151 (funcion -> funcion_sin_parametro_return .)
    FUNC            reduce using rule 151 (funcion -> funcion_sin_parametro_return .)
    PARLEFT         reduce using rule 151 (funcion -> funcion_sin_parametro_return .)
    BREAK           reduce using rule 151 (funcion -> funcion_sin_parametro_return .)
    CONTINUE        reduce using rule 151 (funcion -> funcion_sin_parametro_return .)


state 36

    (135) slices -> declaracion_slices .
    (136) slices -> declaracion_slices . LLAVELEFT contArrayEnteros LLAVERIGHT
    (137) slices -> declaracion_slices . LLAVELEFT contArrayCadenas LLAVERIGHT

    $end            reduce using rule 135 (slices -> declaracion_slices .)
    RETURN          reduce using rule 135 (slices -> declaracion_slices .)
    LLAVERIGHT      reduce using rule 135 (slices -> declaracion_slices .)
    PACKAGE         reduce using rule 135 (slices -> declaracion_slices .)
    VAR             reduce using rule 135 (slices -> declaracion_slices .)
    VARIABLE        reduce using rule 135 (slices -> declaracion_slices .)
    IF              reduce using rule 135 (slices -> declaracion_slices .)
    FOR             reduce using rule 135 (slices -> declaracion_slices .)
    IMPRIMIR        reduce using rule 135 (slices -> declaracion_slices .)
    MAP             reduce using rule 135 (slices -> declaracion_slices .)
    PRODUCTO        reduce using rule 135 (slices -> declaracion_slices .)
    SCAN            reduce using rule 135 (slices -> declaracion_slices .)
    SWITCH          reduce using rule 135 (slices -> declaracion_slices .)
    ENTERO          reduce using rule 135 (slices -> declaracion_slices .)
    FLOTANTE        reduce using rule 135 (slices -> declaracion_slices .)
    BOOL            reduce using rule 135 (slices -> declaracion_slices .)
    FUNC            reduce using rule 135 (slices -> declaracion_slices .)
    PARLEFT         reduce using rule 135 (slices -> declaracion_slices .)
    BREAK           reduce using rule 135 (slices -> declaracion_slices .)
    CONTINUE        reduce using rule 135 (slices -> declaracion_slices .)
    LLAVELEFT       shift and go to state 84


state 37

    (122) expresionFloat -> FLOTANTE . operadorArit FLOTANTE
    (133) numericos -> FLOTANTE .
    (123) operadorArit -> . SUMA
    (124) operadorArit -> . RESTA
    (125) operadorArit -> . PRODUCTO
    (126) operadorArit -> . DIVISION
    (127) operadorArit -> . MODULO

  ! shift/reduce conflict for PRODUCTO resolved as shift
    $end            reduce using rule 133 (numericos -> FLOTANTE .)
    MAYORQUE        reduce using rule 133 (numericos -> FLOTANTE .)
    MENORQUE        reduce using rule 133 (numericos -> FLOTANTE .)
    DIFERENTE       reduce using rule 133 (numericos -> FLOTANTE .)
    ESIGUAL         reduce using rule 133 (numericos -> FLOTANTE .)
    MENORIGUAL      reduce using rule 133 (numericos -> FLOTANTE .)
    MAYORIGUAL      reduce using rule 133 (numericos -> FLOTANTE .)
    PARRIGHT        reduce using rule 133 (numericos -> FLOTANTE .)
    RETURN          reduce using rule 133 (numericos -> FLOTANTE .)
    LLAVERIGHT      reduce using rule 133 (numericos -> FLOTANTE .)
    PACKAGE         reduce using rule 133 (numericos -> FLOTANTE .)
    VAR             reduce using rule 133 (numericos -> FLOTANTE .)
    VARIABLE        reduce using rule 133 (numericos -> FLOTANTE .)
    IF              reduce using rule 133 (numericos -> FLOTANTE .)
    FOR             reduce using rule 133 (numericos -> FLOTANTE .)
    IMPRIMIR        reduce using rule 133 (numericos -> FLOTANTE .)
    MAP             reduce using rule 133 (numericos -> FLOTANTE .)
    SCAN            reduce using rule 133 (numericos -> FLOTANTE .)
    SWITCH          reduce using rule 133 (numericos -> FLOTANTE .)
    ENTERO          reduce using rule 133 (numericos -> FLOTANTE .)
    FLOTANTE        reduce using rule 133 (numericos -> FLOTANTE .)
    BOOL            reduce using rule 133 (numericos -> FLOTANTE .)
    FUNC            reduce using rule 133 (numericos -> FLOTANTE .)
    PARLEFT         reduce using rule 133 (numericos -> FLOTANTE .)
    BREAK           reduce using rule 133 (numericos -> FLOTANTE .)
    CONTINUE        reduce using rule 133 (numericos -> FLOTANTE .)
    COMA            reduce using rule 133 (numericos -> FLOTANTE .)
    SUMA            shift and go to state 47
    RESTA           shift and go to state 48
    PRODUCTO        shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51

  ! PRODUCTO        [ reduce using rule 133 (numericos -> FLOTANTE .) ]

    operadorArit                   shift and go to state 85

state 38

    (129) term -> numericos .
    (130) factor -> numericos .

    $end            reduce using rule 129 (term -> numericos .)
    RETURN          reduce using rule 129 (term -> numericos .)
    LLAVERIGHT      reduce using rule 129 (term -> numericos .)
    PACKAGE         reduce using rule 129 (term -> numericos .)
    VAR             reduce using rule 129 (term -> numericos .)
    VARIABLE        reduce using rule 129 (term -> numericos .)
    IF              reduce using rule 129 (term -> numericos .)
    FOR             reduce using rule 129 (term -> numericos .)
    IMPRIMIR        reduce using rule 129 (term -> numericos .)
    MAP             reduce using rule 129 (term -> numericos .)
    PRODUCTO        reduce using rule 129 (term -> numericos .)
    SCAN            reduce using rule 129 (term -> numericos .)
    SWITCH          reduce using rule 129 (term -> numericos .)
    ENTERO          reduce using rule 129 (term -> numericos .)
    FLOTANTE        reduce using rule 129 (term -> numericos .)
    BOOL            reduce using rule 129 (term -> numericos .)
    FUNC            reduce using rule 129 (term -> numericos .)
    PARLEFT         reduce using rule 129 (term -> numericos .)
    BREAK           reduce using rule 129 (term -> numericos .)
    CONTINUE        reduce using rule 129 (term -> numericos .)
    MAYORQUE        reduce using rule 130 (factor -> numericos .)
    MENORQUE        reduce using rule 130 (factor -> numericos .)
    DIFERENTE       reduce using rule 130 (factor -> numericos .)
    ESIGUAL         reduce using rule 130 (factor -> numericos .)
    MENORIGUAL      reduce using rule 130 (factor -> numericos .)
    MAYORIGUAL      reduce using rule 130 (factor -> numericos .)


state 39

    (152) funcion_sin_parametro -> FUNC . VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (153) funcion_sin_parametro -> FUNC . VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (154) funcion_sin_parametro -> FUNC . VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (156) funcion_parametro -> FUNC . VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> FUNC . VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> FUNC . VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> FUNC . VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT

    VARIABLE        shift and go to state 86


state 40

    (13) instrucciones -> PACKAGE VARIABLE . IMPORT CADENA funcion

    IMPORT          shift and go to state 87


state 41

    (24) asignacion -> VARIABLE DECLARADOR . valor
    (92) array -> VARIABLE DECLARADOR . CORCHLEFT ENTERO CORCHRIGHT contArray
    (138) slices -> VARIABLE DECLARADOR . metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT
    (139) slices -> VARIABLE DECLARADOR . metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT
    (145) declaracion_slices -> VARIABLE DECLARADOR . CORCHLEFT CORCHRIGHT typeData
    (32) valor -> . booleano
    (33) valor -> . expresion
    (34) valor -> . CADENA
    (35) valor -> . VARIABLE
    (36) valor -> . mapa
    (37) valor -> . refer
    (140) metodos_slices -> . MAKE
    (29) booleano -> . condicion
    (30) booleano -> . TRUE
    (31) booleano -> . FALSE
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (83) refer -> . AMPERSAND VARIABLE
    (182) condicion -> . AND
    (183) condicion -> . OR
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    CORCHLEFT       shift and go to state 90
    CADENA          shift and go to state 94
    VARIABLE        shift and go to state 88
    MAKE            shift and go to state 97
    TRUE            shift and go to state 99
    FALSE           shift and go to state 100
    MAP             shift and go to state 28
    AMPERSAND       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    PARLEFT         shift and go to state 27

    valor                          shift and go to state 89
    metodos_slices                 shift and go to state 91
    booleano                       shift and go to state 92
    expresion                      shift and go to state 93
    mapa                           shift and go to state 95
    refer                          shift and go to state 96
    condicion                      shift and go to state 98
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 73

state 42

    (25) asignacion -> VARIABLE IGUAL . valor
    (143) declaracion_slices -> VARIABLE IGUAL . CORCHLEFT ENTERO CORCHRIGHT typeData
    (144) declaracion_slices -> VARIABLE IGUAL . CORCHLEFT CORCHRIGHT typeData
    (32) valor -> . booleano
    (33) valor -> . expresion
    (34) valor -> . CADENA
    (35) valor -> . VARIABLE
    (36) valor -> . mapa
    (37) valor -> . refer
    (29) booleano -> . condicion
    (30) booleano -> . TRUE
    (31) booleano -> . FALSE
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (83) refer -> . AMPERSAND VARIABLE
    (182) condicion -> . AND
    (183) condicion -> . OR
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    CORCHLEFT       shift and go to state 105
    CADENA          shift and go to state 94
    VARIABLE        shift and go to state 88
    TRUE            shift and go to state 99
    FALSE           shift and go to state 100
    MAP             shift and go to state 28
    AMPERSAND       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    PARLEFT         shift and go to state 27

    valor                          shift and go to state 104
    booleano                       shift and go to state 92
    expresion                      shift and go to state 93
    mapa                           shift and go to state 95
    refer                          shift and go to state 96
    condicion                      shift and go to state 98
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 73

state 43

    (26) asignacion -> VARIABLE MASIGUAL . acumular
    (38) acumular -> . expresion
    (39) acumular -> . CADENA
    (40) acumular -> . VARIABLE
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    CADENA          shift and go to state 109
    VARIABLE        shift and go to state 106
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    PARLEFT         shift and go to state 27

    acumular                       shift and go to state 107
    expresion                      shift and go to state 108
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 73

state 44

    (27) asignacion -> VARIABLE MENOSIGUAL . expresion
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    PARLEFT         shift and go to state 27

    expresion                      shift and go to state 110
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 73

state 45

    (17) asignacion -> VAR VARIABLE . BOOL IGUAL booleano
    (18) asignacion -> VAR VARIABLE . INT IGUAL expresionInt
    (19) asignacion -> VAR VARIABLE . FLOAT IGUAL expresionFloat
    (20) asignacion -> VAR VARIABLE . STRING IGUAL CADENA
    (21) asignacion -> VAR VARIABLE . puntero IGUAL refer
    (22) asignacion -> VAR VARIABLE . puntero
    (141) declaracion_slices -> VAR VARIABLE . IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (142) declaracion_slices -> VAR VARIABLE . IGUAL CORCHLEFT CORCHRIGHT typeData
    (82) puntero -> . PRODUCTO typeData

    BOOL            shift and go to state 111
    INT             shift and go to state 113
    FLOAT           shift and go to state 114
    STRING          shift and go to state 115
    IGUAL           shift and go to state 112
    PRODUCTO        shift and go to state 117

    puntero                        shift and go to state 116

state 46

    (119) expresionInt -> expresionInt operadorArit . ENTERO

    ENTERO          shift and go to state 118


state 47

    (123) operadorArit -> SUMA .

    ENTERO          reduce using rule 123 (operadorArit -> SUMA .)
    FLOTANTE        reduce using rule 123 (operadorArit -> SUMA .)


state 48

    (124) operadorArit -> RESTA .

    ENTERO          reduce using rule 124 (operadorArit -> RESTA .)
    FLOTANTE        reduce using rule 124 (operadorArit -> RESTA .)


state 49

    (125) operadorArit -> PRODUCTO .

    ENTERO          reduce using rule 125 (operadorArit -> PRODUCTO .)
    FLOTANTE        reduce using rule 125 (operadorArit -> PRODUCTO .)


state 50

    (126) operadorArit -> DIVISION .

    ENTERO          reduce using rule 126 (operadorArit -> DIVISION .)
    FLOTANTE        reduce using rule 126 (operadorArit -> DIVISION .)


state 51

    (127) operadorArit -> MODULO .

    ENTERO          reduce using rule 127 (operadorArit -> MODULO .)
    FLOTANTE        reduce using rule 127 (operadorArit -> MODULO .)


state 52

    (121) expresionFloat -> expresionFloat operadorArit . FLOTANTE

    FLOTANTE        shift and go to state 119


state 53

    (28) asignacion -> derefer IGUAL . valor
    (32) valor -> . booleano
    (33) valor -> . expresion
    (34) valor -> . CADENA
    (35) valor -> . VARIABLE
    (36) valor -> . mapa
    (37) valor -> . refer
    (29) booleano -> . condicion
    (30) booleano -> . TRUE
    (31) booleano -> . FALSE
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (83) refer -> . AMPERSAND VARIABLE
    (182) condicion -> . AND
    (183) condicion -> . OR
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    CADENA          shift and go to state 94
    VARIABLE        shift and go to state 88
    TRUE            shift and go to state 99
    FALSE           shift and go to state 100
    MAP             shift and go to state 28
    AMPERSAND       shift and go to state 101
    AND             shift and go to state 102
    OR              shift and go to state 103
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    PARLEFT         shift and go to state 27

    valor                          shift and go to state 120
    booleano                       shift and go to state 92
    expresion                      shift and go to state 93
    mapa                           shift and go to state 95
    refer                          shift and go to state 96
    condicion                      shift and go to state 98
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 73

state 54

    (173) condiciones -> factor MAYORQUE . factor
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 61
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 67
    FLOTANTE        shift and go to state 68
    PARLEFT         shift and go to state 27

    factor                         shift and go to state 121
    numericos                      shift and go to state 66

state 55

    (174) condiciones -> factor MENORQUE . factor
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 61
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 67
    FLOTANTE        shift and go to state 68
    PARLEFT         shift and go to state 27

    factor                         shift and go to state 122
    numericos                      shift and go to state 66

state 56

    (175) condiciones -> factor DIFERENTE . factor
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 61
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 67
    FLOTANTE        shift and go to state 68
    PARLEFT         shift and go to state 27

    factor                         shift and go to state 123
    numericos                      shift and go to state 66

state 57

    (176) condiciones -> factor ESIGUAL . factor
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 61
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 67
    FLOTANTE        shift and go to state 68
    PARLEFT         shift and go to state 27

    factor                         shift and go to state 124
    numericos                      shift and go to state 66

state 58

    (177) condiciones -> factor MENORIGUAL . factor
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 61
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 67
    FLOTANTE        shift and go to state 68
    PARLEFT         shift and go to state 27

    factor                         shift and go to state 125
    numericos                      shift and go to state 66

state 59

    (178) condiciones -> factor MAYORIGUAL . factor
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 61
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 67
    FLOTANTE        shift and go to state 68
    PARLEFT         shift and go to state 27

    factor                         shift and go to state 126
    numericos                      shift and go to state 66

state 60

    (41) sentenciaIf -> IF comparaciones . LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> IF comparaciones . LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> IF comparaciones . LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> IF comparaciones . LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> IF comparaciones . LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> IF comparaciones . LLAVELEFT RETURN VARIABLE LLAVERIGHT else

    LLAVELEFT       shift and go to state 127


state 61

    (131) factor -> VARIABLE .

    MAYORQUE        reduce using rule 131 (factor -> VARIABLE .)
    MENORQUE        reduce using rule 131 (factor -> VARIABLE .)
    DIFERENTE       reduce using rule 131 (factor -> VARIABLE .)
    ESIGUAL         reduce using rule 131 (factor -> VARIABLE .)
    MENORIGUAL      reduce using rule 131 (factor -> VARIABLE .)
    MAYORIGUAL      reduce using rule 131 (factor -> VARIABLE .)
    $end            reduce using rule 131 (factor -> VARIABLE .)
    AND             reduce using rule 131 (factor -> VARIABLE .)
    OR              reduce using rule 131 (factor -> VARIABLE .)
    LLAVELEFT       reduce using rule 131 (factor -> VARIABLE .)
    PARRIGHT        reduce using rule 131 (factor -> VARIABLE .)
    RETURN          reduce using rule 131 (factor -> VARIABLE .)
    LLAVERIGHT      reduce using rule 131 (factor -> VARIABLE .)
    PACKAGE         reduce using rule 131 (factor -> VARIABLE .)
    VAR             reduce using rule 131 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 131 (factor -> VARIABLE .)
    IF              reduce using rule 131 (factor -> VARIABLE .)
    FOR             reduce using rule 131 (factor -> VARIABLE .)
    IMPRIMIR        reduce using rule 131 (factor -> VARIABLE .)
    MAP             reduce using rule 131 (factor -> VARIABLE .)
    PRODUCTO        reduce using rule 131 (factor -> VARIABLE .)
    SCAN            reduce using rule 131 (factor -> VARIABLE .)
    SWITCH          reduce using rule 131 (factor -> VARIABLE .)
    ENTERO          reduce using rule 131 (factor -> VARIABLE .)
    FLOTANTE        reduce using rule 131 (factor -> VARIABLE .)
    BOOL            reduce using rule 131 (factor -> VARIABLE .)
    FUNC            reduce using rule 131 (factor -> VARIABLE .)
    PARLEFT         reduce using rule 131 (factor -> VARIABLE .)
    PUNTOCOMA       reduce using rule 131 (factor -> VARIABLE .)
    BREAK           reduce using rule 131 (factor -> VARIABLE .)
    CONTINUE        reduce using rule 131 (factor -> VARIABLE .)


state 62

    (179) comparaciones -> comparacion .
    (180) comparaciones -> comparacion . anado comparaciones
    (181) anado -> . condicion
    (182) condicion -> . AND
    (183) condicion -> . OR

    LLAVELEFT       reduce using rule 179 (comparaciones -> comparacion .)
    AND             shift and go to state 102
    OR              shift and go to state 103

    anado                          shift and go to state 128
    condicion                      shift and go to state 129

state 63

    (146) comparacion -> condiciones .

    AND             reduce using rule 146 (comparacion -> condiciones .)
    OR              reduce using rule 146 (comparacion -> condiciones .)
    LLAVELEFT       reduce using rule 146 (comparacion -> condiciones .)


state 64

    (147) comparacion -> NEGACION . PARLEFT condiciones PARRIGHT

    PARLEFT         shift and go to state 130


state 65

    (148) comparacion -> PARLEFT . condiciones PARRIGHT
    (134) numericos -> PARLEFT . expresion PARRIGHT
    (173) condiciones -> . factor MAYORQUE factor
    (174) condiciones -> . factor MENORQUE factor
    (175) condiciones -> . factor DIFERENTE factor
    (176) condiciones -> . factor ESIGUAL factor
    (177) condiciones -> . factor MENORIGUAL factor
    (178) condiciones -> . factor MAYORIGUAL factor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 61
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    PARLEFT         shift and go to state 27

    condiciones                    shift and go to state 131
    expresion                      shift and go to state 72
    factor                         shift and go to state 23
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 132

state 66

    (130) factor -> numericos .

    MAYORQUE        reduce using rule 130 (factor -> numericos .)
    MENORQUE        reduce using rule 130 (factor -> numericos .)
    DIFERENTE       reduce using rule 130 (factor -> numericos .)
    ESIGUAL         reduce using rule 130 (factor -> numericos .)
    MENORIGUAL      reduce using rule 130 (factor -> numericos .)
    MAYORIGUAL      reduce using rule 130 (factor -> numericos .)
    $end            reduce using rule 130 (factor -> numericos .)
    AND             reduce using rule 130 (factor -> numericos .)
    OR              reduce using rule 130 (factor -> numericos .)
    LLAVELEFT       reduce using rule 130 (factor -> numericos .)
    PARRIGHT        reduce using rule 130 (factor -> numericos .)
    RETURN          reduce using rule 130 (factor -> numericos .)
    LLAVERIGHT      reduce using rule 130 (factor -> numericos .)
    PACKAGE         reduce using rule 130 (factor -> numericos .)
    VAR             reduce using rule 130 (factor -> numericos .)
    VARIABLE        reduce using rule 130 (factor -> numericos .)
    IF              reduce using rule 130 (factor -> numericos .)
    FOR             reduce using rule 130 (factor -> numericos .)
    IMPRIMIR        reduce using rule 130 (factor -> numericos .)
    MAP             reduce using rule 130 (factor -> numericos .)
    PRODUCTO        reduce using rule 130 (factor -> numericos .)
    SCAN            reduce using rule 130 (factor -> numericos .)
    SWITCH          reduce using rule 130 (factor -> numericos .)
    ENTERO          reduce using rule 130 (factor -> numericos .)
    FLOTANTE        reduce using rule 130 (factor -> numericos .)
    BOOL            reduce using rule 130 (factor -> numericos .)
    FUNC            reduce using rule 130 (factor -> numericos .)
    PARLEFT         reduce using rule 130 (factor -> numericos .)
    PUNTOCOMA       reduce using rule 130 (factor -> numericos .)
    BREAK           reduce using rule 130 (factor -> numericos .)
    CONTINUE        reduce using rule 130 (factor -> numericos .)


state 67

    (132) numericos -> ENTERO .

    MAYORQUE        reduce using rule 132 (numericos -> ENTERO .)
    MENORQUE        reduce using rule 132 (numericos -> ENTERO .)
    DIFERENTE       reduce using rule 132 (numericos -> ENTERO .)
    ESIGUAL         reduce using rule 132 (numericos -> ENTERO .)
    MENORIGUAL      reduce using rule 132 (numericos -> ENTERO .)
    MAYORIGUAL      reduce using rule 132 (numericos -> ENTERO .)
    $end            reduce using rule 132 (numericos -> ENTERO .)
    AND             reduce using rule 132 (numericos -> ENTERO .)
    OR              reduce using rule 132 (numericos -> ENTERO .)
    LLAVELEFT       reduce using rule 132 (numericos -> ENTERO .)
    PARRIGHT        reduce using rule 132 (numericos -> ENTERO .)
    RETURN          reduce using rule 132 (numericos -> ENTERO .)
    LLAVERIGHT      reduce using rule 132 (numericos -> ENTERO .)
    PACKAGE         reduce using rule 132 (numericos -> ENTERO .)
    VAR             reduce using rule 132 (numericos -> ENTERO .)
    VARIABLE        reduce using rule 132 (numericos -> ENTERO .)
    IF              reduce using rule 132 (numericos -> ENTERO .)
    FOR             reduce using rule 132 (numericos -> ENTERO .)
    IMPRIMIR        reduce using rule 132 (numericos -> ENTERO .)
    MAP             reduce using rule 132 (numericos -> ENTERO .)
    PRODUCTO        reduce using rule 132 (numericos -> ENTERO .)
    SCAN            reduce using rule 132 (numericos -> ENTERO .)
    SWITCH          reduce using rule 132 (numericos -> ENTERO .)
    ENTERO          reduce using rule 132 (numericos -> ENTERO .)
    FLOTANTE        reduce using rule 132 (numericos -> ENTERO .)
    BOOL            reduce using rule 132 (numericos -> ENTERO .)
    FUNC            reduce using rule 132 (numericos -> ENTERO .)
    PARLEFT         reduce using rule 132 (numericos -> ENTERO .)
    PUNTOCOMA       reduce using rule 132 (numericos -> ENTERO .)
    BREAK           reduce using rule 132 (numericos -> ENTERO .)
    CONTINUE        reduce using rule 132 (numericos -> ENTERO .)


state 68

    (133) numericos -> FLOTANTE .

    MAYORQUE        reduce using rule 133 (numericos -> FLOTANTE .)
    MENORQUE        reduce using rule 133 (numericos -> FLOTANTE .)
    DIFERENTE       reduce using rule 133 (numericos -> FLOTANTE .)
    ESIGUAL         reduce using rule 133 (numericos -> FLOTANTE .)
    MENORIGUAL      reduce using rule 133 (numericos -> FLOTANTE .)
    MAYORIGUAL      reduce using rule 133 (numericos -> FLOTANTE .)
    $end            reduce using rule 133 (numericos -> FLOTANTE .)
    AND             reduce using rule 133 (numericos -> FLOTANTE .)
    OR              reduce using rule 133 (numericos -> FLOTANTE .)
    LLAVELEFT       reduce using rule 133 (numericos -> FLOTANTE .)
    PARRIGHT        reduce using rule 133 (numericos -> FLOTANTE .)
    RETURN          reduce using rule 133 (numericos -> FLOTANTE .)
    LLAVERIGHT      reduce using rule 133 (numericos -> FLOTANTE .)
    PACKAGE         reduce using rule 133 (numericos -> FLOTANTE .)
    VAR             reduce using rule 133 (numericos -> FLOTANTE .)
    VARIABLE        reduce using rule 133 (numericos -> FLOTANTE .)
    IF              reduce using rule 133 (numericos -> FLOTANTE .)
    FOR             reduce using rule 133 (numericos -> FLOTANTE .)
    IMPRIMIR        reduce using rule 133 (numericos -> FLOTANTE .)
    MAP             reduce using rule 133 (numericos -> FLOTANTE .)
    PRODUCTO        reduce using rule 133 (numericos -> FLOTANTE .)
    SCAN            reduce using rule 133 (numericos -> FLOTANTE .)
    SWITCH          reduce using rule 133 (numericos -> FLOTANTE .)
    ENTERO          reduce using rule 133 (numericos -> FLOTANTE .)
    FLOTANTE        reduce using rule 133 (numericos -> FLOTANTE .)
    BOOL            reduce using rule 133 (numericos -> FLOTANTE .)
    FUNC            reduce using rule 133 (numericos -> FLOTANTE .)
    PARLEFT         reduce using rule 133 (numericos -> FLOTANTE .)
    PUNTOCOMA       reduce using rule 133 (numericos -> FLOTANTE .)
    BREAK           reduce using rule 133 (numericos -> FLOTANTE .)
    CONTINUE        reduce using rule 133 (numericos -> FLOTANTE .)


state 69

    (85) sentenciaFor -> FOR inicio . PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT

    PUNTOCOMA       shift and go to state 133


state 70

    (86) inicio -> VARIABLE . DECLARADOR ENTERO

    DECLARADOR      shift and go to state 134


state 71

    (106) print -> IMPRIMIR PARLEFT . contPrint PARRIGHT
    (107) contPrint -> . contenido masCont
    (108) contPrint -> . contenido
    (111) contenido -> . CADENA
    (112) contenido -> . VARIABLE
    (113) contenido -> . method
    (114) contenido -> .
    (102) method -> . methodArray
    (103) methodArray -> . namemetodoArr PARLEFT VARIABLE PARRIGHT
    (104) namemetodoArr -> . LEN
    (105) namemetodoArr -> . CAP

    CADENA          shift and go to state 137
    VARIABLE        shift and go to state 138
    COMA            reduce using rule 114 (contenido -> .)
    PARRIGHT        reduce using rule 114 (contenido -> .)
    LEN             shift and go to state 142
    CAP             shift and go to state 143

    contPrint                      shift and go to state 135
    contenido                      shift and go to state 136
    method                         shift and go to state 139
    methodArray                    shift and go to state 140
    namemetodoArr                  shift and go to state 141

state 72

    (134) numericos -> PARLEFT expresion . PARRIGHT

    PARRIGHT        shift and go to state 144


state 73

    (129) term -> numericos .

    PARRIGHT        reduce using rule 129 (term -> numericos .)
    $end            reduce using rule 129 (term -> numericos .)
    RETURN          reduce using rule 129 (term -> numericos .)
    LLAVERIGHT      reduce using rule 129 (term -> numericos .)
    PACKAGE         reduce using rule 129 (term -> numericos .)
    VAR             reduce using rule 129 (term -> numericos .)
    VARIABLE        reduce using rule 129 (term -> numericos .)
    IF              reduce using rule 129 (term -> numericos .)
    FOR             reduce using rule 129 (term -> numericos .)
    IMPRIMIR        reduce using rule 129 (term -> numericos .)
    MAP             reduce using rule 129 (term -> numericos .)
    PRODUCTO        reduce using rule 129 (term -> numericos .)
    SCAN            reduce using rule 129 (term -> numericos .)
    SWITCH          reduce using rule 129 (term -> numericos .)
    ENTERO          reduce using rule 129 (term -> numericos .)
    FLOTANTE        reduce using rule 129 (term -> numericos .)
    BOOL            reduce using rule 129 (term -> numericos .)
    FUNC            reduce using rule 129 (term -> numericos .)
    PARLEFT         reduce using rule 129 (term -> numericos .)
    BREAK           reduce using rule 129 (term -> numericos .)
    CONTINUE        reduce using rule 129 (term -> numericos .)
    COMA            reduce using rule 129 (term -> numericos .)


state 74

    (51) mapa -> MAP CORCHLEFT . STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> MAP CORCHLEFT . STRING CORCHRIGHT contMapa

    STRING          shift and go to state 145


state 75

    (82) puntero -> PRODUCTO typeData .

    $end            reduce using rule 82 (puntero -> PRODUCTO typeData .)
    IGUAL           reduce using rule 82 (puntero -> PRODUCTO typeData .)
    RETURN          reduce using rule 82 (puntero -> PRODUCTO typeData .)
    LLAVERIGHT      reduce using rule 82 (puntero -> PRODUCTO typeData .)
    PACKAGE         reduce using rule 82 (puntero -> PRODUCTO typeData .)
    VAR             reduce using rule 82 (puntero -> PRODUCTO typeData .)
    VARIABLE        reduce using rule 82 (puntero -> PRODUCTO typeData .)
    IF              reduce using rule 82 (puntero -> PRODUCTO typeData .)
    FOR             reduce using rule 82 (puntero -> PRODUCTO typeData .)
    IMPRIMIR        reduce using rule 82 (puntero -> PRODUCTO typeData .)
    MAP             reduce using rule 82 (puntero -> PRODUCTO typeData .)
    PRODUCTO        reduce using rule 82 (puntero -> PRODUCTO typeData .)
    SCAN            reduce using rule 82 (puntero -> PRODUCTO typeData .)
    SWITCH          reduce using rule 82 (puntero -> PRODUCTO typeData .)
    ENTERO          reduce using rule 82 (puntero -> PRODUCTO typeData .)
    FLOTANTE        reduce using rule 82 (puntero -> PRODUCTO typeData .)
    BOOL            reduce using rule 82 (puntero -> PRODUCTO typeData .)
    FUNC            reduce using rule 82 (puntero -> PRODUCTO typeData .)
    PARLEFT         reduce using rule 82 (puntero -> PRODUCTO typeData .)
    BREAK           reduce using rule 82 (puntero -> PRODUCTO typeData .)
    CONTINUE        reduce using rule 82 (puntero -> PRODUCTO typeData .)


state 76

    (84) derefer -> PRODUCTO VARIABLE .

    IGUAL           reduce using rule 84 (derefer -> PRODUCTO VARIABLE .)


state 77

    (88) typeData -> BOOL .

    $end            reduce using rule 88 (typeData -> BOOL .)
    RETURN          reduce using rule 88 (typeData -> BOOL .)
    LLAVERIGHT      reduce using rule 88 (typeData -> BOOL .)
    PACKAGE         reduce using rule 88 (typeData -> BOOL .)
    VAR             reduce using rule 88 (typeData -> BOOL .)
    VARIABLE        reduce using rule 88 (typeData -> BOOL .)
    IF              reduce using rule 88 (typeData -> BOOL .)
    FOR             reduce using rule 88 (typeData -> BOOL .)
    IMPRIMIR        reduce using rule 88 (typeData -> BOOL .)
    MAP             reduce using rule 88 (typeData -> BOOL .)
    PRODUCTO        reduce using rule 88 (typeData -> BOOL .)
    SCAN            reduce using rule 88 (typeData -> BOOL .)
    SWITCH          reduce using rule 88 (typeData -> BOOL .)
    ENTERO          reduce using rule 88 (typeData -> BOOL .)
    FLOTANTE        reduce using rule 88 (typeData -> BOOL .)
    BOOL            reduce using rule 88 (typeData -> BOOL .)
    FUNC            reduce using rule 88 (typeData -> BOOL .)
    PARLEFT         reduce using rule 88 (typeData -> BOOL .)
    BREAK           reduce using rule 88 (typeData -> BOOL .)
    CONTINUE        reduce using rule 88 (typeData -> BOOL .)
    IGUAL           reduce using rule 88 (typeData -> BOOL .)
    LLAVELEFT       reduce using rule 88 (typeData -> BOOL .)
    COMA            reduce using rule 88 (typeData -> BOOL .)


state 78

    (89) typeData -> INT .

    $end            reduce using rule 89 (typeData -> INT .)
    RETURN          reduce using rule 89 (typeData -> INT .)
    LLAVERIGHT      reduce using rule 89 (typeData -> INT .)
    PACKAGE         reduce using rule 89 (typeData -> INT .)
    VAR             reduce using rule 89 (typeData -> INT .)
    VARIABLE        reduce using rule 89 (typeData -> INT .)
    IF              reduce using rule 89 (typeData -> INT .)
    FOR             reduce using rule 89 (typeData -> INT .)
    IMPRIMIR        reduce using rule 89 (typeData -> INT .)
    MAP             reduce using rule 89 (typeData -> INT .)
    PRODUCTO        reduce using rule 89 (typeData -> INT .)
    SCAN            reduce using rule 89 (typeData -> INT .)
    SWITCH          reduce using rule 89 (typeData -> INT .)
    ENTERO          reduce using rule 89 (typeData -> INT .)
    FLOTANTE        reduce using rule 89 (typeData -> INT .)
    BOOL            reduce using rule 89 (typeData -> INT .)
    FUNC            reduce using rule 89 (typeData -> INT .)
    PARLEFT         reduce using rule 89 (typeData -> INT .)
    BREAK           reduce using rule 89 (typeData -> INT .)
    CONTINUE        reduce using rule 89 (typeData -> INT .)
    IGUAL           reduce using rule 89 (typeData -> INT .)
    LLAVELEFT       reduce using rule 89 (typeData -> INT .)
    COMA            reduce using rule 89 (typeData -> INT .)


state 79

    (90) typeData -> FLOAT .

    $end            reduce using rule 90 (typeData -> FLOAT .)
    RETURN          reduce using rule 90 (typeData -> FLOAT .)
    LLAVERIGHT      reduce using rule 90 (typeData -> FLOAT .)
    PACKAGE         reduce using rule 90 (typeData -> FLOAT .)
    VAR             reduce using rule 90 (typeData -> FLOAT .)
    VARIABLE        reduce using rule 90 (typeData -> FLOAT .)
    IF              reduce using rule 90 (typeData -> FLOAT .)
    FOR             reduce using rule 90 (typeData -> FLOAT .)
    IMPRIMIR        reduce using rule 90 (typeData -> FLOAT .)
    MAP             reduce using rule 90 (typeData -> FLOAT .)
    PRODUCTO        reduce using rule 90 (typeData -> FLOAT .)
    SCAN            reduce using rule 90 (typeData -> FLOAT .)
    SWITCH          reduce using rule 90 (typeData -> FLOAT .)
    ENTERO          reduce using rule 90 (typeData -> FLOAT .)
    FLOTANTE        reduce using rule 90 (typeData -> FLOAT .)
    BOOL            reduce using rule 90 (typeData -> FLOAT .)
    FUNC            reduce using rule 90 (typeData -> FLOAT .)
    PARLEFT         reduce using rule 90 (typeData -> FLOAT .)
    BREAK           reduce using rule 90 (typeData -> FLOAT .)
    CONTINUE        reduce using rule 90 (typeData -> FLOAT .)
    IGUAL           reduce using rule 90 (typeData -> FLOAT .)
    LLAVELEFT       reduce using rule 90 (typeData -> FLOAT .)
    COMA            reduce using rule 90 (typeData -> FLOAT .)


state 80

    (91) typeData -> STRING .

    $end            reduce using rule 91 (typeData -> STRING .)
    RETURN          reduce using rule 91 (typeData -> STRING .)
    LLAVERIGHT      reduce using rule 91 (typeData -> STRING .)
    PACKAGE         reduce using rule 91 (typeData -> STRING .)
    VAR             reduce using rule 91 (typeData -> STRING .)
    VARIABLE        reduce using rule 91 (typeData -> STRING .)
    IF              reduce using rule 91 (typeData -> STRING .)
    FOR             reduce using rule 91 (typeData -> STRING .)
    IMPRIMIR        reduce using rule 91 (typeData -> STRING .)
    MAP             reduce using rule 91 (typeData -> STRING .)
    PRODUCTO        reduce using rule 91 (typeData -> STRING .)
    SCAN            reduce using rule 91 (typeData -> STRING .)
    SWITCH          reduce using rule 91 (typeData -> STRING .)
    ENTERO          reduce using rule 91 (typeData -> STRING .)
    FLOTANTE        reduce using rule 91 (typeData -> STRING .)
    BOOL            reduce using rule 91 (typeData -> STRING .)
    FUNC            reduce using rule 91 (typeData -> STRING .)
    PARLEFT         reduce using rule 91 (typeData -> STRING .)
    BREAK           reduce using rule 91 (typeData -> STRING .)
    CONTINUE        reduce using rule 91 (typeData -> STRING .)
    IGUAL           reduce using rule 91 (typeData -> STRING .)
    LLAVELEFT       reduce using rule 91 (typeData -> STRING .)
    COMA            reduce using rule 91 (typeData -> STRING .)


state 81

    (115) lectura -> SCAN PARLEFT . contScan PARRIGHT
    (116) contScan -> . AMPERSAND VARIABLE

    AMPERSAND       shift and go to state 147

    contScan                       shift and go to state 146

state 82

    (120) expresionInt -> ENTERO operadorArit . ENTERO

    ENTERO          shift and go to state 148


state 83

    (163) switch -> SWITCH VARIABLE . LLAVELEFT bloque_switch LLAVERIGHT

    LLAVELEFT       shift and go to state 149


state 84

    (136) slices -> declaracion_slices LLAVELEFT . contArrayEnteros LLAVERIGHT
    (137) slices -> declaracion_slices LLAVELEFT . contArrayCadenas LLAVERIGHT
    (96) contArrayEnteros -> . ENTERO COMA ENTERO
    (97) contArrayEnteros -> . contArrayEnteros COMA ENTERO
    (98) contArrayCadenas -> . CADENA COMA CADENA
    (99) contArrayCadenas -> . contArrayCadenas COMA CADENA

    ENTERO          shift and go to state 152
    CADENA          shift and go to state 153

    contArrayEnteros               shift and go to state 150
    contArrayCadenas               shift and go to state 151

state 85

    (122) expresionFloat -> FLOTANTE operadorArit . FLOTANTE

    FLOTANTE        shift and go to state 154


state 86

    (152) funcion_sin_parametro -> FUNC VARIABLE . PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (153) funcion_sin_parametro -> FUNC VARIABLE . PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (154) funcion_sin_parametro -> FUNC VARIABLE . PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (156) funcion_parametro -> FUNC VARIABLE . PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> FUNC VARIABLE . PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> FUNC VARIABLE . PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> FUNC VARIABLE . PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT

    PARLEFT         shift and go to state 155


state 87

    (13) instrucciones -> PACKAGE VARIABLE IMPORT . CADENA funcion

    CADENA          shift and go to state 156


state 88

    (35) valor -> VARIABLE .

    $end            reduce using rule 35 (valor -> VARIABLE .)
    RETURN          reduce using rule 35 (valor -> VARIABLE .)
    LLAVERIGHT      reduce using rule 35 (valor -> VARIABLE .)
    PACKAGE         reduce using rule 35 (valor -> VARIABLE .)
    VAR             reduce using rule 35 (valor -> VARIABLE .)
    VARIABLE        reduce using rule 35 (valor -> VARIABLE .)
    IF              reduce using rule 35 (valor -> VARIABLE .)
    FOR             reduce using rule 35 (valor -> VARIABLE .)
    IMPRIMIR        reduce using rule 35 (valor -> VARIABLE .)
    MAP             reduce using rule 35 (valor -> VARIABLE .)
    PRODUCTO        reduce using rule 35 (valor -> VARIABLE .)
    SCAN            reduce using rule 35 (valor -> VARIABLE .)
    SWITCH          reduce using rule 35 (valor -> VARIABLE .)
    ENTERO          reduce using rule 35 (valor -> VARIABLE .)
    FLOTANTE        reduce using rule 35 (valor -> VARIABLE .)
    BOOL            reduce using rule 35 (valor -> VARIABLE .)
    FUNC            reduce using rule 35 (valor -> VARIABLE .)
    PARLEFT         reduce using rule 35 (valor -> VARIABLE .)
    BREAK           reduce using rule 35 (valor -> VARIABLE .)
    CONTINUE        reduce using rule 35 (valor -> VARIABLE .)


state 89

    (24) asignacion -> VARIABLE DECLARADOR valor .

    $end            reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    RETURN          reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    LLAVERIGHT      reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    PACKAGE         reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    VAR             reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    VARIABLE        reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    IF              reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    FOR             reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    IMPRIMIR        reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    MAP             reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    PRODUCTO        reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    SCAN            reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    SWITCH          reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    ENTERO          reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    FLOTANTE        reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    BOOL            reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    FUNC            reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    PARLEFT         reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    BREAK           reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    CONTINUE        reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)


state 90

    (92) array -> VARIABLE DECLARADOR CORCHLEFT . ENTERO CORCHRIGHT contArray
    (145) declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT . CORCHRIGHT typeData

    ENTERO          shift and go to state 157
    CORCHRIGHT      shift and go to state 158


state 91

    (138) slices -> VARIABLE DECLARADOR metodos_slices . PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT
    (139) slices -> VARIABLE DECLARADOR metodos_slices . PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT

    PARLEFT         shift and go to state 159


state 92

    (32) valor -> booleano .

    $end            reduce using rule 32 (valor -> booleano .)
    RETURN          reduce using rule 32 (valor -> booleano .)
    LLAVERIGHT      reduce using rule 32 (valor -> booleano .)
    PACKAGE         reduce using rule 32 (valor -> booleano .)
    VAR             reduce using rule 32 (valor -> booleano .)
    VARIABLE        reduce using rule 32 (valor -> booleano .)
    IF              reduce using rule 32 (valor -> booleano .)
    FOR             reduce using rule 32 (valor -> booleano .)
    IMPRIMIR        reduce using rule 32 (valor -> booleano .)
    MAP             reduce using rule 32 (valor -> booleano .)
    PRODUCTO        reduce using rule 32 (valor -> booleano .)
    SCAN            reduce using rule 32 (valor -> booleano .)
    SWITCH          reduce using rule 32 (valor -> booleano .)
    ENTERO          reduce using rule 32 (valor -> booleano .)
    FLOTANTE        reduce using rule 32 (valor -> booleano .)
    BOOL            reduce using rule 32 (valor -> booleano .)
    FUNC            reduce using rule 32 (valor -> booleano .)
    PARLEFT         reduce using rule 32 (valor -> booleano .)
    BREAK           reduce using rule 32 (valor -> booleano .)
    CONTINUE        reduce using rule 32 (valor -> booleano .)


state 93

    (33) valor -> expresion .

    $end            reduce using rule 33 (valor -> expresion .)
    RETURN          reduce using rule 33 (valor -> expresion .)
    LLAVERIGHT      reduce using rule 33 (valor -> expresion .)
    PACKAGE         reduce using rule 33 (valor -> expresion .)
    VAR             reduce using rule 33 (valor -> expresion .)
    VARIABLE        reduce using rule 33 (valor -> expresion .)
    IF              reduce using rule 33 (valor -> expresion .)
    FOR             reduce using rule 33 (valor -> expresion .)
    IMPRIMIR        reduce using rule 33 (valor -> expresion .)
    MAP             reduce using rule 33 (valor -> expresion .)
    PRODUCTO        reduce using rule 33 (valor -> expresion .)
    SCAN            reduce using rule 33 (valor -> expresion .)
    SWITCH          reduce using rule 33 (valor -> expresion .)
    ENTERO          reduce using rule 33 (valor -> expresion .)
    FLOTANTE        reduce using rule 33 (valor -> expresion .)
    BOOL            reduce using rule 33 (valor -> expresion .)
    FUNC            reduce using rule 33 (valor -> expresion .)
    PARLEFT         reduce using rule 33 (valor -> expresion .)
    BREAK           reduce using rule 33 (valor -> expresion .)
    CONTINUE        reduce using rule 33 (valor -> expresion .)


state 94

    (34) valor -> CADENA .

    $end            reduce using rule 34 (valor -> CADENA .)
    RETURN          reduce using rule 34 (valor -> CADENA .)
    LLAVERIGHT      reduce using rule 34 (valor -> CADENA .)
    PACKAGE         reduce using rule 34 (valor -> CADENA .)
    VAR             reduce using rule 34 (valor -> CADENA .)
    VARIABLE        reduce using rule 34 (valor -> CADENA .)
    IF              reduce using rule 34 (valor -> CADENA .)
    FOR             reduce using rule 34 (valor -> CADENA .)
    IMPRIMIR        reduce using rule 34 (valor -> CADENA .)
    MAP             reduce using rule 34 (valor -> CADENA .)
    PRODUCTO        reduce using rule 34 (valor -> CADENA .)
    SCAN            reduce using rule 34 (valor -> CADENA .)
    SWITCH          reduce using rule 34 (valor -> CADENA .)
    ENTERO          reduce using rule 34 (valor -> CADENA .)
    FLOTANTE        reduce using rule 34 (valor -> CADENA .)
    BOOL            reduce using rule 34 (valor -> CADENA .)
    FUNC            reduce using rule 34 (valor -> CADENA .)
    PARLEFT         reduce using rule 34 (valor -> CADENA .)
    BREAK           reduce using rule 34 (valor -> CADENA .)
    CONTINUE        reduce using rule 34 (valor -> CADENA .)


state 95

    (36) valor -> mapa .

    $end            reduce using rule 36 (valor -> mapa .)
    RETURN          reduce using rule 36 (valor -> mapa .)
    LLAVERIGHT      reduce using rule 36 (valor -> mapa .)
    PACKAGE         reduce using rule 36 (valor -> mapa .)
    VAR             reduce using rule 36 (valor -> mapa .)
    VARIABLE        reduce using rule 36 (valor -> mapa .)
    IF              reduce using rule 36 (valor -> mapa .)
    FOR             reduce using rule 36 (valor -> mapa .)
    IMPRIMIR        reduce using rule 36 (valor -> mapa .)
    MAP             reduce using rule 36 (valor -> mapa .)
    PRODUCTO        reduce using rule 36 (valor -> mapa .)
    SCAN            reduce using rule 36 (valor -> mapa .)
    SWITCH          reduce using rule 36 (valor -> mapa .)
    ENTERO          reduce using rule 36 (valor -> mapa .)
    FLOTANTE        reduce using rule 36 (valor -> mapa .)
    BOOL            reduce using rule 36 (valor -> mapa .)
    FUNC            reduce using rule 36 (valor -> mapa .)
    PARLEFT         reduce using rule 36 (valor -> mapa .)
    BREAK           reduce using rule 36 (valor -> mapa .)
    CONTINUE        reduce using rule 36 (valor -> mapa .)


state 96

    (37) valor -> refer .

    $end            reduce using rule 37 (valor -> refer .)
    RETURN          reduce using rule 37 (valor -> refer .)
    LLAVERIGHT      reduce using rule 37 (valor -> refer .)
    PACKAGE         reduce using rule 37 (valor -> refer .)
    VAR             reduce using rule 37 (valor -> refer .)
    VARIABLE        reduce using rule 37 (valor -> refer .)
    IF              reduce using rule 37 (valor -> refer .)
    FOR             reduce using rule 37 (valor -> refer .)
    IMPRIMIR        reduce using rule 37 (valor -> refer .)
    MAP             reduce using rule 37 (valor -> refer .)
    PRODUCTO        reduce using rule 37 (valor -> refer .)
    SCAN            reduce using rule 37 (valor -> refer .)
    SWITCH          reduce using rule 37 (valor -> refer .)
    ENTERO          reduce using rule 37 (valor -> refer .)
    FLOTANTE        reduce using rule 37 (valor -> refer .)
    BOOL            reduce using rule 37 (valor -> refer .)
    FUNC            reduce using rule 37 (valor -> refer .)
    PARLEFT         reduce using rule 37 (valor -> refer .)
    BREAK           reduce using rule 37 (valor -> refer .)
    CONTINUE        reduce using rule 37 (valor -> refer .)


state 97

    (140) metodos_slices -> MAKE .

    PARLEFT         reduce using rule 140 (metodos_slices -> MAKE .)


state 98

    (29) booleano -> condicion .

    $end            reduce using rule 29 (booleano -> condicion .)
    RETURN          reduce using rule 29 (booleano -> condicion .)
    LLAVERIGHT      reduce using rule 29 (booleano -> condicion .)
    PACKAGE         reduce using rule 29 (booleano -> condicion .)
    VAR             reduce using rule 29 (booleano -> condicion .)
    VARIABLE        reduce using rule 29 (booleano -> condicion .)
    IF              reduce using rule 29 (booleano -> condicion .)
    FOR             reduce using rule 29 (booleano -> condicion .)
    IMPRIMIR        reduce using rule 29 (booleano -> condicion .)
    MAP             reduce using rule 29 (booleano -> condicion .)
    PRODUCTO        reduce using rule 29 (booleano -> condicion .)
    SCAN            reduce using rule 29 (booleano -> condicion .)
    SWITCH          reduce using rule 29 (booleano -> condicion .)
    ENTERO          reduce using rule 29 (booleano -> condicion .)
    FLOTANTE        reduce using rule 29 (booleano -> condicion .)
    BOOL            reduce using rule 29 (booleano -> condicion .)
    FUNC            reduce using rule 29 (booleano -> condicion .)
    PARLEFT         reduce using rule 29 (booleano -> condicion .)
    BREAK           reduce using rule 29 (booleano -> condicion .)
    CONTINUE        reduce using rule 29 (booleano -> condicion .)


state 99

    (30) booleano -> TRUE .

    $end            reduce using rule 30 (booleano -> TRUE .)
    RETURN          reduce using rule 30 (booleano -> TRUE .)
    LLAVERIGHT      reduce using rule 30 (booleano -> TRUE .)
    PACKAGE         reduce using rule 30 (booleano -> TRUE .)
    VAR             reduce using rule 30 (booleano -> TRUE .)
    VARIABLE        reduce using rule 30 (booleano -> TRUE .)
    IF              reduce using rule 30 (booleano -> TRUE .)
    FOR             reduce using rule 30 (booleano -> TRUE .)
    IMPRIMIR        reduce using rule 30 (booleano -> TRUE .)
    MAP             reduce using rule 30 (booleano -> TRUE .)
    PRODUCTO        reduce using rule 30 (booleano -> TRUE .)
    SCAN            reduce using rule 30 (booleano -> TRUE .)
    SWITCH          reduce using rule 30 (booleano -> TRUE .)
    ENTERO          reduce using rule 30 (booleano -> TRUE .)
    FLOTANTE        reduce using rule 30 (booleano -> TRUE .)
    BOOL            reduce using rule 30 (booleano -> TRUE .)
    FUNC            reduce using rule 30 (booleano -> TRUE .)
    PARLEFT         reduce using rule 30 (booleano -> TRUE .)
    BREAK           reduce using rule 30 (booleano -> TRUE .)
    CONTINUE        reduce using rule 30 (booleano -> TRUE .)


state 100

    (31) booleano -> FALSE .

    $end            reduce using rule 31 (booleano -> FALSE .)
    RETURN          reduce using rule 31 (booleano -> FALSE .)
    LLAVERIGHT      reduce using rule 31 (booleano -> FALSE .)
    PACKAGE         reduce using rule 31 (booleano -> FALSE .)
    VAR             reduce using rule 31 (booleano -> FALSE .)
    VARIABLE        reduce using rule 31 (booleano -> FALSE .)
    IF              reduce using rule 31 (booleano -> FALSE .)
    FOR             reduce using rule 31 (booleano -> FALSE .)
    IMPRIMIR        reduce using rule 31 (booleano -> FALSE .)
    MAP             reduce using rule 31 (booleano -> FALSE .)
    PRODUCTO        reduce using rule 31 (booleano -> FALSE .)
    SCAN            reduce using rule 31 (booleano -> FALSE .)
    SWITCH          reduce using rule 31 (booleano -> FALSE .)
    ENTERO          reduce using rule 31 (booleano -> FALSE .)
    FLOTANTE        reduce using rule 31 (booleano -> FALSE .)
    BOOL            reduce using rule 31 (booleano -> FALSE .)
    FUNC            reduce using rule 31 (booleano -> FALSE .)
    PARLEFT         reduce using rule 31 (booleano -> FALSE .)
    BREAK           reduce using rule 31 (booleano -> FALSE .)
    CONTINUE        reduce using rule 31 (booleano -> FALSE .)


state 101

    (83) refer -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 160


state 102

    (182) condicion -> AND .

    $end            reduce using rule 182 (condicion -> AND .)
    RETURN          reduce using rule 182 (condicion -> AND .)
    LLAVERIGHT      reduce using rule 182 (condicion -> AND .)
    PACKAGE         reduce using rule 182 (condicion -> AND .)
    VAR             reduce using rule 182 (condicion -> AND .)
    VARIABLE        reduce using rule 182 (condicion -> AND .)
    IF              reduce using rule 182 (condicion -> AND .)
    FOR             reduce using rule 182 (condicion -> AND .)
    IMPRIMIR        reduce using rule 182 (condicion -> AND .)
    MAP             reduce using rule 182 (condicion -> AND .)
    PRODUCTO        reduce using rule 182 (condicion -> AND .)
    SCAN            reduce using rule 182 (condicion -> AND .)
    SWITCH          reduce using rule 182 (condicion -> AND .)
    ENTERO          reduce using rule 182 (condicion -> AND .)
    FLOTANTE        reduce using rule 182 (condicion -> AND .)
    BOOL            reduce using rule 182 (condicion -> AND .)
    FUNC            reduce using rule 182 (condicion -> AND .)
    PARLEFT         reduce using rule 182 (condicion -> AND .)
    BREAK           reduce using rule 182 (condicion -> AND .)
    CONTINUE        reduce using rule 182 (condicion -> AND .)
    NEGACION        reduce using rule 182 (condicion -> AND .)
    COMA            reduce using rule 182 (condicion -> AND .)


state 103

    (183) condicion -> OR .

    $end            reduce using rule 183 (condicion -> OR .)
    RETURN          reduce using rule 183 (condicion -> OR .)
    LLAVERIGHT      reduce using rule 183 (condicion -> OR .)
    PACKAGE         reduce using rule 183 (condicion -> OR .)
    VAR             reduce using rule 183 (condicion -> OR .)
    VARIABLE        reduce using rule 183 (condicion -> OR .)
    IF              reduce using rule 183 (condicion -> OR .)
    FOR             reduce using rule 183 (condicion -> OR .)
    IMPRIMIR        reduce using rule 183 (condicion -> OR .)
    MAP             reduce using rule 183 (condicion -> OR .)
    PRODUCTO        reduce using rule 183 (condicion -> OR .)
    SCAN            reduce using rule 183 (condicion -> OR .)
    SWITCH          reduce using rule 183 (condicion -> OR .)
    ENTERO          reduce using rule 183 (condicion -> OR .)
    FLOTANTE        reduce using rule 183 (condicion -> OR .)
    BOOL            reduce using rule 183 (condicion -> OR .)
    FUNC            reduce using rule 183 (condicion -> OR .)
    PARLEFT         reduce using rule 183 (condicion -> OR .)
    BREAK           reduce using rule 183 (condicion -> OR .)
    CONTINUE        reduce using rule 183 (condicion -> OR .)
    NEGACION        reduce using rule 183 (condicion -> OR .)
    COMA            reduce using rule 183 (condicion -> OR .)


state 104

    (25) asignacion -> VARIABLE IGUAL valor .

    $end            reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    RETURN          reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    LLAVERIGHT      reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    PACKAGE         reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    VAR             reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    VARIABLE        reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    IF              reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    FOR             reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    IMPRIMIR        reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    MAP             reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    PRODUCTO        reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    SCAN            reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    SWITCH          reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    ENTERO          reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    FLOTANTE        reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    BOOL            reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    FUNC            reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    PARLEFT         reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    BREAK           reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    CONTINUE        reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)


state 105

    (143) declaracion_slices -> VARIABLE IGUAL CORCHLEFT . ENTERO CORCHRIGHT typeData
    (144) declaracion_slices -> VARIABLE IGUAL CORCHLEFT . CORCHRIGHT typeData

    ENTERO          shift and go to state 161
    CORCHRIGHT      shift and go to state 162


state 106

    (40) acumular -> VARIABLE .

    $end            reduce using rule 40 (acumular -> VARIABLE .)
    RETURN          reduce using rule 40 (acumular -> VARIABLE .)
    LLAVERIGHT      reduce using rule 40 (acumular -> VARIABLE .)
    PACKAGE         reduce using rule 40 (acumular -> VARIABLE .)
    VAR             reduce using rule 40 (acumular -> VARIABLE .)
    VARIABLE        reduce using rule 40 (acumular -> VARIABLE .)
    IF              reduce using rule 40 (acumular -> VARIABLE .)
    FOR             reduce using rule 40 (acumular -> VARIABLE .)
    IMPRIMIR        reduce using rule 40 (acumular -> VARIABLE .)
    MAP             reduce using rule 40 (acumular -> VARIABLE .)
    PRODUCTO        reduce using rule 40 (acumular -> VARIABLE .)
    SCAN            reduce using rule 40 (acumular -> VARIABLE .)
    SWITCH          reduce using rule 40 (acumular -> VARIABLE .)
    ENTERO          reduce using rule 40 (acumular -> VARIABLE .)
    FLOTANTE        reduce using rule 40 (acumular -> VARIABLE .)
    BOOL            reduce using rule 40 (acumular -> VARIABLE .)
    FUNC            reduce using rule 40 (acumular -> VARIABLE .)
    PARLEFT         reduce using rule 40 (acumular -> VARIABLE .)
    BREAK           reduce using rule 40 (acumular -> VARIABLE .)
    CONTINUE        reduce using rule 40 (acumular -> VARIABLE .)


state 107

    (26) asignacion -> VARIABLE MASIGUAL acumular .

    $end            reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    RETURN          reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    LLAVERIGHT      reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    PACKAGE         reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    VAR             reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    VARIABLE        reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    IF              reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    FOR             reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    IMPRIMIR        reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    MAP             reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    PRODUCTO        reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    SCAN            reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    SWITCH          reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    ENTERO          reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    FLOTANTE        reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    BOOL            reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    FUNC            reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    PARLEFT         reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    BREAK           reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    CONTINUE        reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)


state 108

    (38) acumular -> expresion .

    $end            reduce using rule 38 (acumular -> expresion .)
    RETURN          reduce using rule 38 (acumular -> expresion .)
    LLAVERIGHT      reduce using rule 38 (acumular -> expresion .)
    PACKAGE         reduce using rule 38 (acumular -> expresion .)
    VAR             reduce using rule 38 (acumular -> expresion .)
    VARIABLE        reduce using rule 38 (acumular -> expresion .)
    IF              reduce using rule 38 (acumular -> expresion .)
    FOR             reduce using rule 38 (acumular -> expresion .)
    IMPRIMIR        reduce using rule 38 (acumular -> expresion .)
    MAP             reduce using rule 38 (acumular -> expresion .)
    PRODUCTO        reduce using rule 38 (acumular -> expresion .)
    SCAN            reduce using rule 38 (acumular -> expresion .)
    SWITCH          reduce using rule 38 (acumular -> expresion .)
    ENTERO          reduce using rule 38 (acumular -> expresion .)
    FLOTANTE        reduce using rule 38 (acumular -> expresion .)
    BOOL            reduce using rule 38 (acumular -> expresion .)
    FUNC            reduce using rule 38 (acumular -> expresion .)
    PARLEFT         reduce using rule 38 (acumular -> expresion .)
    BREAK           reduce using rule 38 (acumular -> expresion .)
    CONTINUE        reduce using rule 38 (acumular -> expresion .)


state 109

    (39) acumular -> CADENA .

    $end            reduce using rule 39 (acumular -> CADENA .)
    RETURN          reduce using rule 39 (acumular -> CADENA .)
    LLAVERIGHT      reduce using rule 39 (acumular -> CADENA .)
    PACKAGE         reduce using rule 39 (acumular -> CADENA .)
    VAR             reduce using rule 39 (acumular -> CADENA .)
    VARIABLE        reduce using rule 39 (acumular -> CADENA .)
    IF              reduce using rule 39 (acumular -> CADENA .)
    FOR             reduce using rule 39 (acumular -> CADENA .)
    IMPRIMIR        reduce using rule 39 (acumular -> CADENA .)
    MAP             reduce using rule 39 (acumular -> CADENA .)
    PRODUCTO        reduce using rule 39 (acumular -> CADENA .)
    SCAN            reduce using rule 39 (acumular -> CADENA .)
    SWITCH          reduce using rule 39 (acumular -> CADENA .)
    ENTERO          reduce using rule 39 (acumular -> CADENA .)
    FLOTANTE        reduce using rule 39 (acumular -> CADENA .)
    BOOL            reduce using rule 39 (acumular -> CADENA .)
    FUNC            reduce using rule 39 (acumular -> CADENA .)
    PARLEFT         reduce using rule 39 (acumular -> CADENA .)
    BREAK           reduce using rule 39 (acumular -> CADENA .)
    CONTINUE        reduce using rule 39 (acumular -> CADENA .)


state 110

    (27) asignacion -> VARIABLE MENOSIGUAL expresion .

    $end            reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    RETURN          reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    LLAVERIGHT      reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    PACKAGE         reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    VAR             reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    VARIABLE        reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    IF              reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    FOR             reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    IMPRIMIR        reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    MAP             reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    PRODUCTO        reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    SCAN            reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    SWITCH          reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    ENTERO          reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    FLOTANTE        reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    BOOL            reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    FUNC            reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    PARLEFT         reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    BREAK           reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    CONTINUE        reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)


state 111

    (17) asignacion -> VAR VARIABLE BOOL . IGUAL booleano

    IGUAL           shift and go to state 163


state 112

    (141) declaracion_slices -> VAR VARIABLE IGUAL . CORCHLEFT ENTERO CORCHRIGHT typeData
    (142) declaracion_slices -> VAR VARIABLE IGUAL . CORCHLEFT CORCHRIGHT typeData

    CORCHLEFT       shift and go to state 164


state 113

    (18) asignacion -> VAR VARIABLE INT . IGUAL expresionInt

    IGUAL           shift and go to state 165


state 114

    (19) asignacion -> VAR VARIABLE FLOAT . IGUAL expresionFloat

    IGUAL           shift and go to state 166


state 115

    (20) asignacion -> VAR VARIABLE STRING . IGUAL CADENA

    IGUAL           shift and go to state 167


state 116

    (21) asignacion -> VAR VARIABLE puntero . IGUAL refer
    (22) asignacion -> VAR VARIABLE puntero .

    IGUAL           shift and go to state 168
    $end            reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    RETURN          reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    LLAVERIGHT      reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    PACKAGE         reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    VAR             reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    VARIABLE        reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    IF              reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    FOR             reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    IMPRIMIR        reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    MAP             reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    PRODUCTO        reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    SCAN            reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    SWITCH          reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    ENTERO          reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    FLOTANTE        reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    BOOL            reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    FUNC            reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    PARLEFT         reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    BREAK           reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    CONTINUE        reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)


state 117

    (82) puntero -> PRODUCTO . typeData
    (88) typeData -> . BOOL
    (89) typeData -> . INT
    (90) typeData -> . FLOAT
    (91) typeData -> . STRING

    BOOL            shift and go to state 77
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 80

    typeData                       shift and go to state 75

state 118

    (119) expresionInt -> expresionInt operadorArit ENTERO .

    SUMA            reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    RESTA           reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    PRODUCTO        reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    DIVISION        reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    MODULO          reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    $end            reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    PARRIGHT        reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    RETURN          reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    LLAVERIGHT      reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    PACKAGE         reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    VAR             reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    VARIABLE        reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    IF              reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    FOR             reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    IMPRIMIR        reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    MAP             reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    SCAN            reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    SWITCH          reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    ENTERO          reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    FLOTANTE        reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    BOOL            reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    FUNC            reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    PARLEFT         reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    BREAK           reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    CONTINUE        reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    COMA            reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)


state 119

    (121) expresionFloat -> expresionFloat operadorArit FLOTANTE .

    SUMA            reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    RESTA           reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    PRODUCTO        reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    DIVISION        reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    MODULO          reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    $end            reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    PARRIGHT        reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    RETURN          reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    LLAVERIGHT      reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    PACKAGE         reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    VAR             reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    VARIABLE        reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    IF              reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    FOR             reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    IMPRIMIR        reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    MAP             reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    SCAN            reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    SWITCH          reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    ENTERO          reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    FLOTANTE        reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    BOOL            reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    FUNC            reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    PARLEFT         reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    BREAK           reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    CONTINUE        reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    COMA            reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)


state 120

    (28) asignacion -> derefer IGUAL valor .

    $end            reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    RETURN          reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    LLAVERIGHT      reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    PACKAGE         reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    VAR             reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    VARIABLE        reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    IF              reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    FOR             reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    IMPRIMIR        reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    MAP             reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    PRODUCTO        reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    SCAN            reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    SWITCH          reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    ENTERO          reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    FLOTANTE        reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    BOOL            reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    FUNC            reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    PARLEFT         reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    BREAK           reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    CONTINUE        reduce using rule 28 (asignacion -> derefer IGUAL valor .)


state 121

    (173) condiciones -> factor MAYORQUE factor .

    $end            reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    AND             reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    OR              reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    LLAVELEFT       reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    PARRIGHT        reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    RETURN          reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    LLAVERIGHT      reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    PACKAGE         reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    VAR             reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    VARIABLE        reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    IF              reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    FOR             reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    IMPRIMIR        reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    MAP             reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    PRODUCTO        reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    SCAN            reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    SWITCH          reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    ENTERO          reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    FLOTANTE        reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    BOOL            reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    FUNC            reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    PARLEFT         reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    PUNTOCOMA       reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    BREAK           reduce using rule 173 (condiciones -> factor MAYORQUE factor .)
    CONTINUE        reduce using rule 173 (condiciones -> factor MAYORQUE factor .)


state 122

    (174) condiciones -> factor MENORQUE factor .

    $end            reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    AND             reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    OR              reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    LLAVELEFT       reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    PARRIGHT        reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    RETURN          reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    LLAVERIGHT      reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    PACKAGE         reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    VAR             reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    VARIABLE        reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    IF              reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    FOR             reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    IMPRIMIR        reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    MAP             reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    PRODUCTO        reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    SCAN            reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    SWITCH          reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    ENTERO          reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    FLOTANTE        reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    BOOL            reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    FUNC            reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    PARLEFT         reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    PUNTOCOMA       reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    BREAK           reduce using rule 174 (condiciones -> factor MENORQUE factor .)
    CONTINUE        reduce using rule 174 (condiciones -> factor MENORQUE factor .)


state 123

    (175) condiciones -> factor DIFERENTE factor .

    $end            reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    AND             reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    OR              reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    LLAVELEFT       reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    PARRIGHT        reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    RETURN          reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    LLAVERIGHT      reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    PACKAGE         reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    VAR             reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    VARIABLE        reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    IF              reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    FOR             reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    IMPRIMIR        reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    MAP             reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    PRODUCTO        reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    SCAN            reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    SWITCH          reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    ENTERO          reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    FLOTANTE        reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    BOOL            reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    FUNC            reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    PARLEFT         reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    PUNTOCOMA       reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    BREAK           reduce using rule 175 (condiciones -> factor DIFERENTE factor .)
    CONTINUE        reduce using rule 175 (condiciones -> factor DIFERENTE factor .)


state 124

    (176) condiciones -> factor ESIGUAL factor .

    $end            reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    AND             reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    OR              reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    LLAVELEFT       reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    PARRIGHT        reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    RETURN          reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    LLAVERIGHT      reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    PACKAGE         reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    VAR             reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    VARIABLE        reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    IF              reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    FOR             reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    IMPRIMIR        reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    MAP             reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    PRODUCTO        reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    SCAN            reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    SWITCH          reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    ENTERO          reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    FLOTANTE        reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    BOOL            reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    FUNC            reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    PARLEFT         reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    PUNTOCOMA       reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    BREAK           reduce using rule 176 (condiciones -> factor ESIGUAL factor .)
    CONTINUE        reduce using rule 176 (condiciones -> factor ESIGUAL factor .)


state 125

    (177) condiciones -> factor MENORIGUAL factor .

    $end            reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    AND             reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    OR              reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    LLAVELEFT       reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    PARRIGHT        reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    RETURN          reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    LLAVERIGHT      reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    PACKAGE         reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    VAR             reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    VARIABLE        reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    IF              reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    FOR             reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    IMPRIMIR        reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    MAP             reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    PRODUCTO        reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    SCAN            reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    SWITCH          reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    ENTERO          reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    FLOTANTE        reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    BOOL            reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    FUNC            reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    PARLEFT         reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    PUNTOCOMA       reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    BREAK           reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)
    CONTINUE        reduce using rule 177 (condiciones -> factor MENORIGUAL factor .)


state 126

    (178) condiciones -> factor MAYORIGUAL factor .

    $end            reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    AND             reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    OR              reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    LLAVELEFT       reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    PARRIGHT        reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    RETURN          reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    LLAVERIGHT      reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    PACKAGE         reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    VAR             reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    VARIABLE        reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    IF              reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    FOR             reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    IMPRIMIR        reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    MAP             reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    PRODUCTO        reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    SCAN            reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    SWITCH          reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    ENTERO          reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    FLOTANTE        reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    BOOL            reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    FUNC            reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    PARLEFT         reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    PUNTOCOMA       reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    BREAK           reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)
    CONTINUE        reduce using rule 178 (condiciones -> factor MAYORIGUAL factor .)


state 127

    (41) sentenciaIf -> IF comparaciones LLAVELEFT . instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> IF comparaciones LLAVELEFT . instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> IF comparaciones LLAVELEFT . instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> IF comparaciones LLAVELEFT . instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> IF comparaciones LLAVELEFT . RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> IF comparaciones LLAVELEFT . RETURN VARIABLE LLAVERIGHT else
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (173) condiciones -> . factor MAYORQUE factor
    (174) condiciones -> . factor MENORQUE factor
    (175) condiciones -> . factor DIFERENTE factor
    (176) condiciones -> . factor ESIGUAL factor
    (177) condiciones -> . factor MENORIGUAL factor
    (178) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (163) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (149) funcion -> . funcion_sin_parametro
    (150) funcion -> . funcion_parametro
    (151) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices
    (136) slices -> . declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT
    (137) slices -> . declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT
    (138) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT
    (139) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (152) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (153) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (154) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (156) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (141) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (142) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (143) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (144) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (145) declaracion_slices -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    RETURN          shift and go to state 170
    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    BOOL            shift and go to state 17
    FUNC            shift and go to state 39
    PARLEFT         shift and go to state 27

    instrucciones                  shift and go to state 169
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices             shift and go to state 36
    numericos                      shift and go to state 38

state 128

    (180) comparaciones -> comparacion anado . comparaciones
    (179) comparaciones -> . comparacion
    (180) comparaciones -> . comparacion anado comparaciones
    (146) comparacion -> . condiciones
    (147) comparacion -> . NEGACION PARLEFT condiciones PARRIGHT
    (148) comparacion -> . PARLEFT condiciones PARRIGHT
    (173) condiciones -> . factor MAYORQUE factor
    (174) condiciones -> . factor MENORQUE factor
    (175) condiciones -> . factor DIFERENTE factor
    (176) condiciones -> . factor ESIGUAL factor
    (177) condiciones -> . factor MENORIGUAL factor
    (178) condiciones -> . factor MAYORIGUAL factor
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    NEGACION        shift and go to state 64
    PARLEFT         shift and go to state 65
    VARIABLE        shift and go to state 61
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 67
    FLOTANTE        shift and go to state 68

    comparacion                    shift and go to state 62
    comparaciones                  shift and go to state 171
    condiciones                    shift and go to state 63
    factor                         shift and go to state 23
    numericos                      shift and go to state 66

state 129

    (181) anado -> condicion .

    NEGACION        reduce using rule 181 (anado -> condicion .)
    PARLEFT         reduce using rule 181 (anado -> condicion .)
    VARIABLE        reduce using rule 181 (anado -> condicion .)
    BOOL            reduce using rule 181 (anado -> condicion .)
    ENTERO          reduce using rule 181 (anado -> condicion .)
    FLOTANTE        reduce using rule 181 (anado -> condicion .)


state 130

    (147) comparacion -> NEGACION PARLEFT . condiciones PARRIGHT
    (173) condiciones -> . factor MAYORQUE factor
    (174) condiciones -> . factor MENORQUE factor
    (175) condiciones -> . factor DIFERENTE factor
    (176) condiciones -> . factor ESIGUAL factor
    (177) condiciones -> . factor MENORIGUAL factor
    (178) condiciones -> . factor MAYORIGUAL factor
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 61
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 67
    FLOTANTE        shift and go to state 68
    PARLEFT         shift and go to state 27

    condiciones                    shift and go to state 172
    factor                         shift and go to state 23
    numericos                      shift and go to state 66

state 131

    (148) comparacion -> PARLEFT condiciones . PARRIGHT

    PARRIGHT        shift and go to state 173


state 132

    (130) factor -> numericos .
    (129) term -> numericos .

    MAYORQUE        reduce using rule 130 (factor -> numericos .)
    MENORQUE        reduce using rule 130 (factor -> numericos .)
    DIFERENTE       reduce using rule 130 (factor -> numericos .)
    ESIGUAL         reduce using rule 130 (factor -> numericos .)
    MENORIGUAL      reduce using rule 130 (factor -> numericos .)
    MAYORIGUAL      reduce using rule 130 (factor -> numericos .)
    PARRIGHT        reduce using rule 129 (term -> numericos .)


state 133

    (85) sentenciaFor -> FOR inicio PUNTOCOMA . condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (173) condiciones -> . factor MAYORQUE factor
    (174) condiciones -> . factor MENORQUE factor
    (175) condiciones -> . factor DIFERENTE factor
    (176) condiciones -> . factor ESIGUAL factor
    (177) condiciones -> . factor MENORIGUAL factor
    (178) condiciones -> . factor MAYORIGUAL factor
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 61
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 67
    FLOTANTE        shift and go to state 68
    PARLEFT         shift and go to state 27

    condiciones                    shift and go to state 174
    factor                         shift and go to state 23
    numericos                      shift and go to state 66

state 134

    (86) inicio -> VARIABLE DECLARADOR . ENTERO

    ENTERO          shift and go to state 175


state 135

    (106) print -> IMPRIMIR PARLEFT contPrint . PARRIGHT

    PARRIGHT        shift and go to state 176


state 136

    (107) contPrint -> contenido . masCont
    (108) contPrint -> contenido .
    (109) masCont -> . masCont COMA contenido
    (110) masCont -> . COMA contenido

    PARRIGHT        reduce using rule 108 (contPrint -> contenido .)
    COMA            shift and go to state 178

    masCont                        shift and go to state 177

state 137

    (111) contenido -> CADENA .

    COMA            reduce using rule 111 (contenido -> CADENA .)
    PARRIGHT        reduce using rule 111 (contenido -> CADENA .)


state 138

    (112) contenido -> VARIABLE .

    COMA            reduce using rule 112 (contenido -> VARIABLE .)
    PARRIGHT        reduce using rule 112 (contenido -> VARIABLE .)


state 139

    (113) contenido -> method .

    COMA            reduce using rule 113 (contenido -> method .)
    PARRIGHT        reduce using rule 113 (contenido -> method .)


state 140

    (102) method -> methodArray .

    COMA            reduce using rule 102 (method -> methodArray .)
    PARRIGHT        reduce using rule 102 (method -> methodArray .)


state 141

    (103) methodArray -> namemetodoArr . PARLEFT VARIABLE PARRIGHT

    PARLEFT         shift and go to state 179


state 142

    (104) namemetodoArr -> LEN .

    PARLEFT         reduce using rule 104 (namemetodoArr -> LEN .)


state 143

    (105) namemetodoArr -> CAP .

    PARLEFT         reduce using rule 105 (namemetodoArr -> CAP .)


state 144

    (134) numericos -> PARLEFT expresion PARRIGHT .

    $end            reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    MAYORQUE        reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    MENORQUE        reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    DIFERENTE       reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    ESIGUAL         reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    MENORIGUAL      reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    MAYORIGUAL      reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    PARRIGHT        reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    RETURN          reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    LLAVERIGHT      reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    PACKAGE         reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    VAR             reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    VARIABLE        reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    IF              reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    FOR             reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    IMPRIMIR        reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    MAP             reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    PRODUCTO        reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    SCAN            reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    SWITCH          reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    ENTERO          reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    FLOTANTE        reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    BOOL            reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    FUNC            reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    PARLEFT         reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    BREAK           reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    CONTINUE        reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    AND             reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    OR              reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    LLAVELEFT       reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    PUNTOCOMA       reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    COMA            reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)


state 145

    (51) mapa -> MAP CORCHLEFT STRING . CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> MAP CORCHLEFT STRING . CORCHRIGHT contMapa

    CORCHRIGHT      shift and go to state 180


state 146

    (115) lectura -> SCAN PARLEFT contScan . PARRIGHT

    PARRIGHT        shift and go to state 181


state 147

    (116) contScan -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 182


state 148

    (120) expresionInt -> ENTERO operadorArit ENTERO .

    SUMA            reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    RESTA           reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    PRODUCTO        reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    DIVISION        reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    MODULO          reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    $end            reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    PARRIGHT        reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    RETURN          reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    LLAVERIGHT      reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    PACKAGE         reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    VAR             reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    VARIABLE        reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    IF              reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    FOR             reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    IMPRIMIR        reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    MAP             reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    SCAN            reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    SWITCH          reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    ENTERO          reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    FLOTANTE        reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    BOOL            reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    FUNC            reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    PARLEFT         reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    BREAK           reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    CONTINUE        reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    COMA            reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)


state 149

    (163) switch -> SWITCH VARIABLE LLAVELEFT . bloque_switch LLAVERIGHT
    (164) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK
    (165) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones CONTINUE
    (166) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK bloque_switch
    (167) bloque_switch -> . switch_default
    (171) switch_default -> . DEFAULT DOSPUNTOS instrucciones masInstrucciones BREAK
    (172) switch_default -> . DEFAULT DOSPUNTOS instrucciones masInstrucciones CONTINUE

    CASE            shift and go to state 184
    DEFAULT         shift and go to state 186

    bloque_switch                  shift and go to state 183
    switch_default                 shift and go to state 185

state 150

    (136) slices -> declaracion_slices LLAVELEFT contArrayEnteros . LLAVERIGHT
    (97) contArrayEnteros -> contArrayEnteros . COMA ENTERO

    LLAVERIGHT      shift and go to state 187
    COMA            shift and go to state 188


state 151

    (137) slices -> declaracion_slices LLAVELEFT contArrayCadenas . LLAVERIGHT
    (99) contArrayCadenas -> contArrayCadenas . COMA CADENA

    LLAVERIGHT      shift and go to state 189
    COMA            shift and go to state 190


state 152

    (96) contArrayEnteros -> ENTERO . COMA ENTERO

    COMA            shift and go to state 191


state 153

    (98) contArrayCadenas -> CADENA . COMA CADENA

    COMA            shift and go to state 192


state 154

    (122) expresionFloat -> FLOTANTE operadorArit FLOTANTE .

    SUMA            reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    RESTA           reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    PRODUCTO        reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    DIVISION        reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    MODULO          reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    $end            reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    PARRIGHT        reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    RETURN          reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    LLAVERIGHT      reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    PACKAGE         reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    VAR             reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    VARIABLE        reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    IF              reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    FOR             reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    IMPRIMIR        reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    MAP             reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    SCAN            reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    SWITCH          reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    ENTERO          reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    FLOTANTE        reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    BOOL            reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    FUNC            reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    PARLEFT         reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    BREAK           reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    CONTINUE        reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    COMA            reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)


state 155

    (152) funcion_sin_parametro -> FUNC VARIABLE PARLEFT . PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (153) funcion_sin_parametro -> FUNC VARIABLE PARLEFT . PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (154) funcion_sin_parametro -> FUNC VARIABLE PARLEFT . PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (156) funcion_parametro -> FUNC VARIABLE PARLEFT . parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> FUNC VARIABLE PARLEFT . parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> FUNC VARIABLE PARLEFT . parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT . PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (159) parametros -> . VARIABLE
    (160) parametros -> . VARIABLE COMA parametros
    (161) parametros -> . typeData VARIABLE
    (162) parametros -> . typeData VARIABLE COMA parametros
    (88) typeData -> . BOOL
    (89) typeData -> . INT
    (90) typeData -> . FLOAT
    (91) typeData -> . STRING

    PARRIGHT        shift and go to state 194
    VARIABLE        shift and go to state 193
    BOOL            shift and go to state 77
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 80

    parametros                     shift and go to state 195
    typeData                       shift and go to state 196

state 156

    (13) instrucciones -> PACKAGE VARIABLE IMPORT CADENA . funcion
    (149) funcion -> . funcion_sin_parametro
    (150) funcion -> . funcion_parametro
    (151) funcion -> . funcion_sin_parametro_return
    (152) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (153) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (154) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (156) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT

    FUNC            shift and go to state 39

    funcion                        shift and go to state 197
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35

state 157

    (92) array -> VARIABLE DECLARADOR CORCHLEFT ENTERO . CORCHRIGHT contArray

    CORCHRIGHT      shift and go to state 198


state 158

    (145) declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT . typeData
    (88) typeData -> . BOOL
    (89) typeData -> . INT
    (90) typeData -> . FLOAT
    (91) typeData -> . STRING

    BOOL            shift and go to state 77
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 80

    typeData                       shift and go to state 199

state 159

    (138) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT . CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT
    (139) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT . CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT

    CORCHLEFT       shift and go to state 200


state 160

    (83) refer -> AMPERSAND VARIABLE .

    $end            reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    RETURN          reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    LLAVERIGHT      reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    PACKAGE         reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    VAR             reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    VARIABLE        reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    IF              reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    FOR             reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    IMPRIMIR        reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    MAP             reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    PRODUCTO        reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    SCAN            reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    SWITCH          reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    ENTERO          reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    FLOTANTE        reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    BOOL            reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    FUNC            reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    PARLEFT         reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    BREAK           reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    CONTINUE        reduce using rule 83 (refer -> AMPERSAND VARIABLE .)


state 161

    (143) declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO . CORCHRIGHT typeData

    CORCHRIGHT      shift and go to state 201


state 162

    (144) declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT . typeData
    (88) typeData -> . BOOL
    (89) typeData -> . INT
    (90) typeData -> . FLOAT
    (91) typeData -> . STRING

    BOOL            shift and go to state 77
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 80

    typeData                       shift and go to state 202

state 163

    (17) asignacion -> VAR VARIABLE BOOL IGUAL . booleano
    (29) booleano -> . condicion
    (30) booleano -> . TRUE
    (31) booleano -> . FALSE
    (182) condicion -> . AND
    (183) condicion -> . OR

    TRUE            shift and go to state 99
    FALSE           shift and go to state 100
    AND             shift and go to state 102
    OR              shift and go to state 103

    booleano                       shift and go to state 203
    condicion                      shift and go to state 98

state 164

    (141) declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT . ENTERO CORCHRIGHT typeData
    (142) declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT . CORCHRIGHT typeData

    ENTERO          shift and go to state 204
    CORCHRIGHT      shift and go to state 205


state 165

    (18) asignacion -> VAR VARIABLE INT IGUAL . expresionInt
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO

    ENTERO          shift and go to state 207

    expresionInt                   shift and go to state 206

state 166

    (19) asignacion -> VAR VARIABLE FLOAT IGUAL . expresionFloat
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE

    FLOTANTE        shift and go to state 209

    expresionFloat                 shift and go to state 208

state 167

    (20) asignacion -> VAR VARIABLE STRING IGUAL . CADENA

    CADENA          shift and go to state 210


state 168

    (21) asignacion -> VAR VARIABLE puntero IGUAL . refer
    (83) refer -> . AMPERSAND VARIABLE

    AMPERSAND       shift and go to state 101

    refer                          shift and go to state 211

state 169

    (41) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones . masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones . masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones . masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones . masInstrucciones LLAVERIGHT else
    (14) masInstrucciones -> . masInstrucciones instrucciones
    (15) masInstrucciones -> . masInstrucciones
    (16) masInstrucciones -> .

    RETURN          reduce using rule 16 (masInstrucciones -> .)
    LLAVERIGHT      reduce using rule 16 (masInstrucciones -> .)
    PACKAGE         reduce using rule 16 (masInstrucciones -> .)
    VAR             reduce using rule 16 (masInstrucciones -> .)
    VARIABLE        reduce using rule 16 (masInstrucciones -> .)
    IF              reduce using rule 16 (masInstrucciones -> .)
    FOR             reduce using rule 16 (masInstrucciones -> .)
    IMPRIMIR        reduce using rule 16 (masInstrucciones -> .)
    MAP             reduce using rule 16 (masInstrucciones -> .)
    PRODUCTO        reduce using rule 16 (masInstrucciones -> .)
    SCAN            reduce using rule 16 (masInstrucciones -> .)
    SWITCH          reduce using rule 16 (masInstrucciones -> .)
    ENTERO          reduce using rule 16 (masInstrucciones -> .)
    FLOTANTE        reduce using rule 16 (masInstrucciones -> .)
    BOOL            reduce using rule 16 (masInstrucciones -> .)
    FUNC            reduce using rule 16 (masInstrucciones -> .)
    PARLEFT         reduce using rule 16 (masInstrucciones -> .)

    masInstrucciones               shift and go to state 212

state 170

    (45) sentenciaIf -> IF comparaciones LLAVELEFT RETURN . VARIABLE LLAVERIGHT
    (46) sentenciaIf -> IF comparaciones LLAVELEFT RETURN . VARIABLE LLAVERIGHT else

    VARIABLE        shift and go to state 213


state 171

    (180) comparaciones -> comparacion anado comparaciones .

    LLAVELEFT       reduce using rule 180 (comparaciones -> comparacion anado comparaciones .)


state 172

    (147) comparacion -> NEGACION PARLEFT condiciones . PARRIGHT

    PARRIGHT        shift and go to state 214


state 173

    (148) comparacion -> PARLEFT condiciones PARRIGHT .

    AND             reduce using rule 148 (comparacion -> PARLEFT condiciones PARRIGHT .)
    OR              reduce using rule 148 (comparacion -> PARLEFT condiciones PARRIGHT .)
    LLAVELEFT       reduce using rule 148 (comparacion -> PARLEFT condiciones PARRIGHT .)


state 174

    (85) sentenciaFor -> FOR inicio PUNTOCOMA condiciones . PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT

    PUNTOCOMA       shift and go to state 215


state 175

    (86) inicio -> VARIABLE DECLARADOR ENTERO .

    PUNTOCOMA       reduce using rule 86 (inicio -> VARIABLE DECLARADOR ENTERO .)


state 176

    (106) print -> IMPRIMIR PARLEFT contPrint PARRIGHT .

    $end            reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    RETURN          reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    LLAVERIGHT      reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    PACKAGE         reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    VAR             reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    VARIABLE        reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    IF              reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    FOR             reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    IMPRIMIR        reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    MAP             reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    PRODUCTO        reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    SCAN            reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    SWITCH          reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    ENTERO          reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    FLOTANTE        reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    BOOL            reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    FUNC            reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    PARLEFT         reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    BREAK           reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    CONTINUE        reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)


state 177

    (107) contPrint -> contenido masCont .
    (109) masCont -> masCont . COMA contenido

    PARRIGHT        reduce using rule 107 (contPrint -> contenido masCont .)
    COMA            shift and go to state 216


state 178

    (110) masCont -> COMA . contenido
    (111) contenido -> . CADENA
    (112) contenido -> . VARIABLE
    (113) contenido -> . method
    (114) contenido -> .
    (102) method -> . methodArray
    (103) methodArray -> . namemetodoArr PARLEFT VARIABLE PARRIGHT
    (104) namemetodoArr -> . LEN
    (105) namemetodoArr -> . CAP

    CADENA          shift and go to state 137
    VARIABLE        shift and go to state 138
    COMA            reduce using rule 114 (contenido -> .)
    PARRIGHT        reduce using rule 114 (contenido -> .)
    LEN             shift and go to state 142
    CAP             shift and go to state 143

    contenido                      shift and go to state 217
    method                         shift and go to state 139
    methodArray                    shift and go to state 140
    namemetodoArr                  shift and go to state 141

state 179

    (103) methodArray -> namemetodoArr PARLEFT . VARIABLE PARRIGHT

    VARIABLE        shift and go to state 218


state 180

    (51) mapa -> MAP CORCHLEFT STRING CORCHRIGHT . typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> MAP CORCHLEFT STRING CORCHRIGHT . contMapa
    (88) typeData -> . BOOL
    (89) typeData -> . INT
    (90) typeData -> . FLOAT
    (91) typeData -> . STRING
    (53) contMapa -> . INT LLAVELEFT parEntero LLAVERIGHT
    (54) contMapa -> . STRING LLAVELEFT parCadena LLAVERIGHT
    (55) contMapa -> . FLOAT LLAVELEFT parFlotante LLAVERIGHT
    (56) contMapa -> . BOOL LLAVELEFT parBoolean LLAVERIGHT

    BOOL            shift and go to state 222
    INT             shift and go to state 223
    FLOAT           shift and go to state 224
    STRING          shift and go to state 219

    typeData                       shift and go to state 220
    contMapa                       shift and go to state 221

state 181

    (115) lectura -> SCAN PARLEFT contScan PARRIGHT .

    $end            reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    RETURN          reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    LLAVERIGHT      reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    PACKAGE         reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    VAR             reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    VARIABLE        reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    IF              reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    FOR             reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    IMPRIMIR        reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    MAP             reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    PRODUCTO        reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    SCAN            reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    SWITCH          reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    ENTERO          reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    FLOTANTE        reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    BOOL            reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    FUNC            reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    PARLEFT         reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    BREAK           reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    CONTINUE        reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)


state 182

    (116) contScan -> AMPERSAND VARIABLE .

    PARRIGHT        reduce using rule 116 (contScan -> AMPERSAND VARIABLE .)


state 183

    (163) switch -> SWITCH VARIABLE LLAVELEFT bloque_switch . LLAVERIGHT

    LLAVERIGHT      shift and go to state 225


state 184

    (164) bloque_switch -> CASE . caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK
    (165) bloque_switch -> CASE . caso_switch DOSPUNTOS instrucciones masInstrucciones CONTINUE
    (166) bloque_switch -> CASE . caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK bloque_switch
    (168) caso_switch -> . VARIABLE
    (169) caso_switch -> . CADENA
    (170) caso_switch -> . ENTERO

    VARIABLE        shift and go to state 227
    CADENA          shift and go to state 228
    ENTERO          shift and go to state 229

    caso_switch                    shift and go to state 226

state 185

    (167) bloque_switch -> switch_default .

    LLAVERIGHT      reduce using rule 167 (bloque_switch -> switch_default .)


state 186

    (171) switch_default -> DEFAULT . DOSPUNTOS instrucciones masInstrucciones BREAK
    (172) switch_default -> DEFAULT . DOSPUNTOS instrucciones masInstrucciones CONTINUE

    DOSPUNTOS       shift and go to state 230


state 187

    (136) slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT .

    $end            reduce using rule 136 (slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT .)
    RETURN          reduce using rule 136 (slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 136 (slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT .)
    PACKAGE         reduce using rule 136 (slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT .)
    VAR             reduce using rule 136 (slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT .)
    VARIABLE        reduce using rule 136 (slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT .)
    IF              reduce using rule 136 (slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT .)
    FOR             reduce using rule 136 (slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT .)
    IMPRIMIR        reduce using rule 136 (slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT .)
    MAP             reduce using rule 136 (slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT .)
    PRODUCTO        reduce using rule 136 (slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT .)
    SCAN            reduce using rule 136 (slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT .)
    SWITCH          reduce using rule 136 (slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT .)
    ENTERO          reduce using rule 136 (slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT .)
    FLOTANTE        reduce using rule 136 (slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT .)
    BOOL            reduce using rule 136 (slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT .)
    FUNC            reduce using rule 136 (slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT .)
    PARLEFT         reduce using rule 136 (slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT .)
    BREAK           reduce using rule 136 (slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT .)
    CONTINUE        reduce using rule 136 (slices -> declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT .)


state 188

    (97) contArrayEnteros -> contArrayEnteros COMA . ENTERO

    ENTERO          shift and go to state 231


state 189

    (137) slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT .

    $end            reduce using rule 137 (slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT .)
    RETURN          reduce using rule 137 (slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 137 (slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT .)
    PACKAGE         reduce using rule 137 (slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT .)
    VAR             reduce using rule 137 (slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT .)
    VARIABLE        reduce using rule 137 (slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT .)
    IF              reduce using rule 137 (slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT .)
    FOR             reduce using rule 137 (slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT .)
    IMPRIMIR        reduce using rule 137 (slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT .)
    MAP             reduce using rule 137 (slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT .)
    PRODUCTO        reduce using rule 137 (slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT .)
    SCAN            reduce using rule 137 (slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT .)
    SWITCH          reduce using rule 137 (slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT .)
    ENTERO          reduce using rule 137 (slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT .)
    FLOTANTE        reduce using rule 137 (slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT .)
    BOOL            reduce using rule 137 (slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT .)
    FUNC            reduce using rule 137 (slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT .)
    PARLEFT         reduce using rule 137 (slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT .)
    BREAK           reduce using rule 137 (slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT .)
    CONTINUE        reduce using rule 137 (slices -> declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT .)


state 190

    (99) contArrayCadenas -> contArrayCadenas COMA . CADENA

    CADENA          shift and go to state 232


state 191

    (96) contArrayEnteros -> ENTERO COMA . ENTERO

    ENTERO          shift and go to state 233


state 192

    (98) contArrayCadenas -> CADENA COMA . CADENA

    CADENA          shift and go to state 234


state 193

    (159) parametros -> VARIABLE .
    (160) parametros -> VARIABLE . COMA parametros

    PARRIGHT        reduce using rule 159 (parametros -> VARIABLE .)
    COMA            shift and go to state 235


state 194

    (152) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT . LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (153) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT . LLAVELEFT RETURN LLAVERIGHT
    (154) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT . LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT . LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT

    LLAVELEFT       shift and go to state 236


state 195

    (156) funcion_parametro -> FUNC VARIABLE PARLEFT parametros . PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> FUNC VARIABLE PARLEFT parametros . PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> FUNC VARIABLE PARLEFT parametros . PARRIGHT LLAVELEFT RETURN LLAVERIGHT

    PARRIGHT        shift and go to state 237


state 196

    (161) parametros -> typeData . VARIABLE
    (162) parametros -> typeData . VARIABLE COMA parametros

    VARIABLE        shift and go to state 238


state 197

    (13) instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .

    $end            reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    RETURN          reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    LLAVERIGHT      reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    PACKAGE         reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    VAR             reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    VARIABLE        reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    IF              reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    FOR             reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    IMPRIMIR        reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    MAP             reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    PRODUCTO        reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    SCAN            reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    SWITCH          reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    ENTERO          reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    FLOTANTE        reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    BOOL            reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    FUNC            reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    PARLEFT         reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    BREAK           reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    CONTINUE        reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)


state 198

    (92) array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT . contArray
    (93) contArray -> . INT LLAVELEFT contArrayEnteros LLAVERIGHT
    (94) contArray -> . STRING LLAVELEFT contArrayCadenas LLAVERIGHT
    (95) contArray -> . FLOAT LLAVELEFT contArrayFloat LLAVERIGHT

    INT             shift and go to state 240
    STRING          shift and go to state 241
    FLOAT           shift and go to state 242

    contArray                      shift and go to state 239

state 199

    (145) declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .

    LLAVELEFT       reduce using rule 145 (declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .)
    $end            reduce using rule 145 (declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .)
    RETURN          reduce using rule 145 (declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .)
    LLAVERIGHT      reduce using rule 145 (declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .)
    PACKAGE         reduce using rule 145 (declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .)
    VAR             reduce using rule 145 (declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .)
    VARIABLE        reduce using rule 145 (declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .)
    IF              reduce using rule 145 (declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .)
    FOR             reduce using rule 145 (declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .)
    IMPRIMIR        reduce using rule 145 (declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .)
    MAP             reduce using rule 145 (declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .)
    PRODUCTO        reduce using rule 145 (declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .)
    SCAN            reduce using rule 145 (declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .)
    SWITCH          reduce using rule 145 (declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .)
    ENTERO          reduce using rule 145 (declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .)
    FLOTANTE        reduce using rule 145 (declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .)
    BOOL            reduce using rule 145 (declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .)
    FUNC            reduce using rule 145 (declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .)
    PARLEFT         reduce using rule 145 (declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .)
    BREAK           reduce using rule 145 (declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .)
    CONTINUE        reduce using rule 145 (declaracion_slices -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData .)


state 200

    (138) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT . CORCHRIGHT typeData COMA ENTERO PARRIGHT
    (139) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT . CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT

    CORCHRIGHT      shift and go to state 243


state 201

    (143) declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT . typeData
    (88) typeData -> . BOOL
    (89) typeData -> . INT
    (90) typeData -> . FLOAT
    (91) typeData -> . STRING

    BOOL            shift and go to state 77
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 80

    typeData                       shift and go to state 244

state 202

    (144) declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .

    LLAVELEFT       reduce using rule 144 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    $end            reduce using rule 144 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    RETURN          reduce using rule 144 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    LLAVERIGHT      reduce using rule 144 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    PACKAGE         reduce using rule 144 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    VAR             reduce using rule 144 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    VARIABLE        reduce using rule 144 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    IF              reduce using rule 144 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    FOR             reduce using rule 144 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    IMPRIMIR        reduce using rule 144 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    MAP             reduce using rule 144 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    PRODUCTO        reduce using rule 144 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    SCAN            reduce using rule 144 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    SWITCH          reduce using rule 144 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    ENTERO          reduce using rule 144 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    FLOTANTE        reduce using rule 144 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    BOOL            reduce using rule 144 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    FUNC            reduce using rule 144 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    PARLEFT         reduce using rule 144 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    BREAK           reduce using rule 144 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    CONTINUE        reduce using rule 144 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)


state 203

    (17) asignacion -> VAR VARIABLE BOOL IGUAL booleano .

    $end            reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    RETURN          reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    LLAVERIGHT      reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    PACKAGE         reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    VAR             reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    VARIABLE        reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    IF              reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    FOR             reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    IMPRIMIR        reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    MAP             reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    PRODUCTO        reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    SCAN            reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    SWITCH          reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    ENTERO          reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    FLOTANTE        reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    BOOL            reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    FUNC            reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    PARLEFT         reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    BREAK           reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    CONTINUE        reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)


state 204

    (141) declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO . CORCHRIGHT typeData

    CORCHRIGHT      shift and go to state 245


state 205

    (142) declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT . typeData
    (88) typeData -> . BOOL
    (89) typeData -> . INT
    (90) typeData -> . FLOAT
    (91) typeData -> . STRING

    BOOL            shift and go to state 77
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 80

    typeData                       shift and go to state 246

state 206

    (18) asignacion -> VAR VARIABLE INT IGUAL expresionInt .
    (119) expresionInt -> expresionInt . operadorArit ENTERO
    (123) operadorArit -> . SUMA
    (124) operadorArit -> . RESTA
    (125) operadorArit -> . PRODUCTO
    (126) operadorArit -> . DIVISION
    (127) operadorArit -> . MODULO

  ! shift/reduce conflict for PRODUCTO resolved as shift
    $end            reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    RETURN          reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    LLAVERIGHT      reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    PACKAGE         reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    VAR             reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    VARIABLE        reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    IF              reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    FOR             reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    IMPRIMIR        reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    MAP             reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    SCAN            reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    SWITCH          reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    ENTERO          reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    FLOTANTE        reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    BOOL            reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    FUNC            reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    PARLEFT         reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    BREAK           reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    CONTINUE        reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    SUMA            shift and go to state 47
    RESTA           shift and go to state 48
    PRODUCTO        shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51

  ! PRODUCTO        [ reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .) ]

    operadorArit                   shift and go to state 46

state 207

    (120) expresionInt -> ENTERO . operadorArit ENTERO
    (123) operadorArit -> . SUMA
    (124) operadorArit -> . RESTA
    (125) operadorArit -> . PRODUCTO
    (126) operadorArit -> . DIVISION
    (127) operadorArit -> . MODULO

    SUMA            shift and go to state 47
    RESTA           shift and go to state 48
    PRODUCTO        shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51

    operadorArit                   shift and go to state 82

state 208

    (19) asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .
    (121) expresionFloat -> expresionFloat . operadorArit FLOTANTE
    (123) operadorArit -> . SUMA
    (124) operadorArit -> . RESTA
    (125) operadorArit -> . PRODUCTO
    (126) operadorArit -> . DIVISION
    (127) operadorArit -> . MODULO

  ! shift/reduce conflict for PRODUCTO resolved as shift
    $end            reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    RETURN          reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    LLAVERIGHT      reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    PACKAGE         reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    VAR             reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    VARIABLE        reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    IF              reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    FOR             reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    IMPRIMIR        reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    MAP             reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    SCAN            reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    SWITCH          reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    ENTERO          reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    FLOTANTE        reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    BOOL            reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    FUNC            reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    PARLEFT         reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    BREAK           reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    CONTINUE        reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    SUMA            shift and go to state 47
    RESTA           shift and go to state 48
    PRODUCTO        shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51

  ! PRODUCTO        [ reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .) ]

    operadorArit                   shift and go to state 52

state 209

    (122) expresionFloat -> FLOTANTE . operadorArit FLOTANTE
    (123) operadorArit -> . SUMA
    (124) operadorArit -> . RESTA
    (125) operadorArit -> . PRODUCTO
    (126) operadorArit -> . DIVISION
    (127) operadorArit -> . MODULO

    SUMA            shift and go to state 47
    RESTA           shift and go to state 48
    PRODUCTO        shift and go to state 49
    DIVISION        shift and go to state 50
    MODULO          shift and go to state 51

    operadorArit                   shift and go to state 85

state 210

    (20) asignacion -> VAR VARIABLE STRING IGUAL CADENA .

    $end            reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    RETURN          reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    LLAVERIGHT      reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    PACKAGE         reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    VAR             reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    VARIABLE        reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    IF              reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    FOR             reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    IMPRIMIR        reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    MAP             reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    PRODUCTO        reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    SCAN            reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    SWITCH          reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    ENTERO          reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    FLOTANTE        reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    BOOL            reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    FUNC            reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    PARLEFT         reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    BREAK           reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    CONTINUE        reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)


state 211

    (21) asignacion -> VAR VARIABLE puntero IGUAL refer .

    $end            reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    RETURN          reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    LLAVERIGHT      reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    PACKAGE         reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    VAR             reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    VARIABLE        reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    IF              reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    FOR             reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    IMPRIMIR        reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    MAP             reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    PRODUCTO        reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    SCAN            reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    SWITCH          reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    ENTERO          reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    FLOTANTE        reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    BOOL            reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    FUNC            reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    PARLEFT         reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    BREAK           reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    CONTINUE        reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)


state 212

    (41) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones . RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones . RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones . LLAVERIGHT
    (44) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones . LLAVERIGHT else
    (14) masInstrucciones -> masInstrucciones . instrucciones
    (15) masInstrucciones -> masInstrucciones .
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (173) condiciones -> . factor MAYORQUE factor
    (174) condiciones -> . factor MENORQUE factor
    (175) condiciones -> . factor DIFERENTE factor
    (176) condiciones -> . factor ESIGUAL factor
    (177) condiciones -> . factor MENORIGUAL factor
    (178) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (163) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (149) funcion -> . funcion_sin_parametro
    (150) funcion -> . funcion_parametro
    (151) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices
    (136) slices -> . declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT
    (137) slices -> . declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT
    (138) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT
    (139) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (152) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (153) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (154) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (156) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (141) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (142) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (143) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (144) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (145) declaracion_slices -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LLAVERIGHT resolved as shift
  ! shift/reduce conflict for PACKAGE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for PRODUCTO resolved as shift
  ! shift/reduce conflict for SCAN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for PARLEFT resolved as shift
    RETURN          shift and go to state 248
    LLAVERIGHT      shift and go to state 249
    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    BOOL            shift and go to state 17
    FUNC            shift and go to state 39
    PARLEFT         shift and go to state 27

  ! RETURN          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! LLAVERIGHT      [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PACKAGE         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VAR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VARIABLE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IF              [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FOR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IMPRIMIR        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! MAP             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PRODUCTO        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SCAN            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SWITCH          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! ENTERO          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FLOTANTE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! BOOL            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FUNC            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PARLEFT         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]

    instrucciones                  shift and go to state 247
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices             shift and go to state 36
    numericos                      shift and go to state 38

state 213

    (45) sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE . LLAVERIGHT
    (46) sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE . LLAVERIGHT else

    LLAVERIGHT      shift and go to state 250


state 214

    (147) comparacion -> NEGACION PARLEFT condiciones PARRIGHT .

    AND             reduce using rule 147 (comparacion -> NEGACION PARLEFT condiciones PARRIGHT .)
    OR              reduce using rule 147 (comparacion -> NEGACION PARLEFT condiciones PARRIGHT .)
    LLAVELEFT       reduce using rule 147 (comparacion -> NEGACION PARLEFT condiciones PARRIGHT .)


state 215

    (85) sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA . incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (87) incrementa -> . VARIABLE INCREMENTO

    VARIABLE        shift and go to state 252

    incrementa                     shift and go to state 251

state 216

    (109) masCont -> masCont COMA . contenido
    (111) contenido -> . CADENA
    (112) contenido -> . VARIABLE
    (113) contenido -> . method
    (114) contenido -> .
    (102) method -> . methodArray
    (103) methodArray -> . namemetodoArr PARLEFT VARIABLE PARRIGHT
    (104) namemetodoArr -> . LEN
    (105) namemetodoArr -> . CAP

    CADENA          shift and go to state 137
    VARIABLE        shift and go to state 138
    COMA            reduce using rule 114 (contenido -> .)
    PARRIGHT        reduce using rule 114 (contenido -> .)
    LEN             shift and go to state 142
    CAP             shift and go to state 143

    contenido                      shift and go to state 253
    method                         shift and go to state 139
    methodArray                    shift and go to state 140
    namemetodoArr                  shift and go to state 141

state 217

    (110) masCont -> COMA contenido .

    COMA            reduce using rule 110 (masCont -> COMA contenido .)
    PARRIGHT        reduce using rule 110 (masCont -> COMA contenido .)


state 218

    (103) methodArray -> namemetodoArr PARLEFT VARIABLE . PARRIGHT

    PARRIGHT        shift and go to state 254


state 219

    (91) typeData -> STRING .
    (54) contMapa -> STRING . LLAVELEFT parCadena LLAVERIGHT

  ! shift/reduce conflict for LLAVELEFT resolved as shift
    LLAVELEFT       shift and go to state 255

  ! LLAVELEFT       [ reduce using rule 91 (typeData -> STRING .) ]


state 220

    (51) mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData . LLAVELEFT LLAVERIGHT

    LLAVELEFT       shift and go to state 256


state 221

    (52) mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .

    $end            reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    RETURN          reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    LLAVERIGHT      reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    PACKAGE         reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    VAR             reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    VARIABLE        reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    IF              reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    FOR             reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    IMPRIMIR        reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    MAP             reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    PRODUCTO        reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    SCAN            reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    SWITCH          reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    ENTERO          reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    FLOTANTE        reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    BOOL            reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    FUNC            reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    PARLEFT         reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    BREAK           reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    CONTINUE        reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)


state 222

    (88) typeData -> BOOL .
    (56) contMapa -> BOOL . LLAVELEFT parBoolean LLAVERIGHT

  ! shift/reduce conflict for LLAVELEFT resolved as shift
    LLAVELEFT       shift and go to state 257

  ! LLAVELEFT       [ reduce using rule 88 (typeData -> BOOL .) ]


state 223

    (89) typeData -> INT .
    (53) contMapa -> INT . LLAVELEFT parEntero LLAVERIGHT

  ! shift/reduce conflict for LLAVELEFT resolved as shift
    LLAVELEFT       shift and go to state 258

  ! LLAVELEFT       [ reduce using rule 89 (typeData -> INT .) ]


state 224

    (90) typeData -> FLOAT .
    (55) contMapa -> FLOAT . LLAVELEFT parFlotante LLAVERIGHT

  ! shift/reduce conflict for LLAVELEFT resolved as shift
    LLAVELEFT       shift and go to state 259

  ! LLAVELEFT       [ reduce using rule 90 (typeData -> FLOAT .) ]


state 225

    (163) switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .

    $end            reduce using rule 163 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    RETURN          reduce using rule 163 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 163 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    PACKAGE         reduce using rule 163 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    VAR             reduce using rule 163 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    VARIABLE        reduce using rule 163 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    IF              reduce using rule 163 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    FOR             reduce using rule 163 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    IMPRIMIR        reduce using rule 163 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    MAP             reduce using rule 163 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    PRODUCTO        reduce using rule 163 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    SCAN            reduce using rule 163 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    SWITCH          reduce using rule 163 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    ENTERO          reduce using rule 163 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    FLOTANTE        reduce using rule 163 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    BOOL            reduce using rule 163 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    FUNC            reduce using rule 163 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    PARLEFT         reduce using rule 163 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    BREAK           reduce using rule 163 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    CONTINUE        reduce using rule 163 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)


state 226

    (164) bloque_switch -> CASE caso_switch . DOSPUNTOS instrucciones masInstrucciones BREAK
    (165) bloque_switch -> CASE caso_switch . DOSPUNTOS instrucciones masInstrucciones CONTINUE
    (166) bloque_switch -> CASE caso_switch . DOSPUNTOS instrucciones masInstrucciones BREAK bloque_switch

    DOSPUNTOS       shift and go to state 260


state 227

    (168) caso_switch -> VARIABLE .

    DOSPUNTOS       reduce using rule 168 (caso_switch -> VARIABLE .)


state 228

    (169) caso_switch -> CADENA .

    DOSPUNTOS       reduce using rule 169 (caso_switch -> CADENA .)


state 229

    (170) caso_switch -> ENTERO .

    DOSPUNTOS       reduce using rule 170 (caso_switch -> ENTERO .)


state 230

    (171) switch_default -> DEFAULT DOSPUNTOS . instrucciones masInstrucciones BREAK
    (172) switch_default -> DEFAULT DOSPUNTOS . instrucciones masInstrucciones CONTINUE
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (173) condiciones -> . factor MAYORQUE factor
    (174) condiciones -> . factor MENORQUE factor
    (175) condiciones -> . factor DIFERENTE factor
    (176) condiciones -> . factor ESIGUAL factor
    (177) condiciones -> . factor MENORIGUAL factor
    (178) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (163) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (149) funcion -> . funcion_sin_parametro
    (150) funcion -> . funcion_parametro
    (151) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices
    (136) slices -> . declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT
    (137) slices -> . declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT
    (138) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT
    (139) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (152) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (153) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (154) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (156) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (141) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (142) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (143) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (144) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (145) declaracion_slices -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    BOOL            shift and go to state 17
    FUNC            shift and go to state 39
    PARLEFT         shift and go to state 27

    instrucciones                  shift and go to state 261
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices             shift and go to state 36
    numericos                      shift and go to state 38

state 231

    (97) contArrayEnteros -> contArrayEnteros COMA ENTERO .

    LLAVERIGHT      reduce using rule 97 (contArrayEnteros -> contArrayEnteros COMA ENTERO .)
    COMA            reduce using rule 97 (contArrayEnteros -> contArrayEnteros COMA ENTERO .)


state 232

    (99) contArrayCadenas -> contArrayCadenas COMA CADENA .

    LLAVERIGHT      reduce using rule 99 (contArrayCadenas -> contArrayCadenas COMA CADENA .)
    COMA            reduce using rule 99 (contArrayCadenas -> contArrayCadenas COMA CADENA .)


state 233

    (96) contArrayEnteros -> ENTERO COMA ENTERO .

    LLAVERIGHT      reduce using rule 96 (contArrayEnteros -> ENTERO COMA ENTERO .)
    COMA            reduce using rule 96 (contArrayEnteros -> ENTERO COMA ENTERO .)


state 234

    (98) contArrayCadenas -> CADENA COMA CADENA .

    LLAVERIGHT      reduce using rule 98 (contArrayCadenas -> CADENA COMA CADENA .)
    COMA            reduce using rule 98 (contArrayCadenas -> CADENA COMA CADENA .)


state 235

    (160) parametros -> VARIABLE COMA . parametros
    (159) parametros -> . VARIABLE
    (160) parametros -> . VARIABLE COMA parametros
    (161) parametros -> . typeData VARIABLE
    (162) parametros -> . typeData VARIABLE COMA parametros
    (88) typeData -> . BOOL
    (89) typeData -> . INT
    (90) typeData -> . FLOAT
    (91) typeData -> . STRING

    VARIABLE        shift and go to state 193
    BOOL            shift and go to state 77
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 80

    parametros                     shift and go to state 262
    typeData                       shift and go to state 196

state 236

    (152) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT . instrucciones masInstrucciones LLAVERIGHT
    (153) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT . RETURN LLAVERIGHT
    (154) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT . instrucciones masInstrucciones RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT . instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (173) condiciones -> . factor MAYORQUE factor
    (174) condiciones -> . factor MENORQUE factor
    (175) condiciones -> . factor DIFERENTE factor
    (176) condiciones -> . factor ESIGUAL factor
    (177) condiciones -> . factor MENORIGUAL factor
    (178) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (163) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (149) funcion -> . funcion_sin_parametro
    (150) funcion -> . funcion_parametro
    (151) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices
    (136) slices -> . declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT
    (137) slices -> . declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT
    (138) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT
    (139) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (152) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (153) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (154) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (156) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (141) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (142) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (143) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (144) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (145) declaracion_slices -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    RETURN          shift and go to state 264
    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    BOOL            shift and go to state 17
    FUNC            shift and go to state 39
    PARLEFT         shift and go to state 27

    instrucciones                  shift and go to state 263
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices             shift and go to state 36
    numericos                      shift and go to state 38

state 237

    (156) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT . LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT . LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT . LLAVELEFT RETURN LLAVERIGHT

    LLAVELEFT       shift and go to state 265


state 238

    (161) parametros -> typeData VARIABLE .
    (162) parametros -> typeData VARIABLE . COMA parametros

    PARRIGHT        reduce using rule 161 (parametros -> typeData VARIABLE .)
    COMA            shift and go to state 266


state 239

    (92) array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .

    $end            reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    RETURN          reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    LLAVERIGHT      reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    PACKAGE         reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    VAR             reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    VARIABLE        reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    IF              reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    FOR             reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    IMPRIMIR        reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    MAP             reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    PRODUCTO        reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    SCAN            reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    SWITCH          reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    ENTERO          reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    FLOTANTE        reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    BOOL            reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    FUNC            reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    PARLEFT         reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    BREAK           reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    CONTINUE        reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)


state 240

    (93) contArray -> INT . LLAVELEFT contArrayEnteros LLAVERIGHT

    LLAVELEFT       shift and go to state 267


state 241

    (94) contArray -> STRING . LLAVELEFT contArrayCadenas LLAVERIGHT

    LLAVELEFT       shift and go to state 268


state 242

    (95) contArray -> FLOAT . LLAVELEFT contArrayFloat LLAVERIGHT

    LLAVELEFT       shift and go to state 269


state 243

    (138) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT . typeData COMA ENTERO PARRIGHT
    (139) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT . typeData COMA ENTERO COMA ENTERO PARRIGHT
    (88) typeData -> . BOOL
    (89) typeData -> . INT
    (90) typeData -> . FLOAT
    (91) typeData -> . STRING

    BOOL            shift and go to state 77
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 80

    typeData                       shift and go to state 270

state 244

    (143) declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .

    LLAVELEFT       reduce using rule 143 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    $end            reduce using rule 143 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    RETURN          reduce using rule 143 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    LLAVERIGHT      reduce using rule 143 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    PACKAGE         reduce using rule 143 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    VAR             reduce using rule 143 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    VARIABLE        reduce using rule 143 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    IF              reduce using rule 143 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    FOR             reduce using rule 143 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    IMPRIMIR        reduce using rule 143 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    MAP             reduce using rule 143 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    PRODUCTO        reduce using rule 143 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    SCAN            reduce using rule 143 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    SWITCH          reduce using rule 143 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    ENTERO          reduce using rule 143 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    FLOTANTE        reduce using rule 143 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    BOOL            reduce using rule 143 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    FUNC            reduce using rule 143 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    PARLEFT         reduce using rule 143 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    BREAK           reduce using rule 143 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    CONTINUE        reduce using rule 143 (declaracion_slices -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)


state 245

    (141) declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT . typeData
    (88) typeData -> . BOOL
    (89) typeData -> . INT
    (90) typeData -> . FLOAT
    (91) typeData -> . STRING

    BOOL            shift and go to state 77
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 80

    typeData                       shift and go to state 271

state 246

    (142) declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .

    LLAVELEFT       reduce using rule 142 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    $end            reduce using rule 142 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    RETURN          reduce using rule 142 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    LLAVERIGHT      reduce using rule 142 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    PACKAGE         reduce using rule 142 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    VAR             reduce using rule 142 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    VARIABLE        reduce using rule 142 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    IF              reduce using rule 142 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    FOR             reduce using rule 142 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    IMPRIMIR        reduce using rule 142 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    MAP             reduce using rule 142 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    PRODUCTO        reduce using rule 142 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    SCAN            reduce using rule 142 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    SWITCH          reduce using rule 142 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    ENTERO          reduce using rule 142 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    FLOTANTE        reduce using rule 142 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    BOOL            reduce using rule 142 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    FUNC            reduce using rule 142 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    PARLEFT         reduce using rule 142 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    BREAK           reduce using rule 142 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)
    CONTINUE        reduce using rule 142 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData .)


state 247

    (14) masInstrucciones -> masInstrucciones instrucciones .

    RETURN          reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    LLAVERIGHT      reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    PACKAGE         reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    VAR             reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    VARIABLE        reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    IF              reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    FOR             reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    IMPRIMIR        reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    MAP             reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    PRODUCTO        reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    SCAN            reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    SWITCH          reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    ENTERO          reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    FLOTANTE        reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    BOOL            reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    FUNC            reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    PARLEFT         reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    BREAK           reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    CONTINUE        reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)


state 248

    (41) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN . VARIABLE LLAVERIGHT
    (42) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN . VARIABLE LLAVERIGHT else

    VARIABLE        shift and go to state 272


state 249

    (43) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .
    (44) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT . else
    (47) else -> . ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (48) else -> . ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (49) else -> . ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (50) else -> . ELSE sentenciaIf

    $end            reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    RETURN          reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PACKAGE         reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    VAR             reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    VARIABLE        reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    IF              reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FOR             reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    IMPRIMIR        reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    MAP             reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PRODUCTO        reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    SCAN            reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    SWITCH          reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    ENTERO          reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FLOTANTE        reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    BOOL            reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FUNC            reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PARLEFT         reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    BREAK           reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    CONTINUE        reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    ELSE            shift and go to state 274

    else                           shift and go to state 273

state 250

    (45) sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .
    (46) sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT . else
    (47) else -> . ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (48) else -> . ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (49) else -> . ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (50) else -> . ELSE sentenciaIf

    $end            reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    RETURN          reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    PACKAGE         reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    VAR             reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    VARIABLE        reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    IF              reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    FOR             reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    IMPRIMIR        reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    MAP             reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    PRODUCTO        reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    SCAN            reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    SWITCH          reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    ENTERO          reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    FLOTANTE        reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    BOOL            reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    FUNC            reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    PARLEFT         reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    BREAK           reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    CONTINUE        reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    ELSE            shift and go to state 274

    else                           shift and go to state 275

state 251

    (85) sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa . LLAVELEFT instrucciones masInstrucciones LLAVERIGHT

    LLAVELEFT       shift and go to state 276


state 252

    (87) incrementa -> VARIABLE . INCREMENTO

    INCREMENTO      shift and go to state 277


state 253

    (109) masCont -> masCont COMA contenido .

    COMA            reduce using rule 109 (masCont -> masCont COMA contenido .)
    PARRIGHT        reduce using rule 109 (masCont -> masCont COMA contenido .)


state 254

    (103) methodArray -> namemetodoArr PARLEFT VARIABLE PARRIGHT .

    COMA            reduce using rule 103 (methodArray -> namemetodoArr PARLEFT VARIABLE PARRIGHT .)
    PARRIGHT        reduce using rule 103 (methodArray -> namemetodoArr PARLEFT VARIABLE PARRIGHT .)


state 255

    (54) contMapa -> STRING LLAVELEFT . parCadena LLAVERIGHT
    (63) parCadena -> . CADENA DOSPUNTOS datoCadena masCadena
    (64) parCadena -> . CADENA DOSPUNTOS datoCadena

    CADENA          shift and go to state 279

    parCadena                      shift and go to state 278

state 256

    (51) mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT . LLAVERIGHT

    LLAVERIGHT      shift and go to state 280


state 257

    (56) contMapa -> BOOL LLAVELEFT . parBoolean LLAVERIGHT
    (75) parBoolean -> . CADENA DOSPUNTOS datoBoolean masBoolean
    (76) parBoolean -> . CADENA DOSPUNTOS datoBoolean

    CADENA          shift and go to state 282

    parBoolean                     shift and go to state 281

state 258

    (53) contMapa -> INT LLAVELEFT . parEntero LLAVERIGHT
    (57) parEntero -> . CADENA DOSPUNTOS datoEntero masEntero
    (58) parEntero -> . CADENA DOSPUNTOS datoEntero

    CADENA          shift and go to state 284

    parEntero                      shift and go to state 283

state 259

    (55) contMapa -> FLOAT LLAVELEFT . parFlotante LLAVERIGHT
    (69) parFlotante -> . CADENA DOSPUNTOS datoFlotante masFlotante
    (70) parFlotante -> . CADENA DOSPUNTOS datoFlotante

    CADENA          shift and go to state 286

    parFlotante                    shift and go to state 285

state 260

    (164) bloque_switch -> CASE caso_switch DOSPUNTOS . instrucciones masInstrucciones BREAK
    (165) bloque_switch -> CASE caso_switch DOSPUNTOS . instrucciones masInstrucciones CONTINUE
    (166) bloque_switch -> CASE caso_switch DOSPUNTOS . instrucciones masInstrucciones BREAK bloque_switch
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (173) condiciones -> . factor MAYORQUE factor
    (174) condiciones -> . factor MENORQUE factor
    (175) condiciones -> . factor DIFERENTE factor
    (176) condiciones -> . factor ESIGUAL factor
    (177) condiciones -> . factor MENORIGUAL factor
    (178) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (163) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (149) funcion -> . funcion_sin_parametro
    (150) funcion -> . funcion_parametro
    (151) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices
    (136) slices -> . declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT
    (137) slices -> . declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT
    (138) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT
    (139) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (152) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (153) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (154) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (156) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (141) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (142) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (143) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (144) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (145) declaracion_slices -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    BOOL            shift and go to state 17
    FUNC            shift and go to state 39
    PARLEFT         shift and go to state 27

    instrucciones                  shift and go to state 287
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices             shift and go to state 36
    numericos                      shift and go to state 38

state 261

    (171) switch_default -> DEFAULT DOSPUNTOS instrucciones . masInstrucciones BREAK
    (172) switch_default -> DEFAULT DOSPUNTOS instrucciones . masInstrucciones CONTINUE
    (14) masInstrucciones -> . masInstrucciones instrucciones
    (15) masInstrucciones -> . masInstrucciones
    (16) masInstrucciones -> .

    BREAK           reduce using rule 16 (masInstrucciones -> .)
    CONTINUE        reduce using rule 16 (masInstrucciones -> .)
    PACKAGE         reduce using rule 16 (masInstrucciones -> .)
    VAR             reduce using rule 16 (masInstrucciones -> .)
    VARIABLE        reduce using rule 16 (masInstrucciones -> .)
    IF              reduce using rule 16 (masInstrucciones -> .)
    FOR             reduce using rule 16 (masInstrucciones -> .)
    IMPRIMIR        reduce using rule 16 (masInstrucciones -> .)
    MAP             reduce using rule 16 (masInstrucciones -> .)
    PRODUCTO        reduce using rule 16 (masInstrucciones -> .)
    SCAN            reduce using rule 16 (masInstrucciones -> .)
    SWITCH          reduce using rule 16 (masInstrucciones -> .)
    ENTERO          reduce using rule 16 (masInstrucciones -> .)
    FLOTANTE        reduce using rule 16 (masInstrucciones -> .)
    BOOL            reduce using rule 16 (masInstrucciones -> .)
    FUNC            reduce using rule 16 (masInstrucciones -> .)
    PARLEFT         reduce using rule 16 (masInstrucciones -> .)

    masInstrucciones               shift and go to state 288

state 262

    (160) parametros -> VARIABLE COMA parametros .

    PARRIGHT        reduce using rule 160 (parametros -> VARIABLE COMA parametros .)


state 263

    (152) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones . masInstrucciones LLAVERIGHT
    (154) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones . masInstrucciones RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones . masInstrucciones RETURN VARIABLE LLAVERIGHT
    (14) masInstrucciones -> . masInstrucciones instrucciones
    (15) masInstrucciones -> . masInstrucciones
    (16) masInstrucciones -> .

    LLAVERIGHT      reduce using rule 16 (masInstrucciones -> .)
    RETURN          reduce using rule 16 (masInstrucciones -> .)
    PACKAGE         reduce using rule 16 (masInstrucciones -> .)
    VAR             reduce using rule 16 (masInstrucciones -> .)
    VARIABLE        reduce using rule 16 (masInstrucciones -> .)
    IF              reduce using rule 16 (masInstrucciones -> .)
    FOR             reduce using rule 16 (masInstrucciones -> .)
    IMPRIMIR        reduce using rule 16 (masInstrucciones -> .)
    MAP             reduce using rule 16 (masInstrucciones -> .)
    PRODUCTO        reduce using rule 16 (masInstrucciones -> .)
    SCAN            reduce using rule 16 (masInstrucciones -> .)
    SWITCH          reduce using rule 16 (masInstrucciones -> .)
    ENTERO          reduce using rule 16 (masInstrucciones -> .)
    FLOTANTE        reduce using rule 16 (masInstrucciones -> .)
    BOOL            reduce using rule 16 (masInstrucciones -> .)
    FUNC            reduce using rule 16 (masInstrucciones -> .)
    PARLEFT         reduce using rule 16 (masInstrucciones -> .)

    masInstrucciones               shift and go to state 289

state 264

    (153) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN . LLAVERIGHT

    LLAVERIGHT      shift and go to state 290


state 265

    (156) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT . instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT . instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT . RETURN LLAVERIGHT
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (173) condiciones -> . factor MAYORQUE factor
    (174) condiciones -> . factor MENORQUE factor
    (175) condiciones -> . factor DIFERENTE factor
    (176) condiciones -> . factor ESIGUAL factor
    (177) condiciones -> . factor MENORIGUAL factor
    (178) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (163) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (149) funcion -> . funcion_sin_parametro
    (150) funcion -> . funcion_parametro
    (151) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices
    (136) slices -> . declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT
    (137) slices -> . declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT
    (138) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT
    (139) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (152) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (153) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (154) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (156) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (141) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (142) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (143) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (144) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (145) declaracion_slices -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    RETURN          shift and go to state 292
    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    BOOL            shift and go to state 17
    FUNC            shift and go to state 39
    PARLEFT         shift and go to state 27

    instrucciones                  shift and go to state 291
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices             shift and go to state 36
    numericos                      shift and go to state 38

state 266

    (162) parametros -> typeData VARIABLE COMA . parametros
    (159) parametros -> . VARIABLE
    (160) parametros -> . VARIABLE COMA parametros
    (161) parametros -> . typeData VARIABLE
    (162) parametros -> . typeData VARIABLE COMA parametros
    (88) typeData -> . BOOL
    (89) typeData -> . INT
    (90) typeData -> . FLOAT
    (91) typeData -> . STRING

    VARIABLE        shift and go to state 193
    BOOL            shift and go to state 77
    INT             shift and go to state 78
    FLOAT           shift and go to state 79
    STRING          shift and go to state 80

    typeData                       shift and go to state 196
    parametros                     shift and go to state 293

state 267

    (93) contArray -> INT LLAVELEFT . contArrayEnteros LLAVERIGHT
    (96) contArrayEnteros -> . ENTERO COMA ENTERO
    (97) contArrayEnteros -> . contArrayEnteros COMA ENTERO

    ENTERO          shift and go to state 152

    contArrayEnteros               shift and go to state 294

state 268

    (94) contArray -> STRING LLAVELEFT . contArrayCadenas LLAVERIGHT
    (98) contArrayCadenas -> . CADENA COMA CADENA
    (99) contArrayCadenas -> . contArrayCadenas COMA CADENA

    CADENA          shift and go to state 153

    contArrayCadenas               shift and go to state 295

state 269

    (95) contArray -> FLOAT LLAVELEFT . contArrayFloat LLAVERIGHT
    (100) contArrayFloat -> . FLOTANTE COMA FLOTANTE
    (101) contArrayFloat -> . contArrayFloat COMA FLOTANTE

    FLOTANTE        shift and go to state 297

    contArrayFloat                 shift and go to state 296

state 270

    (138) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData . COMA ENTERO PARRIGHT
    (139) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData . COMA ENTERO COMA ENTERO PARRIGHT

    COMA            shift and go to state 298


state 271

    (141) declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .

    LLAVELEFT       reduce using rule 141 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    $end            reduce using rule 141 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    RETURN          reduce using rule 141 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    LLAVERIGHT      reduce using rule 141 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    PACKAGE         reduce using rule 141 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    VAR             reduce using rule 141 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    VARIABLE        reduce using rule 141 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    IF              reduce using rule 141 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    FOR             reduce using rule 141 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    IMPRIMIR        reduce using rule 141 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    MAP             reduce using rule 141 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    PRODUCTO        reduce using rule 141 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    SCAN            reduce using rule 141 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    SWITCH          reduce using rule 141 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    ENTERO          reduce using rule 141 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    FLOTANTE        reduce using rule 141 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    BOOL            reduce using rule 141 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    FUNC            reduce using rule 141 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    PARLEFT         reduce using rule 141 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    BREAK           reduce using rule 141 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)
    CONTINUE        reduce using rule 141 (declaracion_slices -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData .)


state 272

    (41) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE . LLAVERIGHT
    (42) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE . LLAVERIGHT else

    LLAVERIGHT      shift and go to state 299


state 273

    (44) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .

    $end            reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    RETURN          reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    LLAVERIGHT      reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    PACKAGE         reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    VAR             reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    VARIABLE        reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    IF              reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    FOR             reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    IMPRIMIR        reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    MAP             reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    PRODUCTO        reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    SCAN            reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    SWITCH          reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    ENTERO          reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    FLOTANTE        reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    BOOL            reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    FUNC            reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    PARLEFT         reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    BREAK           reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    CONTINUE        reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)


state 274

    (47) else -> ELSE . LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (48) else -> ELSE . LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (49) else -> ELSE . LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (50) else -> ELSE . sentenciaIf
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else

    LLAVELEFT       shift and go to state 300
    IF              shift and go to state 24

    sentenciaIf                    shift and go to state 301

state 275

    (46) sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .

    $end            reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    RETURN          reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    LLAVERIGHT      reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    PACKAGE         reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    VAR             reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    VARIABLE        reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    IF              reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    FOR             reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    IMPRIMIR        reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    MAP             reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    PRODUCTO        reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    SCAN            reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    SWITCH          reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    ENTERO          reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    FLOTANTE        reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    BOOL            reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    FUNC            reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    PARLEFT         reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    BREAK           reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    CONTINUE        reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)


state 276

    (85) sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT . instrucciones masInstrucciones LLAVERIGHT
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (173) condiciones -> . factor MAYORQUE factor
    (174) condiciones -> . factor MENORQUE factor
    (175) condiciones -> . factor DIFERENTE factor
    (176) condiciones -> . factor ESIGUAL factor
    (177) condiciones -> . factor MENORIGUAL factor
    (178) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (163) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (149) funcion -> . funcion_sin_parametro
    (150) funcion -> . funcion_parametro
    (151) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices
    (136) slices -> . declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT
    (137) slices -> . declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT
    (138) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT
    (139) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (152) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (153) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (154) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (156) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (141) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (142) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (143) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (144) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (145) declaracion_slices -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    BOOL            shift and go to state 17
    FUNC            shift and go to state 39
    PARLEFT         shift and go to state 27

    condiciones                    shift and go to state 4
    instrucciones                  shift and go to state 302
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices             shift and go to state 36
    numericos                      shift and go to state 38

state 277

    (87) incrementa -> VARIABLE INCREMENTO .

    LLAVELEFT       reduce using rule 87 (incrementa -> VARIABLE INCREMENTO .)


state 278

    (54) contMapa -> STRING LLAVELEFT parCadena . LLAVERIGHT

    LLAVERIGHT      shift and go to state 303


state 279

    (63) parCadena -> CADENA . DOSPUNTOS datoCadena masCadena
    (64) parCadena -> CADENA . DOSPUNTOS datoCadena

    DOSPUNTOS       shift and go to state 304


state 280

    (51) mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .

    $end            reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    RETURN          reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    PACKAGE         reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    VAR             reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    VARIABLE        reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    IF              reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    FOR             reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    IMPRIMIR        reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    MAP             reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    PRODUCTO        reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    SCAN            reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    SWITCH          reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    ENTERO          reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    FLOTANTE        reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    BOOL            reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    FUNC            reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    PARLEFT         reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    BREAK           reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    CONTINUE        reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)


state 281

    (56) contMapa -> BOOL LLAVELEFT parBoolean . LLAVERIGHT

    LLAVERIGHT      shift and go to state 305


state 282

    (75) parBoolean -> CADENA . DOSPUNTOS datoBoolean masBoolean
    (76) parBoolean -> CADENA . DOSPUNTOS datoBoolean

    DOSPUNTOS       shift and go to state 306


state 283

    (53) contMapa -> INT LLAVELEFT parEntero . LLAVERIGHT

    LLAVERIGHT      shift and go to state 307


state 284

    (57) parEntero -> CADENA . DOSPUNTOS datoEntero masEntero
    (58) parEntero -> CADENA . DOSPUNTOS datoEntero

    DOSPUNTOS       shift and go to state 308


state 285

    (55) contMapa -> FLOAT LLAVELEFT parFlotante . LLAVERIGHT

    LLAVERIGHT      shift and go to state 309


state 286

    (69) parFlotante -> CADENA . DOSPUNTOS datoFlotante masFlotante
    (70) parFlotante -> CADENA . DOSPUNTOS datoFlotante

    DOSPUNTOS       shift and go to state 310


state 287

    (164) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones . masInstrucciones BREAK
    (165) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones . masInstrucciones CONTINUE
    (166) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones . masInstrucciones BREAK bloque_switch
    (14) masInstrucciones -> . masInstrucciones instrucciones
    (15) masInstrucciones -> . masInstrucciones
    (16) masInstrucciones -> .

    BREAK           reduce using rule 16 (masInstrucciones -> .)
    CONTINUE        reduce using rule 16 (masInstrucciones -> .)
    PACKAGE         reduce using rule 16 (masInstrucciones -> .)
    VAR             reduce using rule 16 (masInstrucciones -> .)
    VARIABLE        reduce using rule 16 (masInstrucciones -> .)
    IF              reduce using rule 16 (masInstrucciones -> .)
    FOR             reduce using rule 16 (masInstrucciones -> .)
    IMPRIMIR        reduce using rule 16 (masInstrucciones -> .)
    MAP             reduce using rule 16 (masInstrucciones -> .)
    PRODUCTO        reduce using rule 16 (masInstrucciones -> .)
    SCAN            reduce using rule 16 (masInstrucciones -> .)
    SWITCH          reduce using rule 16 (masInstrucciones -> .)
    ENTERO          reduce using rule 16 (masInstrucciones -> .)
    FLOTANTE        reduce using rule 16 (masInstrucciones -> .)
    BOOL            reduce using rule 16 (masInstrucciones -> .)
    FUNC            reduce using rule 16 (masInstrucciones -> .)
    PARLEFT         reduce using rule 16 (masInstrucciones -> .)

    masInstrucciones               shift and go to state 311

state 288

    (171) switch_default -> DEFAULT DOSPUNTOS instrucciones masInstrucciones . BREAK
    (172) switch_default -> DEFAULT DOSPUNTOS instrucciones masInstrucciones . CONTINUE
    (14) masInstrucciones -> masInstrucciones . instrucciones
    (15) masInstrucciones -> masInstrucciones .
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (173) condiciones -> . factor MAYORQUE factor
    (174) condiciones -> . factor MENORQUE factor
    (175) condiciones -> . factor DIFERENTE factor
    (176) condiciones -> . factor ESIGUAL factor
    (177) condiciones -> . factor MENORIGUAL factor
    (178) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (163) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (149) funcion -> . funcion_sin_parametro
    (150) funcion -> . funcion_parametro
    (151) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices
    (136) slices -> . declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT
    (137) slices -> . declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT
    (138) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT
    (139) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (152) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (153) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (154) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (156) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (141) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (142) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (143) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (144) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (145) declaracion_slices -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for PACKAGE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for PRODUCTO resolved as shift
  ! shift/reduce conflict for SCAN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for PARLEFT resolved as shift
    BREAK           shift and go to state 312
    CONTINUE        shift and go to state 313
    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    BOOL            shift and go to state 17
    FUNC            shift and go to state 39
    PARLEFT         shift and go to state 27

  ! BREAK           [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! CONTINUE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PACKAGE         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VAR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VARIABLE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IF              [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FOR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IMPRIMIR        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! MAP             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PRODUCTO        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SCAN            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SWITCH          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! ENTERO          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FLOTANTE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! BOOL            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FUNC            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PARLEFT         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]

    instrucciones                  shift and go to state 247
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices             shift and go to state 36
    numericos                      shift and go to state 38

state 289

    (152) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones . LLAVERIGHT
    (154) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones . RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones . RETURN VARIABLE LLAVERIGHT
    (14) masInstrucciones -> masInstrucciones . instrucciones
    (15) masInstrucciones -> masInstrucciones .
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (173) condiciones -> . factor MAYORQUE factor
    (174) condiciones -> . factor MENORQUE factor
    (175) condiciones -> . factor DIFERENTE factor
    (176) condiciones -> . factor ESIGUAL factor
    (177) condiciones -> . factor MENORIGUAL factor
    (178) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (163) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (149) funcion -> . funcion_sin_parametro
    (150) funcion -> . funcion_parametro
    (151) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices
    (136) slices -> . declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT
    (137) slices -> . declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT
    (138) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT
    (139) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (152) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (153) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (154) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (156) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (141) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (142) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (143) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (144) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (145) declaracion_slices -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

  ! shift/reduce conflict for LLAVERIGHT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PACKAGE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for PRODUCTO resolved as shift
  ! shift/reduce conflict for SCAN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for PARLEFT resolved as shift
    LLAVERIGHT      shift and go to state 314
    RETURN          shift and go to state 315
    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    BOOL            shift and go to state 17
    FUNC            shift and go to state 39
    PARLEFT         shift and go to state 27

  ! LLAVERIGHT      [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! RETURN          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PACKAGE         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VAR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VARIABLE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IF              [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FOR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IMPRIMIR        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! MAP             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PRODUCTO        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SCAN            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SWITCH          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! ENTERO          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FLOTANTE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! BOOL            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FUNC            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PARLEFT         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]

    instrucciones                  shift and go to state 247
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices             shift and go to state 36
    numericos                      shift and go to state 38

state 290

    (153) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .

    $end            reduce using rule 153 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    RETURN          reduce using rule 153 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 153 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    PACKAGE         reduce using rule 153 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    VAR             reduce using rule 153 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    VARIABLE        reduce using rule 153 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    IF              reduce using rule 153 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    FOR             reduce using rule 153 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    IMPRIMIR        reduce using rule 153 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    MAP             reduce using rule 153 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    PRODUCTO        reduce using rule 153 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    SCAN            reduce using rule 153 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    SWITCH          reduce using rule 153 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    ENTERO          reduce using rule 153 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    FLOTANTE        reduce using rule 153 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    BOOL            reduce using rule 153 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    FUNC            reduce using rule 153 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    PARLEFT         reduce using rule 153 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    BREAK           reduce using rule 153 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    CONTINUE        reduce using rule 153 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)


state 291

    (156) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones . masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones . masInstrucciones RETURN LLAVERIGHT
    (14) masInstrucciones -> . masInstrucciones instrucciones
    (15) masInstrucciones -> . masInstrucciones
    (16) masInstrucciones -> .

    LLAVERIGHT      reduce using rule 16 (masInstrucciones -> .)
    RETURN          reduce using rule 16 (masInstrucciones -> .)
    PACKAGE         reduce using rule 16 (masInstrucciones -> .)
    VAR             reduce using rule 16 (masInstrucciones -> .)
    VARIABLE        reduce using rule 16 (masInstrucciones -> .)
    IF              reduce using rule 16 (masInstrucciones -> .)
    FOR             reduce using rule 16 (masInstrucciones -> .)
    IMPRIMIR        reduce using rule 16 (masInstrucciones -> .)
    MAP             reduce using rule 16 (masInstrucciones -> .)
    PRODUCTO        reduce using rule 16 (masInstrucciones -> .)
    SCAN            reduce using rule 16 (masInstrucciones -> .)
    SWITCH          reduce using rule 16 (masInstrucciones -> .)
    ENTERO          reduce using rule 16 (masInstrucciones -> .)
    FLOTANTE        reduce using rule 16 (masInstrucciones -> .)
    BOOL            reduce using rule 16 (masInstrucciones -> .)
    FUNC            reduce using rule 16 (masInstrucciones -> .)
    PARLEFT         reduce using rule 16 (masInstrucciones -> .)

    masInstrucciones               shift and go to state 316

state 292

    (158) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN . LLAVERIGHT

    LLAVERIGHT      shift and go to state 317


state 293

    (162) parametros -> typeData VARIABLE COMA parametros .

    PARRIGHT        reduce using rule 162 (parametros -> typeData VARIABLE COMA parametros .)


state 294

    (93) contArray -> INT LLAVELEFT contArrayEnteros . LLAVERIGHT
    (97) contArrayEnteros -> contArrayEnteros . COMA ENTERO

    LLAVERIGHT      shift and go to state 318
    COMA            shift and go to state 188


state 295

    (94) contArray -> STRING LLAVELEFT contArrayCadenas . LLAVERIGHT
    (99) contArrayCadenas -> contArrayCadenas . COMA CADENA

    LLAVERIGHT      shift and go to state 319
    COMA            shift and go to state 190


state 296

    (95) contArray -> FLOAT LLAVELEFT contArrayFloat . LLAVERIGHT
    (101) contArrayFloat -> contArrayFloat . COMA FLOTANTE

    LLAVERIGHT      shift and go to state 320
    COMA            shift and go to state 321


state 297

    (100) contArrayFloat -> FLOTANTE . COMA FLOTANTE

    COMA            shift and go to state 322


state 298

    (138) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA . ENTERO PARRIGHT
    (139) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA . ENTERO COMA ENTERO PARRIGHT

    ENTERO          shift and go to state 323


state 299

    (41) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .
    (42) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT . else
    (47) else -> . ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (48) else -> . ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (49) else -> . ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (50) else -> . ELSE sentenciaIf

    $end            reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    RETURN          reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    PACKAGE         reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    VAR             reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    VARIABLE        reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    IF              reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    FOR             reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    IMPRIMIR        reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    MAP             reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    PRODUCTO        reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    SCAN            reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    SWITCH          reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    ENTERO          reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    FLOTANTE        reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    BOOL            reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    FUNC            reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    PARLEFT         reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    BREAK           reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    CONTINUE        reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    ELSE            shift and go to state 274

    else                           shift and go to state 324

state 300

    (47) else -> ELSE LLAVELEFT . instrucciones masInstrucciones LLAVERIGHT
    (48) else -> ELSE LLAVELEFT . instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (49) else -> ELSE LLAVELEFT . RETURN VARIABLE LLAVERIGHT
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (173) condiciones -> . factor MAYORQUE factor
    (174) condiciones -> . factor MENORQUE factor
    (175) condiciones -> . factor DIFERENTE factor
    (176) condiciones -> . factor ESIGUAL factor
    (177) condiciones -> . factor MENORIGUAL factor
    (178) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (163) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (149) funcion -> . funcion_sin_parametro
    (150) funcion -> . funcion_parametro
    (151) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices
    (136) slices -> . declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT
    (137) slices -> . declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT
    (138) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT
    (139) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (152) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (153) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (154) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (156) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (141) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (142) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (143) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (144) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (145) declaracion_slices -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    RETURN          shift and go to state 326
    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    BOOL            shift and go to state 17
    FUNC            shift and go to state 39
    PARLEFT         shift and go to state 27

    instrucciones                  shift and go to state 325
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices             shift and go to state 36
    numericos                      shift and go to state 38

state 301

    (50) else -> ELSE sentenciaIf .

    $end            reduce using rule 50 (else -> ELSE sentenciaIf .)
    RETURN          reduce using rule 50 (else -> ELSE sentenciaIf .)
    LLAVERIGHT      reduce using rule 50 (else -> ELSE sentenciaIf .)
    PACKAGE         reduce using rule 50 (else -> ELSE sentenciaIf .)
    VAR             reduce using rule 50 (else -> ELSE sentenciaIf .)
    VARIABLE        reduce using rule 50 (else -> ELSE sentenciaIf .)
    IF              reduce using rule 50 (else -> ELSE sentenciaIf .)
    FOR             reduce using rule 50 (else -> ELSE sentenciaIf .)
    IMPRIMIR        reduce using rule 50 (else -> ELSE sentenciaIf .)
    MAP             reduce using rule 50 (else -> ELSE sentenciaIf .)
    PRODUCTO        reduce using rule 50 (else -> ELSE sentenciaIf .)
    SCAN            reduce using rule 50 (else -> ELSE sentenciaIf .)
    SWITCH          reduce using rule 50 (else -> ELSE sentenciaIf .)
    ENTERO          reduce using rule 50 (else -> ELSE sentenciaIf .)
    FLOTANTE        reduce using rule 50 (else -> ELSE sentenciaIf .)
    BOOL            reduce using rule 50 (else -> ELSE sentenciaIf .)
    FUNC            reduce using rule 50 (else -> ELSE sentenciaIf .)
    PARLEFT         reduce using rule 50 (else -> ELSE sentenciaIf .)
    BREAK           reduce using rule 50 (else -> ELSE sentenciaIf .)
    CONTINUE        reduce using rule 50 (else -> ELSE sentenciaIf .)


state 302

    (85) sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones . masInstrucciones LLAVERIGHT
    (14) masInstrucciones -> . masInstrucciones instrucciones
    (15) masInstrucciones -> . masInstrucciones
    (16) masInstrucciones -> .

    LLAVERIGHT      reduce using rule 16 (masInstrucciones -> .)
    PACKAGE         reduce using rule 16 (masInstrucciones -> .)
    VAR             reduce using rule 16 (masInstrucciones -> .)
    VARIABLE        reduce using rule 16 (masInstrucciones -> .)
    IF              reduce using rule 16 (masInstrucciones -> .)
    FOR             reduce using rule 16 (masInstrucciones -> .)
    IMPRIMIR        reduce using rule 16 (masInstrucciones -> .)
    MAP             reduce using rule 16 (masInstrucciones -> .)
    PRODUCTO        reduce using rule 16 (masInstrucciones -> .)
    SCAN            reduce using rule 16 (masInstrucciones -> .)
    SWITCH          reduce using rule 16 (masInstrucciones -> .)
    ENTERO          reduce using rule 16 (masInstrucciones -> .)
    FLOTANTE        reduce using rule 16 (masInstrucciones -> .)
    BOOL            reduce using rule 16 (masInstrucciones -> .)
    FUNC            reduce using rule 16 (masInstrucciones -> .)
    PARLEFT         reduce using rule 16 (masInstrucciones -> .)

    masInstrucciones               shift and go to state 327

state 303

    (54) contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .

    $end            reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    RETURN          reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    PACKAGE         reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    VAR             reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    VARIABLE        reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    IF              reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    FOR             reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    IMPRIMIR        reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    MAP             reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    PRODUCTO        reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    SCAN            reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    SWITCH          reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    ENTERO          reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    FLOTANTE        reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    BOOL            reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    FUNC            reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    PARLEFT         reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    BREAK           reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    CONTINUE        reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)


state 304

    (63) parCadena -> CADENA DOSPUNTOS . datoCadena masCadena
    (64) parCadena -> CADENA DOSPUNTOS . datoCadena
    (67) datoCadena -> . VARIABLE
    (68) datoCadena -> . CADENA

    VARIABLE        shift and go to state 330
    CADENA          shift and go to state 328

    datoCadena                     shift and go to state 329

state 305

    (56) contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .

    $end            reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    RETURN          reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    PACKAGE         reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    VAR             reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    VARIABLE        reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    IF              reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    FOR             reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    IMPRIMIR        reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    MAP             reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    PRODUCTO        reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    SCAN            reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    SWITCH          reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    ENTERO          reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    FLOTANTE        reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    BOOL            reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    FUNC            reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    PARLEFT         reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    BREAK           reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    CONTINUE        reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)


state 306

    (75) parBoolean -> CADENA DOSPUNTOS . datoBoolean masBoolean
    (76) parBoolean -> CADENA DOSPUNTOS . datoBoolean
    (79) datoBoolean -> . condicion
    (80) datoBoolean -> . TRUE
    (81) datoBoolean -> . FALSE
    (182) condicion -> . AND
    (183) condicion -> . OR

    TRUE            shift and go to state 333
    FALSE           shift and go to state 334
    AND             shift and go to state 102
    OR              shift and go to state 103

    datoBoolean                    shift and go to state 331
    condicion                      shift and go to state 332

state 307

    (53) contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .

    $end            reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    RETURN          reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    PACKAGE         reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    VAR             reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    VARIABLE        reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    IF              reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    FOR             reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    IMPRIMIR        reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    MAP             reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    PRODUCTO        reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    SCAN            reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    SWITCH          reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    ENTERO          reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    FLOTANTE        reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    BOOL            reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    FUNC            reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    PARLEFT         reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    BREAK           reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    CONTINUE        reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)


state 308

    (57) parEntero -> CADENA DOSPUNTOS . datoEntero masEntero
    (58) parEntero -> CADENA DOSPUNTOS . datoEntero
    (61) datoEntero -> . VARIABLE
    (62) datoEntero -> . expresion
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 336
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    PARLEFT         shift and go to state 27

    datoEntero                     shift and go to state 335
    expresion                      shift and go to state 337
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 73

state 309

    (55) contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .

    $end            reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    RETURN          reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    PACKAGE         reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    VAR             reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    VARIABLE        reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    IF              reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    FOR             reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    IMPRIMIR        reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    MAP             reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    PRODUCTO        reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    SCAN            reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    SWITCH          reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    ENTERO          reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    FLOTANTE        reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    BOOL            reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    FUNC            reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    PARLEFT         reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    BREAK           reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    CONTINUE        reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)


state 310

    (69) parFlotante -> CADENA DOSPUNTOS . datoFlotante masFlotante
    (70) parFlotante -> CADENA DOSPUNTOS . datoFlotante
    (73) datoFlotante -> . VARIABLE
    (74) datoFlotante -> . expresion
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 339
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    PARLEFT         shift and go to state 27

    datoFlotante                   shift and go to state 338
    expresion                      shift and go to state 340
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 73

state 311

    (164) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones . BREAK
    (165) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones . CONTINUE
    (166) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones . BREAK bloque_switch
    (14) masInstrucciones -> masInstrucciones . instrucciones
    (15) masInstrucciones -> masInstrucciones .
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (173) condiciones -> . factor MAYORQUE factor
    (174) condiciones -> . factor MENORQUE factor
    (175) condiciones -> . factor DIFERENTE factor
    (176) condiciones -> . factor ESIGUAL factor
    (177) condiciones -> . factor MENORIGUAL factor
    (178) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (163) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (149) funcion -> . funcion_sin_parametro
    (150) funcion -> . funcion_parametro
    (151) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices
    (136) slices -> . declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT
    (137) slices -> . declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT
    (138) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT
    (139) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (152) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (153) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (154) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (156) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (141) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (142) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (143) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (144) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (145) declaracion_slices -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for PACKAGE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for PRODUCTO resolved as shift
  ! shift/reduce conflict for SCAN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for PARLEFT resolved as shift
    BREAK           shift and go to state 341
    CONTINUE        shift and go to state 342
    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    BOOL            shift and go to state 17
    FUNC            shift and go to state 39
    PARLEFT         shift and go to state 27

  ! BREAK           [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! CONTINUE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PACKAGE         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VAR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VARIABLE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IF              [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FOR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IMPRIMIR        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! MAP             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PRODUCTO        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SCAN            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SWITCH          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! ENTERO          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FLOTANTE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! BOOL            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FUNC            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PARLEFT         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]

    instrucciones                  shift and go to state 247
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices             shift and go to state 36
    numericos                      shift and go to state 38

state 312

    (171) switch_default -> DEFAULT DOSPUNTOS instrucciones masInstrucciones BREAK .

    LLAVERIGHT      reduce using rule 171 (switch_default -> DEFAULT DOSPUNTOS instrucciones masInstrucciones BREAK .)


state 313

    (172) switch_default -> DEFAULT DOSPUNTOS instrucciones masInstrucciones CONTINUE .

    LLAVERIGHT      reduce using rule 172 (switch_default -> DEFAULT DOSPUNTOS instrucciones masInstrucciones CONTINUE .)


state 314

    (152) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .

    $end            reduce using rule 152 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    RETURN          reduce using rule 152 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 152 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PACKAGE         reduce using rule 152 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    VAR             reduce using rule 152 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    VARIABLE        reduce using rule 152 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    IF              reduce using rule 152 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FOR             reduce using rule 152 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    IMPRIMIR        reduce using rule 152 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    MAP             reduce using rule 152 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PRODUCTO        reduce using rule 152 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    SCAN            reduce using rule 152 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    SWITCH          reduce using rule 152 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    ENTERO          reduce using rule 152 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FLOTANTE        reduce using rule 152 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    BOOL            reduce using rule 152 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FUNC            reduce using rule 152 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PARLEFT         reduce using rule 152 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    BREAK           reduce using rule 152 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    CONTINUE        reduce using rule 152 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)


state 315

    (154) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN . LLAVERIGHT
    (155) funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN . VARIABLE LLAVERIGHT

    LLAVERIGHT      shift and go to state 344
    VARIABLE        shift and go to state 343


state 316

    (156) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones . LLAVERIGHT
    (157) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones . RETURN LLAVERIGHT
    (14) masInstrucciones -> masInstrucciones . instrucciones
    (15) masInstrucciones -> masInstrucciones .
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (173) condiciones -> . factor MAYORQUE factor
    (174) condiciones -> . factor MENORQUE factor
    (175) condiciones -> . factor DIFERENTE factor
    (176) condiciones -> . factor ESIGUAL factor
    (177) condiciones -> . factor MENORIGUAL factor
    (178) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (163) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (149) funcion -> . funcion_sin_parametro
    (150) funcion -> . funcion_parametro
    (151) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices
    (136) slices -> . declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT
    (137) slices -> . declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT
    (138) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT
    (139) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (152) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (153) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (154) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (156) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (141) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (142) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (143) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (144) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (145) declaracion_slices -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

  ! shift/reduce conflict for LLAVERIGHT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PACKAGE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for PRODUCTO resolved as shift
  ! shift/reduce conflict for SCAN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for PARLEFT resolved as shift
    LLAVERIGHT      shift and go to state 345
    RETURN          shift and go to state 346
    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    BOOL            shift and go to state 17
    FUNC            shift and go to state 39
    PARLEFT         shift and go to state 27

  ! LLAVERIGHT      [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! RETURN          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PACKAGE         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VAR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VARIABLE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IF              [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FOR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IMPRIMIR        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! MAP             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PRODUCTO        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SCAN            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SWITCH          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! ENTERO          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FLOTANTE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! BOOL            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FUNC            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PARLEFT         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]

    instrucciones                  shift and go to state 247
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices             shift and go to state 36
    numericos                      shift and go to state 38

state 317

    (158) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .

    $end            reduce using rule 158 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    RETURN          reduce using rule 158 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 158 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    PACKAGE         reduce using rule 158 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    VAR             reduce using rule 158 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    VARIABLE        reduce using rule 158 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    IF              reduce using rule 158 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    FOR             reduce using rule 158 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    IMPRIMIR        reduce using rule 158 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    MAP             reduce using rule 158 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    PRODUCTO        reduce using rule 158 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    SCAN            reduce using rule 158 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    SWITCH          reduce using rule 158 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    ENTERO          reduce using rule 158 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    FLOTANTE        reduce using rule 158 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    BOOL            reduce using rule 158 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    FUNC            reduce using rule 158 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    PARLEFT         reduce using rule 158 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    BREAK           reduce using rule 158 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    CONTINUE        reduce using rule 158 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)


state 318

    (93) contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .

    $end            reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    RETURN          reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    PACKAGE         reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    VAR             reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    VARIABLE        reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    IF              reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    FOR             reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    IMPRIMIR        reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    MAP             reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    PRODUCTO        reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    SCAN            reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    SWITCH          reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    ENTERO          reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    FLOTANTE        reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    BOOL            reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    FUNC            reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    PARLEFT         reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    BREAK           reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    CONTINUE        reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)


state 319

    (94) contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .

    $end            reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    RETURN          reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    PACKAGE         reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    VAR             reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    VARIABLE        reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    IF              reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    FOR             reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    IMPRIMIR        reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    MAP             reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    PRODUCTO        reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    SCAN            reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    SWITCH          reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    ENTERO          reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    FLOTANTE        reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    BOOL            reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    FUNC            reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    PARLEFT         reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    BREAK           reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    CONTINUE        reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)


state 320

    (95) contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .

    $end            reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    RETURN          reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    PACKAGE         reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    VAR             reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    VARIABLE        reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    IF              reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    FOR             reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    IMPRIMIR        reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    MAP             reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    PRODUCTO        reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    SCAN            reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    SWITCH          reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    ENTERO          reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    FLOTANTE        reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    BOOL            reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    FUNC            reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    PARLEFT         reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    BREAK           reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    CONTINUE        reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)


state 321

    (101) contArrayFloat -> contArrayFloat COMA . FLOTANTE

    FLOTANTE        shift and go to state 347


state 322

    (100) contArrayFloat -> FLOTANTE COMA . FLOTANTE

    FLOTANTE        shift and go to state 348


state 323

    (138) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO . PARRIGHT
    (139) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO . COMA ENTERO PARRIGHT

    PARRIGHT        shift and go to state 350
    COMA            shift and go to state 349


state 324

    (42) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .

    $end            reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    RETURN          reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    LLAVERIGHT      reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    PACKAGE         reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    VAR             reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    VARIABLE        reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    IF              reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    FOR             reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    IMPRIMIR        reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    MAP             reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    PRODUCTO        reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    SCAN            reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    SWITCH          reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    ENTERO          reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    FLOTANTE        reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    BOOL            reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    FUNC            reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    PARLEFT         reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    BREAK           reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    CONTINUE        reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)


state 325

    (47) else -> ELSE LLAVELEFT instrucciones . masInstrucciones LLAVERIGHT
    (48) else -> ELSE LLAVELEFT instrucciones . masInstrucciones RETURN VARIABLE LLAVERIGHT
    (14) masInstrucciones -> . masInstrucciones instrucciones
    (15) masInstrucciones -> . masInstrucciones
    (16) masInstrucciones -> .

    LLAVERIGHT      reduce using rule 16 (masInstrucciones -> .)
    RETURN          reduce using rule 16 (masInstrucciones -> .)
    PACKAGE         reduce using rule 16 (masInstrucciones -> .)
    VAR             reduce using rule 16 (masInstrucciones -> .)
    VARIABLE        reduce using rule 16 (masInstrucciones -> .)
    IF              reduce using rule 16 (masInstrucciones -> .)
    FOR             reduce using rule 16 (masInstrucciones -> .)
    IMPRIMIR        reduce using rule 16 (masInstrucciones -> .)
    MAP             reduce using rule 16 (masInstrucciones -> .)
    PRODUCTO        reduce using rule 16 (masInstrucciones -> .)
    SCAN            reduce using rule 16 (masInstrucciones -> .)
    SWITCH          reduce using rule 16 (masInstrucciones -> .)
    ENTERO          reduce using rule 16 (masInstrucciones -> .)
    FLOTANTE        reduce using rule 16 (masInstrucciones -> .)
    BOOL            reduce using rule 16 (masInstrucciones -> .)
    FUNC            reduce using rule 16 (masInstrucciones -> .)
    PARLEFT         reduce using rule 16 (masInstrucciones -> .)

    masInstrucciones               shift and go to state 351

state 326

    (49) else -> ELSE LLAVELEFT RETURN . VARIABLE LLAVERIGHT

    VARIABLE        shift and go to state 352


state 327

    (85) sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones . LLAVERIGHT
    (14) masInstrucciones -> masInstrucciones . instrucciones
    (15) masInstrucciones -> masInstrucciones .
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (173) condiciones -> . factor MAYORQUE factor
    (174) condiciones -> . factor MENORQUE factor
    (175) condiciones -> . factor DIFERENTE factor
    (176) condiciones -> . factor ESIGUAL factor
    (177) condiciones -> . factor MENORIGUAL factor
    (178) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (163) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (149) funcion -> . funcion_sin_parametro
    (150) funcion -> . funcion_parametro
    (151) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices
    (136) slices -> . declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT
    (137) slices -> . declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT
    (138) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT
    (139) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (152) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (153) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (154) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (156) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (141) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (142) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (143) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (144) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (145) declaracion_slices -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

  ! shift/reduce conflict for LLAVERIGHT resolved as shift
  ! shift/reduce conflict for PACKAGE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for PRODUCTO resolved as shift
  ! shift/reduce conflict for SCAN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for PARLEFT resolved as shift
    LLAVERIGHT      shift and go to state 353
    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    BOOL            shift and go to state 17
    FUNC            shift and go to state 39
    PARLEFT         shift and go to state 27

  ! LLAVERIGHT      [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PACKAGE         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VAR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VARIABLE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IF              [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FOR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IMPRIMIR        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! MAP             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PRODUCTO        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SCAN            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SWITCH          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! ENTERO          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FLOTANTE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! BOOL            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FUNC            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PARLEFT         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]

    condiciones                    shift and go to state 4
    instrucciones                  shift and go to state 247
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices             shift and go to state 36
    numericos                      shift and go to state 38

state 328

    (68) datoCadena -> CADENA .

    COMA            reduce using rule 68 (datoCadena -> CADENA .)
    LLAVERIGHT      reduce using rule 68 (datoCadena -> CADENA .)


state 329

    (63) parCadena -> CADENA DOSPUNTOS datoCadena . masCadena
    (64) parCadena -> CADENA DOSPUNTOS datoCadena .
    (65) masCadena -> . masCadena COMA CADENA DOSPUNTOS datoCadena
    (66) masCadena -> . COMA CADENA DOSPUNTOS datoCadena

    LLAVERIGHT      reduce using rule 64 (parCadena -> CADENA DOSPUNTOS datoCadena .)
    COMA            shift and go to state 355

    masCadena                      shift and go to state 354

state 330

    (67) datoCadena -> VARIABLE .

    COMA            reduce using rule 67 (datoCadena -> VARIABLE .)
    LLAVERIGHT      reduce using rule 67 (datoCadena -> VARIABLE .)


state 331

    (75) parBoolean -> CADENA DOSPUNTOS datoBoolean . masBoolean
    (76) parBoolean -> CADENA DOSPUNTOS datoBoolean .
    (77) masBoolean -> . masBoolean COMA CADENA DOSPUNTOS datoBoolean
    (78) masBoolean -> . COMA CADENA DOSPUNTOS datoBoolean

    LLAVERIGHT      reduce using rule 76 (parBoolean -> CADENA DOSPUNTOS datoBoolean .)
    COMA            shift and go to state 357

    masBoolean                     shift and go to state 356

state 332

    (79) datoBoolean -> condicion .

    COMA            reduce using rule 79 (datoBoolean -> condicion .)
    LLAVERIGHT      reduce using rule 79 (datoBoolean -> condicion .)


state 333

    (80) datoBoolean -> TRUE .

    COMA            reduce using rule 80 (datoBoolean -> TRUE .)
    LLAVERIGHT      reduce using rule 80 (datoBoolean -> TRUE .)


state 334

    (81) datoBoolean -> FALSE .

    COMA            reduce using rule 81 (datoBoolean -> FALSE .)
    LLAVERIGHT      reduce using rule 81 (datoBoolean -> FALSE .)


state 335

    (57) parEntero -> CADENA DOSPUNTOS datoEntero . masEntero
    (58) parEntero -> CADENA DOSPUNTOS datoEntero .
    (59) masEntero -> . masEntero COMA CADENA DOSPUNTOS datoEntero
    (60) masEntero -> . COMA CADENA DOSPUNTOS datoEntero

    LLAVERIGHT      reduce using rule 58 (parEntero -> CADENA DOSPUNTOS datoEntero .)
    COMA            shift and go to state 359

    masEntero                      shift and go to state 358

state 336

    (61) datoEntero -> VARIABLE .

    COMA            reduce using rule 61 (datoEntero -> VARIABLE .)
    LLAVERIGHT      reduce using rule 61 (datoEntero -> VARIABLE .)


state 337

    (62) datoEntero -> expresion .

    COMA            reduce using rule 62 (datoEntero -> expresion .)
    LLAVERIGHT      reduce using rule 62 (datoEntero -> expresion .)


state 338

    (69) parFlotante -> CADENA DOSPUNTOS datoFlotante . masFlotante
    (70) parFlotante -> CADENA DOSPUNTOS datoFlotante .
    (71) masFlotante -> . masFlotante COMA CADENA DOSPUNTOS datoFlotante
    (72) masFlotante -> . COMA CADENA DOSPUNTOS datoFlotante

    LLAVERIGHT      reduce using rule 70 (parFlotante -> CADENA DOSPUNTOS datoFlotante .)
    COMA            shift and go to state 361

    masFlotante                    shift and go to state 360

state 339

    (73) datoFlotante -> VARIABLE .

    COMA            reduce using rule 73 (datoFlotante -> VARIABLE .)
    LLAVERIGHT      reduce using rule 73 (datoFlotante -> VARIABLE .)


state 340

    (74) datoFlotante -> expresion .

    COMA            reduce using rule 74 (datoFlotante -> expresion .)
    LLAVERIGHT      reduce using rule 74 (datoFlotante -> expresion .)


state 341

    (164) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK .
    (166) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK . bloque_switch
    (164) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK
    (165) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones CONTINUE
    (166) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK bloque_switch
    (167) bloque_switch -> . switch_default
    (171) switch_default -> . DEFAULT DOSPUNTOS instrucciones masInstrucciones BREAK
    (172) switch_default -> . DEFAULT DOSPUNTOS instrucciones masInstrucciones CONTINUE

    LLAVERIGHT      reduce using rule 164 (bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK .)
    CASE            shift and go to state 184
    DEFAULT         shift and go to state 186

    bloque_switch                  shift and go to state 362
    switch_default                 shift and go to state 185

state 342

    (165) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones CONTINUE .

    LLAVERIGHT      reduce using rule 165 (bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones CONTINUE .)


state 343

    (155) funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE . LLAVERIGHT

    LLAVERIGHT      shift and go to state 363


state 344

    (154) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .

    $end            reduce using rule 154 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    RETURN          reduce using rule 154 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 154 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    PACKAGE         reduce using rule 154 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    VAR             reduce using rule 154 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    VARIABLE        reduce using rule 154 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    IF              reduce using rule 154 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    FOR             reduce using rule 154 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    IMPRIMIR        reduce using rule 154 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    MAP             reduce using rule 154 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    PRODUCTO        reduce using rule 154 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    SCAN            reduce using rule 154 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    SWITCH          reduce using rule 154 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    ENTERO          reduce using rule 154 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    FLOTANTE        reduce using rule 154 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    BOOL            reduce using rule 154 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    FUNC            reduce using rule 154 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    PARLEFT         reduce using rule 154 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    BREAK           reduce using rule 154 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    CONTINUE        reduce using rule 154 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)


state 345

    (156) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .

    $end            reduce using rule 156 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    RETURN          reduce using rule 156 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 156 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PACKAGE         reduce using rule 156 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    VAR             reduce using rule 156 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    VARIABLE        reduce using rule 156 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    IF              reduce using rule 156 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FOR             reduce using rule 156 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    IMPRIMIR        reduce using rule 156 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    MAP             reduce using rule 156 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PRODUCTO        reduce using rule 156 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    SCAN            reduce using rule 156 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    SWITCH          reduce using rule 156 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    ENTERO          reduce using rule 156 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FLOTANTE        reduce using rule 156 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    BOOL            reduce using rule 156 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FUNC            reduce using rule 156 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PARLEFT         reduce using rule 156 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    BREAK           reduce using rule 156 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    CONTINUE        reduce using rule 156 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)


state 346

    (157) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN . LLAVERIGHT

    LLAVERIGHT      shift and go to state 364


state 347

    (101) contArrayFloat -> contArrayFloat COMA FLOTANTE .

    LLAVERIGHT      reduce using rule 101 (contArrayFloat -> contArrayFloat COMA FLOTANTE .)
    COMA            reduce using rule 101 (contArrayFloat -> contArrayFloat COMA FLOTANTE .)


state 348

    (100) contArrayFloat -> FLOTANTE COMA FLOTANTE .

    LLAVERIGHT      reduce using rule 100 (contArrayFloat -> FLOTANTE COMA FLOTANTE .)
    COMA            reduce using rule 100 (contArrayFloat -> FLOTANTE COMA FLOTANTE .)


state 349

    (139) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA . ENTERO PARRIGHT

    ENTERO          shift and go to state 365


state 350

    (138) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT .

    $end            reduce using rule 138 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT .)
    RETURN          reduce using rule 138 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT .)
    LLAVERIGHT      reduce using rule 138 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT .)
    PACKAGE         reduce using rule 138 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT .)
    VAR             reduce using rule 138 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT .)
    VARIABLE        reduce using rule 138 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT .)
    IF              reduce using rule 138 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT .)
    FOR             reduce using rule 138 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT .)
    IMPRIMIR        reduce using rule 138 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT .)
    MAP             reduce using rule 138 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT .)
    PRODUCTO        reduce using rule 138 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT .)
    SCAN            reduce using rule 138 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT .)
    SWITCH          reduce using rule 138 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT .)
    ENTERO          reduce using rule 138 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT .)
    FLOTANTE        reduce using rule 138 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT .)
    BOOL            reduce using rule 138 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT .)
    FUNC            reduce using rule 138 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT .)
    PARLEFT         reduce using rule 138 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT .)
    BREAK           reduce using rule 138 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT .)
    CONTINUE        reduce using rule 138 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT .)


state 351

    (47) else -> ELSE LLAVELEFT instrucciones masInstrucciones . LLAVERIGHT
    (48) else -> ELSE LLAVELEFT instrucciones masInstrucciones . RETURN VARIABLE LLAVERIGHT
    (14) masInstrucciones -> masInstrucciones . instrucciones
    (15) masInstrucciones -> masInstrucciones .
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (173) condiciones -> . factor MAYORQUE factor
    (174) condiciones -> . factor MENORQUE factor
    (175) condiciones -> . factor DIFERENTE factor
    (176) condiciones -> . factor ESIGUAL factor
    (177) condiciones -> . factor MENORIGUAL factor
    (178) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (163) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (149) funcion -> . funcion_sin_parametro
    (150) funcion -> . funcion_parametro
    (151) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices
    (136) slices -> . declaracion_slices LLAVELEFT contArrayEnteros LLAVERIGHT
    (137) slices -> . declaracion_slices LLAVELEFT contArrayCadenas LLAVERIGHT
    (138) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO PARRIGHT
    (139) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (184) factor -> . BOOL
    (152) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (153) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (154) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (156) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (157) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (158) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (155) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (141) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (142) declaracion_slices -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (143) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT typeData
    (144) declaracion_slices -> . VARIABLE IGUAL CORCHLEFT CORCHRIGHT typeData
    (145) declaracion_slices -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT typeData
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

  ! shift/reduce conflict for LLAVERIGHT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PACKAGE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for PRODUCTO resolved as shift
  ! shift/reduce conflict for SCAN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for PARLEFT resolved as shift
    LLAVERIGHT      shift and go to state 366
    RETURN          shift and go to state 367
    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    BOOL            shift and go to state 17
    FUNC            shift and go to state 39
    PARLEFT         shift and go to state 27

  ! LLAVERIGHT      [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! RETURN          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PACKAGE         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VAR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VARIABLE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IF              [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FOR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IMPRIMIR        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! MAP             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PRODUCTO        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SCAN            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SWITCH          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! ENTERO          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FLOTANTE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! BOOL            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FUNC            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PARLEFT         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]

    instrucciones                  shift and go to state 247
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices             shift and go to state 36
    numericos                      shift and go to state 38

state 352

    (49) else -> ELSE LLAVELEFT RETURN VARIABLE . LLAVERIGHT

    LLAVERIGHT      shift and go to state 368


state 353

    (85) sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .

    $end            reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    RETURN          reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PACKAGE         reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    VAR             reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    VARIABLE        reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    IF              reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FOR             reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    IMPRIMIR        reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    MAP             reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PRODUCTO        reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    SCAN            reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    SWITCH          reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    ENTERO          reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FLOTANTE        reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    BOOL            reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FUNC            reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PARLEFT         reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    BREAK           reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    CONTINUE        reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)


state 354

    (63) parCadena -> CADENA DOSPUNTOS datoCadena masCadena .
    (65) masCadena -> masCadena . COMA CADENA DOSPUNTOS datoCadena

    LLAVERIGHT      reduce using rule 63 (parCadena -> CADENA DOSPUNTOS datoCadena masCadena .)
    COMA            shift and go to state 369


state 355

    (66) masCadena -> COMA . CADENA DOSPUNTOS datoCadena

    CADENA          shift and go to state 370


state 356

    (75) parBoolean -> CADENA DOSPUNTOS datoBoolean masBoolean .
    (77) masBoolean -> masBoolean . COMA CADENA DOSPUNTOS datoBoolean

    LLAVERIGHT      reduce using rule 75 (parBoolean -> CADENA DOSPUNTOS datoBoolean masBoolean .)
    COMA            shift and go to state 371


state 357

    (78) masBoolean -> COMA . CADENA DOSPUNTOS datoBoolean

    CADENA          shift and go to state 372


state 358

    (57) parEntero -> CADENA DOSPUNTOS datoEntero masEntero .
    (59) masEntero -> masEntero . COMA CADENA DOSPUNTOS datoEntero

    LLAVERIGHT      reduce using rule 57 (parEntero -> CADENA DOSPUNTOS datoEntero masEntero .)
    COMA            shift and go to state 373


state 359

    (60) masEntero -> COMA . CADENA DOSPUNTOS datoEntero

    CADENA          shift and go to state 374


state 360

    (69) parFlotante -> CADENA DOSPUNTOS datoFlotante masFlotante .
    (71) masFlotante -> masFlotante . COMA CADENA DOSPUNTOS datoFlotante

    LLAVERIGHT      reduce using rule 69 (parFlotante -> CADENA DOSPUNTOS datoFlotante masFlotante .)
    COMA            shift and go to state 375


state 361

    (72) masFlotante -> COMA . CADENA DOSPUNTOS datoFlotante

    CADENA          shift and go to state 376


state 362

    (166) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK bloque_switch .

    LLAVERIGHT      reduce using rule 166 (bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK bloque_switch .)


state 363

    (155) funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .

    $end            reduce using rule 155 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    RETURN          reduce using rule 155 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 155 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    PACKAGE         reduce using rule 155 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    VAR             reduce using rule 155 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    VARIABLE        reduce using rule 155 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    IF              reduce using rule 155 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    FOR             reduce using rule 155 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    IMPRIMIR        reduce using rule 155 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    MAP             reduce using rule 155 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    PRODUCTO        reduce using rule 155 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    SCAN            reduce using rule 155 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    SWITCH          reduce using rule 155 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    ENTERO          reduce using rule 155 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    FLOTANTE        reduce using rule 155 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    BOOL            reduce using rule 155 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    FUNC            reduce using rule 155 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    PARLEFT         reduce using rule 155 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    BREAK           reduce using rule 155 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    CONTINUE        reduce using rule 155 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)


state 364

    (157) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .

    $end            reduce using rule 157 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    RETURN          reduce using rule 157 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 157 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    PACKAGE         reduce using rule 157 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    VAR             reduce using rule 157 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    VARIABLE        reduce using rule 157 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    IF              reduce using rule 157 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    FOR             reduce using rule 157 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    IMPRIMIR        reduce using rule 157 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    MAP             reduce using rule 157 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    PRODUCTO        reduce using rule 157 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    SCAN            reduce using rule 157 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    SWITCH          reduce using rule 157 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    ENTERO          reduce using rule 157 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    FLOTANTE        reduce using rule 157 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    BOOL            reduce using rule 157 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    FUNC            reduce using rule 157 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    PARLEFT         reduce using rule 157 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    BREAK           reduce using rule 157 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    CONTINUE        reduce using rule 157 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)


state 365

    (139) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO . PARRIGHT

    PARRIGHT        shift and go to state 377


state 366

    (47) else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .

    $end            reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    RETURN          reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PACKAGE         reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    VAR             reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    VARIABLE        reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    IF              reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FOR             reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    IMPRIMIR        reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    MAP             reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PRODUCTO        reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    SCAN            reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    SWITCH          reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    ENTERO          reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FLOTANTE        reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    BOOL            reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FUNC            reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PARLEFT         reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    BREAK           reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    CONTINUE        reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)


state 367

    (48) else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN . VARIABLE LLAVERIGHT

    VARIABLE        shift and go to state 378


state 368

    (49) else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .

    $end            reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    RETURN          reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    PACKAGE         reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    VAR             reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    VARIABLE        reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    IF              reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    FOR             reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    IMPRIMIR        reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    MAP             reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    PRODUCTO        reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    SCAN            reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    SWITCH          reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    ENTERO          reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    FLOTANTE        reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    BOOL            reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    FUNC            reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    PARLEFT         reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    BREAK           reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    CONTINUE        reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)


state 369

    (65) masCadena -> masCadena COMA . CADENA DOSPUNTOS datoCadena

    CADENA          shift and go to state 379


state 370

    (66) masCadena -> COMA CADENA . DOSPUNTOS datoCadena

    DOSPUNTOS       shift and go to state 380


state 371

    (77) masBoolean -> masBoolean COMA . CADENA DOSPUNTOS datoBoolean

    CADENA          shift and go to state 381


state 372

    (78) masBoolean -> COMA CADENA . DOSPUNTOS datoBoolean

    DOSPUNTOS       shift and go to state 382


state 373

    (59) masEntero -> masEntero COMA . CADENA DOSPUNTOS datoEntero

    CADENA          shift and go to state 383


state 374

    (60) masEntero -> COMA CADENA . DOSPUNTOS datoEntero

    DOSPUNTOS       shift and go to state 384


state 375

    (71) masFlotante -> masFlotante COMA . CADENA DOSPUNTOS datoFlotante

    CADENA          shift and go to state 385


state 376

    (72) masFlotante -> COMA CADENA . DOSPUNTOS datoFlotante

    DOSPUNTOS       shift and go to state 386


state 377

    (139) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT .

    $end            reduce using rule 139 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT .)
    RETURN          reduce using rule 139 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT .)
    LLAVERIGHT      reduce using rule 139 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT .)
    PACKAGE         reduce using rule 139 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT .)
    VAR             reduce using rule 139 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT .)
    VARIABLE        reduce using rule 139 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT .)
    IF              reduce using rule 139 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT .)
    FOR             reduce using rule 139 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT .)
    IMPRIMIR        reduce using rule 139 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT .)
    MAP             reduce using rule 139 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT .)
    PRODUCTO        reduce using rule 139 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT .)
    SCAN            reduce using rule 139 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT .)
    SWITCH          reduce using rule 139 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT .)
    ENTERO          reduce using rule 139 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT .)
    FLOTANTE        reduce using rule 139 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT .)
    BOOL            reduce using rule 139 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT .)
    FUNC            reduce using rule 139 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT .)
    PARLEFT         reduce using rule 139 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT .)
    BREAK           reduce using rule 139 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT .)
    CONTINUE        reduce using rule 139 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT typeData COMA ENTERO COMA ENTERO PARRIGHT .)


state 378

    (48) else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE . LLAVERIGHT

    LLAVERIGHT      shift and go to state 387


state 379

    (65) masCadena -> masCadena COMA CADENA . DOSPUNTOS datoCadena

    DOSPUNTOS       shift and go to state 388


state 380

    (66) masCadena -> COMA CADENA DOSPUNTOS . datoCadena
    (67) datoCadena -> . VARIABLE
    (68) datoCadena -> . CADENA

    VARIABLE        shift and go to state 330
    CADENA          shift and go to state 328

    datoCadena                     shift and go to state 389

state 381

    (77) masBoolean -> masBoolean COMA CADENA . DOSPUNTOS datoBoolean

    DOSPUNTOS       shift and go to state 390


state 382

    (78) masBoolean -> COMA CADENA DOSPUNTOS . datoBoolean
    (79) datoBoolean -> . condicion
    (80) datoBoolean -> . TRUE
    (81) datoBoolean -> . FALSE
    (182) condicion -> . AND
    (183) condicion -> . OR

    TRUE            shift and go to state 333
    FALSE           shift and go to state 334
    AND             shift and go to state 102
    OR              shift and go to state 103

    datoBoolean                    shift and go to state 391
    condicion                      shift and go to state 332

state 383

    (59) masEntero -> masEntero COMA CADENA . DOSPUNTOS datoEntero

    DOSPUNTOS       shift and go to state 392


state 384

    (60) masEntero -> COMA CADENA DOSPUNTOS . datoEntero
    (61) datoEntero -> . VARIABLE
    (62) datoEntero -> . expresion
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 336
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    PARLEFT         shift and go to state 27

    datoEntero                     shift and go to state 393
    expresion                      shift and go to state 337
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 73

state 385

    (71) masFlotante -> masFlotante COMA CADENA . DOSPUNTOS datoFlotante

    DOSPUNTOS       shift and go to state 394


state 386

    (72) masFlotante -> COMA CADENA DOSPUNTOS . datoFlotante
    (73) datoFlotante -> . VARIABLE
    (74) datoFlotante -> . expresion
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 339
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    PARLEFT         shift and go to state 27

    datoFlotante                   shift and go to state 395
    expresion                      shift and go to state 340
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 73

state 387

    (48) else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .

    $end            reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    RETURN          reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    PACKAGE         reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    VAR             reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    VARIABLE        reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    IF              reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    FOR             reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    IMPRIMIR        reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    MAP             reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    PRODUCTO        reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    SCAN            reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    SWITCH          reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    ENTERO          reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    FLOTANTE        reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    BOOL            reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    FUNC            reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    PARLEFT         reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    BREAK           reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    CONTINUE        reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)


state 388

    (65) masCadena -> masCadena COMA CADENA DOSPUNTOS . datoCadena
    (67) datoCadena -> . VARIABLE
    (68) datoCadena -> . CADENA

    VARIABLE        shift and go to state 330
    CADENA          shift and go to state 328

    datoCadena                     shift and go to state 396

state 389

    (66) masCadena -> COMA CADENA DOSPUNTOS datoCadena .

    COMA            reduce using rule 66 (masCadena -> COMA CADENA DOSPUNTOS datoCadena .)
    LLAVERIGHT      reduce using rule 66 (masCadena -> COMA CADENA DOSPUNTOS datoCadena .)


state 390

    (77) masBoolean -> masBoolean COMA CADENA DOSPUNTOS . datoBoolean
    (79) datoBoolean -> . condicion
    (80) datoBoolean -> . TRUE
    (81) datoBoolean -> . FALSE
    (182) condicion -> . AND
    (183) condicion -> . OR

    TRUE            shift and go to state 333
    FALSE           shift and go to state 334
    AND             shift and go to state 102
    OR              shift and go to state 103

    datoBoolean                    shift and go to state 397
    condicion                      shift and go to state 332

state 391

    (78) masBoolean -> COMA CADENA DOSPUNTOS datoBoolean .

    COMA            reduce using rule 78 (masBoolean -> COMA CADENA DOSPUNTOS datoBoolean .)
    LLAVERIGHT      reduce using rule 78 (masBoolean -> COMA CADENA DOSPUNTOS datoBoolean .)


state 392

    (59) masEntero -> masEntero COMA CADENA DOSPUNTOS . datoEntero
    (61) datoEntero -> . VARIABLE
    (62) datoEntero -> . expresion
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 336
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    PARLEFT         shift and go to state 27

    datoEntero                     shift and go to state 398
    expresion                      shift and go to state 337
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 73

state 393

    (60) masEntero -> COMA CADENA DOSPUNTOS datoEntero .

    COMA            reduce using rule 60 (masEntero -> COMA CADENA DOSPUNTOS datoEntero .)
    LLAVERIGHT      reduce using rule 60 (masEntero -> COMA CADENA DOSPUNTOS datoEntero .)


state 394

    (71) masFlotante -> masFlotante COMA CADENA DOSPUNTOS . datoFlotante
    (73) datoFlotante -> . VARIABLE
    (74) datoFlotante -> . expresion
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 339
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 37
    PARLEFT         shift and go to state 27

    datoFlotante                   shift and go to state 399
    expresion                      shift and go to state 340
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 73

state 395

    (72) masFlotante -> COMA CADENA DOSPUNTOS datoFlotante .

    COMA            reduce using rule 72 (masFlotante -> COMA CADENA DOSPUNTOS datoFlotante .)
    LLAVERIGHT      reduce using rule 72 (masFlotante -> COMA CADENA DOSPUNTOS datoFlotante .)


state 396

    (65) masCadena -> masCadena COMA CADENA DOSPUNTOS datoCadena .

    COMA            reduce using rule 65 (masCadena -> masCadena COMA CADENA DOSPUNTOS datoCadena .)
    LLAVERIGHT      reduce using rule 65 (masCadena -> masCadena COMA CADENA DOSPUNTOS datoCadena .)


state 397

    (77) masBoolean -> masBoolean COMA CADENA DOSPUNTOS datoBoolean .

    COMA            reduce using rule 77 (masBoolean -> masBoolean COMA CADENA DOSPUNTOS datoBoolean .)
    LLAVERIGHT      reduce using rule 77 (masBoolean -> masBoolean COMA CADENA DOSPUNTOS datoBoolean .)


state 398

    (59) masEntero -> masEntero COMA CADENA DOSPUNTOS datoEntero .

    COMA            reduce using rule 59 (masEntero -> masEntero COMA CADENA DOSPUNTOS datoEntero .)
    LLAVERIGHT      reduce using rule 59 (masEntero -> masEntero COMA CADENA DOSPUNTOS datoEntero .)


state 399

    (71) masFlotante -> masFlotante COMA CADENA DOSPUNTOS datoFlotante .

    COMA            reduce using rule 71 (masFlotante -> masFlotante COMA CADENA DOSPUNTOS datoFlotante .)
    LLAVERIGHT      reduce using rule 71 (masFlotante -> masFlotante COMA CADENA DOSPUNTOS datoFlotante .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRODUCTO in state 18 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 19 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 31 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 37 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 206 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 208 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 212 resolved as shift
WARNING: shift/reduce conflict for LLAVERIGHT in state 212 resolved as shift
WARNING: shift/reduce conflict for PACKAGE in state 212 resolved as shift
WARNING: shift/reduce conflict for VAR in state 212 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 212 resolved as shift
WARNING: shift/reduce conflict for IF in state 212 resolved as shift
WARNING: shift/reduce conflict for FOR in state 212 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 212 resolved as shift
WARNING: shift/reduce conflict for MAP in state 212 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 212 resolved as shift
WARNING: shift/reduce conflict for SCAN in state 212 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 212 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 212 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 212 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 212 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 212 resolved as shift
WARNING: shift/reduce conflict for PARLEFT in state 212 resolved as shift
WARNING: shift/reduce conflict for LLAVELEFT in state 219 resolved as shift
WARNING: shift/reduce conflict for LLAVELEFT in state 222 resolved as shift
WARNING: shift/reduce conflict for LLAVELEFT in state 223 resolved as shift
WARNING: shift/reduce conflict for LLAVELEFT in state 224 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 288 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 288 resolved as shift
WARNING: shift/reduce conflict for PACKAGE in state 288 resolved as shift
WARNING: shift/reduce conflict for VAR in state 288 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 288 resolved as shift
WARNING: shift/reduce conflict for IF in state 288 resolved as shift
WARNING: shift/reduce conflict for FOR in state 288 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 288 resolved as shift
WARNING: shift/reduce conflict for MAP in state 288 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 288 resolved as shift
WARNING: shift/reduce conflict for SCAN in state 288 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 288 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 288 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 288 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 288 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 288 resolved as shift
WARNING: shift/reduce conflict for PARLEFT in state 288 resolved as shift
WARNING: shift/reduce conflict for LLAVERIGHT in state 289 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 289 resolved as shift
WARNING: shift/reduce conflict for PACKAGE in state 289 resolved as shift
WARNING: shift/reduce conflict for VAR in state 289 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 289 resolved as shift
WARNING: shift/reduce conflict for IF in state 289 resolved as shift
WARNING: shift/reduce conflict for FOR in state 289 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 289 resolved as shift
WARNING: shift/reduce conflict for MAP in state 289 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 289 resolved as shift
WARNING: shift/reduce conflict for SCAN in state 289 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 289 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 289 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 289 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 289 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 289 resolved as shift
WARNING: shift/reduce conflict for PARLEFT in state 289 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 311 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 311 resolved as shift
WARNING: shift/reduce conflict for PACKAGE in state 311 resolved as shift
WARNING: shift/reduce conflict for VAR in state 311 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 311 resolved as shift
WARNING: shift/reduce conflict for IF in state 311 resolved as shift
WARNING: shift/reduce conflict for FOR in state 311 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 311 resolved as shift
WARNING: shift/reduce conflict for MAP in state 311 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 311 resolved as shift
WARNING: shift/reduce conflict for SCAN in state 311 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 311 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 311 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 311 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 311 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 311 resolved as shift
WARNING: shift/reduce conflict for PARLEFT in state 311 resolved as shift
WARNING: shift/reduce conflict for LLAVERIGHT in state 316 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 316 resolved as shift
WARNING: shift/reduce conflict for PACKAGE in state 316 resolved as shift
WARNING: shift/reduce conflict for VAR in state 316 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 316 resolved as shift
WARNING: shift/reduce conflict for IF in state 316 resolved as shift
WARNING: shift/reduce conflict for FOR in state 316 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 316 resolved as shift
WARNING: shift/reduce conflict for MAP in state 316 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 316 resolved as shift
WARNING: shift/reduce conflict for SCAN in state 316 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 316 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 316 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 316 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 316 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 316 resolved as shift
WARNING: shift/reduce conflict for PARLEFT in state 316 resolved as shift
WARNING: shift/reduce conflict for LLAVERIGHT in state 327 resolved as shift
WARNING: shift/reduce conflict for PACKAGE in state 327 resolved as shift
WARNING: shift/reduce conflict for VAR in state 327 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 327 resolved as shift
WARNING: shift/reduce conflict for IF in state 327 resolved as shift
WARNING: shift/reduce conflict for FOR in state 327 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 327 resolved as shift
WARNING: shift/reduce conflict for MAP in state 327 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 327 resolved as shift
WARNING: shift/reduce conflict for SCAN in state 327 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 327 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 327 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 327 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 327 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 327 resolved as shift
WARNING: shift/reduce conflict for PARLEFT in state 327 resolved as shift
WARNING: shift/reduce conflict for LLAVERIGHT in state 351 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 351 resolved as shift
WARNING: shift/reduce conflict for PACKAGE in state 351 resolved as shift
WARNING: shift/reduce conflict for VAR in state 351 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 351 resolved as shift
WARNING: shift/reduce conflict for IF in state 351 resolved as shift
WARNING: shift/reduce conflict for FOR in state 351 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 351 resolved as shift
WARNING: shift/reduce conflict for MAP in state 351 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 351 resolved as shift
WARNING: shift/reduce conflict for SCAN in state 351 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 351 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 351 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 351 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 351 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 351 resolved as shift
WARNING: shift/reduce conflict for PARLEFT in state 351 resolved as shift
