Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> instrucciones
Rule 1     instrucciones -> asignacion
Rule 2     instrucciones -> expresion
Rule 3     instrucciones -> condiciones
Rule 4     instrucciones -> sentenciaIf
Rule 5     instrucciones -> sentenciaFor
Rule 6     instrucciones -> print
Rule 7     instrucciones -> mapa
Rule 8     instrucciones -> puntero
Rule 9     instrucciones -> lectura
Rule 10    instrucciones -> array
Rule 11    instrucciones -> switch
Rule 12    instrucciones -> funcion
Rule 13    instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion
Rule 14    masInstrucciones -> masInstrucciones instrucciones
Rule 15    masInstrucciones -> masInstrucciones
Rule 16    masInstrucciones -> <empty>
Rule 17    asignacion -> VAR VARIABLE BOOL IGUAL booleano
Rule 18    asignacion -> VAR VARIABLE INT IGUAL expresionInt
Rule 19    asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat
Rule 20    asignacion -> VAR VARIABLE STRING IGUAL CADENA
Rule 21    asignacion -> VAR VARIABLE puntero IGUAL refer
Rule 22    asignacion -> VAR VARIABLE puntero
Rule 23    asignacion -> slices
Rule 24    asignacion -> VARIABLE DECLARADOR valor
Rule 25    asignacion -> VARIABLE IGUAL valor
Rule 26    asignacion -> VARIABLE MASIGUAL acumular
Rule 27    asignacion -> VARIABLE MENOSIGUAL expresion
Rule 28    asignacion -> derefer IGUAL valor
Rule 29    booleano -> condicion
Rule 30    booleano -> TRUE
Rule 31    booleano -> FALSE
Rule 32    valor -> booleano
Rule 33    valor -> expresion
Rule 34    valor -> CADENA
Rule 35    valor -> VARIABLE
Rule 36    valor -> mapa
Rule 37    valor -> refer
Rule 38    acumular -> expresion
Rule 39    acumular -> CADENA
Rule 40    acumular -> VARIABLE
Rule 41    sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
Rule 42    sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
Rule 43    sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
Rule 44    sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
Rule 45    sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
Rule 46    sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
Rule 47    else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
Rule 48    else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
Rule 49    else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT
Rule 50    else -> ELSE sentenciaIf
Rule 51    mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
Rule 52    mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa
Rule 53    contMapa -> INT LLAVELEFT parEntero LLAVERIGHT
Rule 54    contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT
Rule 55    contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT
Rule 56    contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT
Rule 57    parEntero -> CADENA DOSPUNTOS datoEntero masEntero
Rule 58    parEntero -> CADENA DOSPUNTOS datoEntero
Rule 59    masEntero -> masEntero COMA CADENA DOSPUNTOS datoEntero
Rule 60    masEntero -> COMA CADENA DOSPUNTOS datoEntero
Rule 61    datoEntero -> VARIABLE
Rule 62    datoEntero -> expresion
Rule 63    parCadena -> CADENA DOSPUNTOS datoCadena masCadena
Rule 64    parCadena -> CADENA DOSPUNTOS datoCadena
Rule 65    masCadena -> masCadena COMA CADENA DOSPUNTOS datoCadena
Rule 66    masCadena -> COMA CADENA DOSPUNTOS datoCadena
Rule 67    datoCadena -> VARIABLE
Rule 68    datoCadena -> CADENA
Rule 69    parFlotante -> CADENA DOSPUNTOS datoFlotante masFlotante
Rule 70    parFlotante -> CADENA DOSPUNTOS datoFlotante
Rule 71    masFlotante -> masFlotante COMA CADENA DOSPUNTOS datoFlotante
Rule 72    masFlotante -> COMA CADENA DOSPUNTOS datoFlotante
Rule 73    datoFlotante -> VARIABLE
Rule 74    datoFlotante -> expresion
Rule 75    parBoolean -> CADENA DOSPUNTOS datoBoolean masBoolean
Rule 76    parBoolean -> CADENA DOSPUNTOS datoBoolean
Rule 77    masBoolean -> masBoolean COMA CADENA DOSPUNTOS datoBoolean
Rule 78    masBoolean -> COMA CADENA DOSPUNTOS datoBoolean
Rule 79    datoBoolean -> condicion
Rule 80    datoBoolean -> TRUE
Rule 81    datoBoolean -> FALSE
Rule 82    puntero -> PRODUCTO typeData
Rule 83    refer -> AMPERSAND VARIABLE
Rule 84    derefer -> PRODUCTO VARIABLE
Rule 85    sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
Rule 86    inicio -> VARIABLE DECLARADOR ENTERO
Rule 87    incrementa -> VARIABLE INCREMENTO
Rule 88    typeData -> BOOL
Rule 89    typeData -> INT
Rule 90    typeData -> FLOAT
Rule 91    typeData -> STRING
Rule 92    array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
Rule 93    contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT
Rule 94    contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT
Rule 95    contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT
Rule 96    contArrayEnteros -> ENTERO COMA ENTERO
Rule 97    contArrayEnteros -> contArrayEnteros COMA ENTERO
Rule 98    contArrayCadenas -> CADENA COMA CADENA
Rule 99    contArrayCadenas -> contArrayCadenas COMA CADENA
Rule 100   contArrayFloat -> FLOTANTE COMA FLOTANTE
Rule 101   contArrayFloat -> contArrayFloat COMA FLOTANTE
Rule 102   method -> methodArray
Rule 103   methodArray -> namemetodoArr PARLEFT VARIABLE PARRIGHT
Rule 104   namemetodoArr -> LEN
Rule 105   namemetodoArr -> CAP
Rule 106   print -> IMPRIMIR PARLEFT contPrint PARRIGHT
Rule 107   contPrint -> contenido masCont
Rule 108   contPrint -> contenido
Rule 109   masCont -> masCont COMA contenido
Rule 110   masCont -> COMA contenido
Rule 111   contenido -> CADENA
Rule 112   contenido -> VARIABLE
Rule 113   contenido -> method
Rule 114   contenido -> <empty>
Rule 115   lectura -> SCAN PARLEFT contScan PARRIGHT
Rule 116   contScan -> AMPERSAND VARIABLE
Rule 117   expresion -> expresionInt
Rule 118   expresion -> expresionFloat
Rule 119   expresionInt -> expresionInt operadorArit ENTERO
Rule 120   expresionInt -> ENTERO operadorArit ENTERO
Rule 121   expresionFloat -> expresionFloat operadorArit FLOTANTE
Rule 122   expresionFloat -> FLOTANTE operadorArit FLOTANTE
Rule 123   operadorArit -> SUMA
Rule 124   operadorArit -> RESTA
Rule 125   operadorArit -> PRODUCTO
Rule 126   operadorArit -> DIVISION
Rule 127   operadorArit -> MODULO
Rule 128   expresion -> term
Rule 129   term -> numericos
Rule 130   factor -> numericos
Rule 131   factor -> VARIABLE
Rule 132   numericos -> ENTERO
Rule 133   numericos -> FLOTANTE
Rule 134   numericos -> PARLEFT expresion PARRIGHT
Rule 135   slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT
Rule 136   slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT
Rule 137   slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
Rule 138   slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
Rule 139   slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
Rule 140   slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
Rule 141   slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
Rule 142   slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
Rule 143   slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
Rule 144   slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
Rule 145   slices -> declaracion_slices_enteros
Rule 146   slices -> declaracion_slices_strings
Rule 147   slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
Rule 148   slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
Rule 149   slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
Rule 150   slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
Rule 151   slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
Rule 152   slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
Rule 153   slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
Rule 154   slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
Rule 155   metodos_slices -> MAKE
Rule 156   declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
Rule 157   declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT
Rule 158   declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT
Rule 159   declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT
Rule 160   declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
Rule 161   declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT
Rule 162   declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING
Rule 163   declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
Rule 164   declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
Rule 165   declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING
Rule 166   comparacion -> condiciones
Rule 167   comparacion -> NEGACION PARLEFT condiciones PARRIGHT
Rule 168   comparacion -> PARLEFT condiciones PARRIGHT
Rule 169   funcion -> funcion_sin_parametro
Rule 170   funcion -> funcion_parametro
Rule 171   funcion -> funcion_sin_parametro_return
Rule 172   funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
Rule 173   funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
Rule 174   funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
Rule 175   funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
Rule 176   funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
Rule 177   funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
Rule 178   funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
Rule 179   parametros -> VARIABLE
Rule 180   parametros -> VARIABLE COMA parametros
Rule 181   parametros -> typeData VARIABLE
Rule 182   parametros -> typeData VARIABLE COMA parametros
Rule 183   switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
Rule 184   bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK
Rule 185   bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones
Rule 186   bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones BREAK
Rule 187   bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones
Rule 188   bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones CONTINUE
Rule 189   bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones CONTINUE
Rule 190   bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK bloque_switch
Rule 191   bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones bloque_switch
Rule 192   bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones bloque_switch
Rule 193   bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones switch_default
Rule 194   bloque_switch -> switch_default
Rule 195   caso_switch -> VARIABLE
Rule 196   caso_switch -> CADENA
Rule 197   caso_switch -> ENTERO
Rule 198   switch_default -> DEFAULT DOSPUNTOS instrucciones masInstrucciones BREAK
Rule 199   switch_default -> DEFAULT DOSPUNTOS instrucciones masInstrucciones
Rule 200   switch_default -> DEFAULT DOSPUNTOS instrucciones BREAK
Rule 201   switch_default -> DEFAULT DOSPUNTOS instrucciones masInstrucciones CONTINUE
Rule 202   switch_default -> DEFAULT DOSPUNTOS instrucciones CONTINUE
Rule 203   switch_default -> DEFAULT DOSPUNTOS instrucciones
Rule 204   condiciones -> factor MAYORQUE factor
Rule 205   condiciones -> factor MENORQUE factor
Rule 206   condiciones -> factor DIFERENTE factor
Rule 207   condiciones -> factor ESIGUAL factor
Rule 208   condiciones -> factor MENORIGUAL factor
Rule 209   condiciones -> factor MAYORIGUAL factor
Rule 210   comparaciones -> comparacion
Rule 211   comparaciones -> comparacion anado comparaciones
Rule 212   anado -> condicion
Rule 213   condicion -> AND
Rule 214   condicion -> OR
Rule 215   factor -> BOOL

Terminals, with rules where they appear

AMPERSAND            : 83 116
AND                  : 213
BOOL                 : 17 56 88 215
BREAK                : 184 186 190 198 200
CADENA               : 13 20 34 39 57 58 59 60 63 64 65 66 68 69 70 71 72 75 76 77 78 98 98 99 111 196
CAP                  : 105
CASE                 : 184 185 186 187 188 189 190 191 192 193
COMA                 : 59 60 65 66 71 72 77 78 96 97 98 99 100 101 109 110 137 138 139 140 141 141 142 142 143 143 144 144 147 148 149 150 151 151 152 152 153 153 154 154 180 182
CONTINUE             : 188 189 201 202
CORCHLEFT            : 51 52 92 137 138 139 140 141 142 143 144 147 148 149 150 151 152 153 154 156 157 158 159 160 161 162 163 164 165
CORCHRIGHT           : 51 52 92 137 138 139 140 141 142 143 144 147 148 149 150 151 152 153 154 156 157 158 159 160 161 162 163 164 165
DECLARADOR           : 24 86 92 137 139 141 143 147 149 151 153 161 165
DEFAULT              : 198 199 200 201 202 203
DIFERENTE            : 206
DIVISION             : 126
DOSPUNTOS            : 57 58 59 60 63 64 65 66 69 70 71 72 75 76 77 78 184 185 186 187 188 189 190 191 192 193 198 199 200 201 202 203
ELSE                 : 47 48 49 50
ENTERO               : 86 92 96 96 97 119 120 120 132 137 138 139 140 141 141 142 142 143 143 144 144 147 148 149 150 151 151 152 152 153 153 154 154 156 157 160 163 164 197
ESIGUAL              : 207
FALSE                : 31 81
FLOAT                : 19 55 90 95
FLOTANTE             : 100 100 101 121 122 122 133
FOR                  : 85
FUNC                 : 172 173 174 175 176 177 178
IF                   : 41 42 43 44 45 46
IGUAL                : 17 18 19 20 21 25 28 138 140 142 144 148 150 152 154 156 159 160 162 163 164
IMPORT               : 13
IMPRIMIR             : 106
INCREMENTO           : 87
INT                  : 18 53 89 93 137 138 139 140 141 142 143 144 156 157 158 159 160 161
LEN                  : 104
LLAVELEFT            : 41 42 43 44 45 46 47 48 49 51 53 54 55 56 85 93 94 95 135 136 172 173 174 175 176 177 178 183
LLAVERIGHT           : 41 42 43 44 45 46 47 48 49 51 53 54 55 56 85 93 94 95 135 136 172 173 174 175 176 177 178 183
MAKE                 : 155
MAP                  : 51 52
MASIGUAL             : 26
MAYORIGUAL           : 209
MAYORQUE             : 204
MENORIGUAL           : 208
MENORQUE             : 205
MENOSIGUAL           : 27
MODULO               : 127
NEGACION             : 167
OR                   : 214
PACKAGE              : 13
PARLEFT              : 103 106 115 134 137 138 139 140 141 142 143 144 147 148 149 150 151 152 153 154 167 168 172 173 174 175 176 177 178
PARRIGHT             : 103 106 115 134 137 138 139 140 141 142 143 144 147 148 149 150 151 152 153 154 167 168 172 173 174 175 176 177 178
PRODUCTO             : 82 84 125
PUNTOCOMA            : 85 85
RESTA                : 124
RETURN               : 41 42 45 46 48 49 173 174 175 177 178
SCAN                 : 115
STRING               : 20 51 52 54 91 94 147 148 149 150 151 152 153 154 162 163 164 165
SUMA                 : 123
SWITCH               : 183
TRUE                 : 30 80
VAR                  : 17 18 19 20 21 22 139 140 143 144 149 150 153 154 156 157 158 159 162 163
VARIABLE             : 13 17 18 19 20 21 22 24 25 26 27 35 40 41 42 45 46 48 49 61 67 73 83 84 86 87 92 103 112 116 131 137 138 139 140 141 142 143 144 147 148 149 150 151 152 153 154 156 157 158 159 160 161 162 163 164 165 172 173 174 175 175 176 177 178 179 180 181 182 183 195
error                : 

Nonterminals, with rules where they appear

acumular             : 26
anado                : 211
array                : 10
asignacion           : 1
bloque_switch        : 183 190 191 192
booleano             : 17 32
caso_switch          : 184 185 186 187 188 189 190 191 192 193
comparacion          : 210 211
comparaciones        : 41 42 43 44 45 46 211
condicion            : 29 79 212
condiciones          : 3 85 166 167 168
contArray            : 92
contArrayCadenas     : 94 99 136
contArrayEnteros     : 93 97 135
contArrayFloat       : 95 101
contMapa             : 52
contPrint            : 106
contScan             : 115
contenido            : 107 108 109 110
datoBoolean          : 75 76 77 78
datoCadena           : 63 64 65 66
datoEntero           : 57 58 59 60
datoFlotante         : 69 70 71 72
declaracion_slices_enteros : 135 145
declaracion_slices_strings : 136 146
derefer              : 28
else                 : 42 44 46
expresion            : 2 27 33 38 62 74 134
expresionFloat       : 19 118 121
expresionInt         : 18 117 119
factor               : 204 204 205 205 206 206 207 207 208 208 209 209
funcion              : 12 13
funcion_parametro    : 170
funcion_sin_parametro : 169
funcion_sin_parametro_return : 171
incrementa           : 85
inicio               : 85
instrucciones        : 14 41 42 43 44 47 48 85 172 174 175 176 177 184 185 186 187 188 189 190 191 192 193 198 199 200 201 202 203 0
lectura              : 9
mapa                 : 7 36
masBoolean           : 75 77
masCadena            : 63 65
masCont              : 107 109
masEntero            : 57 59
masFlotante          : 69 71
masInstrucciones     : 14 15 41 42 43 44 47 48 85 172 174 175 176 177 184 185 188 190 191 198 199 201
method               : 113
methodArray          : 102
metodos_slices       : 137 138 139 140 141 142 143 144 147 148 149 150 151 152 153 154
namemetodoArr        : 103
numericos            : 129 130
operadorArit         : 119 120 121 122
parBoolean           : 56
parCadena            : 54
parEntero            : 53
parFlotante          : 55
parametros           : 176 177 178 180 182
print                : 6
puntero              : 8 21 22
refer                : 21 37
sentenciaFor         : 5
sentenciaIf          : 4 50
slices               : 23
switch               : 11
switch_default       : 193 194
term                 : 128
typeData             : 51 82 181 182
valor                : 24 25 28

Parsing method: LALR

state 0

    (0) S' -> . instrucciones
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (204) condiciones -> . factor MAYORQUE factor
    (205) condiciones -> . factor MENORQUE factor
    (206) condiciones -> . factor DIFERENTE factor
    (207) condiciones -> . factor ESIGUAL factor
    (208) condiciones -> . factor MENORIGUAL factor
    (209) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (183) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (169) funcion -> . funcion_sin_parametro
    (170) funcion -> . funcion_parametro
    (171) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT
    (136) slices -> . declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT
    (137) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (138) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (139) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (140) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (141) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (142) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (143) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (144) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (145) slices -> . declaracion_slices_enteros
    (146) slices -> . declaracion_slices_strings
    (147) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (148) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (149) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (150) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (151) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (152) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (153) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (154) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (172) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (173) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (174) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (176) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (156) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (157) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT
    (158) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT CORCHRIGHT INT
    (159) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT
    (160) declaracion_slices_enteros -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (161) declaracion_slices_enteros -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT
    (162) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING
    (163) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (164) declaracion_slices_strings -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (165) declaracion_slices_strings -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    BOOL            shift and go to state 17
    FUNC            shift and go to state 40
    PARLEFT         shift and go to state 27

    instrucciones                  shift and go to state 1
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices_enteros     shift and go to state 36
    declaracion_slices_strings     shift and go to state 37
    numericos                      shift and go to state 39

state 1

    (0) S' -> instrucciones .



state 2

    (1) instrucciones -> asignacion .

    $end            reduce using rule 1 (instrucciones -> asignacion .)
    RETURN          reduce using rule 1 (instrucciones -> asignacion .)
    LLAVERIGHT      reduce using rule 1 (instrucciones -> asignacion .)
    PACKAGE         reduce using rule 1 (instrucciones -> asignacion .)
    VAR             reduce using rule 1 (instrucciones -> asignacion .)
    VARIABLE        reduce using rule 1 (instrucciones -> asignacion .)
    IF              reduce using rule 1 (instrucciones -> asignacion .)
    FOR             reduce using rule 1 (instrucciones -> asignacion .)
    IMPRIMIR        reduce using rule 1 (instrucciones -> asignacion .)
    MAP             reduce using rule 1 (instrucciones -> asignacion .)
    PRODUCTO        reduce using rule 1 (instrucciones -> asignacion .)
    SCAN            reduce using rule 1 (instrucciones -> asignacion .)
    SWITCH          reduce using rule 1 (instrucciones -> asignacion .)
    ENTERO          reduce using rule 1 (instrucciones -> asignacion .)
    FLOTANTE        reduce using rule 1 (instrucciones -> asignacion .)
    BOOL            reduce using rule 1 (instrucciones -> asignacion .)
    FUNC            reduce using rule 1 (instrucciones -> asignacion .)
    PARLEFT         reduce using rule 1 (instrucciones -> asignacion .)
    BREAK           reduce using rule 1 (instrucciones -> asignacion .)
    CONTINUE        reduce using rule 1 (instrucciones -> asignacion .)
    CASE            reduce using rule 1 (instrucciones -> asignacion .)
    DEFAULT         reduce using rule 1 (instrucciones -> asignacion .)


state 3

    (2) instrucciones -> expresion .

    $end            reduce using rule 2 (instrucciones -> expresion .)
    RETURN          reduce using rule 2 (instrucciones -> expresion .)
    LLAVERIGHT      reduce using rule 2 (instrucciones -> expresion .)
    PACKAGE         reduce using rule 2 (instrucciones -> expresion .)
    VAR             reduce using rule 2 (instrucciones -> expresion .)
    VARIABLE        reduce using rule 2 (instrucciones -> expresion .)
    IF              reduce using rule 2 (instrucciones -> expresion .)
    FOR             reduce using rule 2 (instrucciones -> expresion .)
    IMPRIMIR        reduce using rule 2 (instrucciones -> expresion .)
    MAP             reduce using rule 2 (instrucciones -> expresion .)
    PRODUCTO        reduce using rule 2 (instrucciones -> expresion .)
    SCAN            reduce using rule 2 (instrucciones -> expresion .)
    SWITCH          reduce using rule 2 (instrucciones -> expresion .)
    ENTERO          reduce using rule 2 (instrucciones -> expresion .)
    FLOTANTE        reduce using rule 2 (instrucciones -> expresion .)
    BOOL            reduce using rule 2 (instrucciones -> expresion .)
    FUNC            reduce using rule 2 (instrucciones -> expresion .)
    PARLEFT         reduce using rule 2 (instrucciones -> expresion .)
    BREAK           reduce using rule 2 (instrucciones -> expresion .)
    CONTINUE        reduce using rule 2 (instrucciones -> expresion .)
    CASE            reduce using rule 2 (instrucciones -> expresion .)
    DEFAULT         reduce using rule 2 (instrucciones -> expresion .)


state 4

    (3) instrucciones -> condiciones .

    $end            reduce using rule 3 (instrucciones -> condiciones .)
    RETURN          reduce using rule 3 (instrucciones -> condiciones .)
    LLAVERIGHT      reduce using rule 3 (instrucciones -> condiciones .)
    PACKAGE         reduce using rule 3 (instrucciones -> condiciones .)
    VAR             reduce using rule 3 (instrucciones -> condiciones .)
    VARIABLE        reduce using rule 3 (instrucciones -> condiciones .)
    IF              reduce using rule 3 (instrucciones -> condiciones .)
    FOR             reduce using rule 3 (instrucciones -> condiciones .)
    IMPRIMIR        reduce using rule 3 (instrucciones -> condiciones .)
    MAP             reduce using rule 3 (instrucciones -> condiciones .)
    PRODUCTO        reduce using rule 3 (instrucciones -> condiciones .)
    SCAN            reduce using rule 3 (instrucciones -> condiciones .)
    SWITCH          reduce using rule 3 (instrucciones -> condiciones .)
    ENTERO          reduce using rule 3 (instrucciones -> condiciones .)
    FLOTANTE        reduce using rule 3 (instrucciones -> condiciones .)
    BOOL            reduce using rule 3 (instrucciones -> condiciones .)
    FUNC            reduce using rule 3 (instrucciones -> condiciones .)
    PARLEFT         reduce using rule 3 (instrucciones -> condiciones .)
    BREAK           reduce using rule 3 (instrucciones -> condiciones .)
    CONTINUE        reduce using rule 3 (instrucciones -> condiciones .)
    CASE            reduce using rule 3 (instrucciones -> condiciones .)
    DEFAULT         reduce using rule 3 (instrucciones -> condiciones .)


state 5

    (4) instrucciones -> sentenciaIf .

    $end            reduce using rule 4 (instrucciones -> sentenciaIf .)
    RETURN          reduce using rule 4 (instrucciones -> sentenciaIf .)
    LLAVERIGHT      reduce using rule 4 (instrucciones -> sentenciaIf .)
    PACKAGE         reduce using rule 4 (instrucciones -> sentenciaIf .)
    VAR             reduce using rule 4 (instrucciones -> sentenciaIf .)
    VARIABLE        reduce using rule 4 (instrucciones -> sentenciaIf .)
    IF              reduce using rule 4 (instrucciones -> sentenciaIf .)
    FOR             reduce using rule 4 (instrucciones -> sentenciaIf .)
    IMPRIMIR        reduce using rule 4 (instrucciones -> sentenciaIf .)
    MAP             reduce using rule 4 (instrucciones -> sentenciaIf .)
    PRODUCTO        reduce using rule 4 (instrucciones -> sentenciaIf .)
    SCAN            reduce using rule 4 (instrucciones -> sentenciaIf .)
    SWITCH          reduce using rule 4 (instrucciones -> sentenciaIf .)
    ENTERO          reduce using rule 4 (instrucciones -> sentenciaIf .)
    FLOTANTE        reduce using rule 4 (instrucciones -> sentenciaIf .)
    BOOL            reduce using rule 4 (instrucciones -> sentenciaIf .)
    FUNC            reduce using rule 4 (instrucciones -> sentenciaIf .)
    PARLEFT         reduce using rule 4 (instrucciones -> sentenciaIf .)
    BREAK           reduce using rule 4 (instrucciones -> sentenciaIf .)
    CONTINUE        reduce using rule 4 (instrucciones -> sentenciaIf .)
    CASE            reduce using rule 4 (instrucciones -> sentenciaIf .)
    DEFAULT         reduce using rule 4 (instrucciones -> sentenciaIf .)


state 6

    (5) instrucciones -> sentenciaFor .

    $end            reduce using rule 5 (instrucciones -> sentenciaFor .)
    RETURN          reduce using rule 5 (instrucciones -> sentenciaFor .)
    LLAVERIGHT      reduce using rule 5 (instrucciones -> sentenciaFor .)
    PACKAGE         reduce using rule 5 (instrucciones -> sentenciaFor .)
    VAR             reduce using rule 5 (instrucciones -> sentenciaFor .)
    VARIABLE        reduce using rule 5 (instrucciones -> sentenciaFor .)
    IF              reduce using rule 5 (instrucciones -> sentenciaFor .)
    FOR             reduce using rule 5 (instrucciones -> sentenciaFor .)
    IMPRIMIR        reduce using rule 5 (instrucciones -> sentenciaFor .)
    MAP             reduce using rule 5 (instrucciones -> sentenciaFor .)
    PRODUCTO        reduce using rule 5 (instrucciones -> sentenciaFor .)
    SCAN            reduce using rule 5 (instrucciones -> sentenciaFor .)
    SWITCH          reduce using rule 5 (instrucciones -> sentenciaFor .)
    ENTERO          reduce using rule 5 (instrucciones -> sentenciaFor .)
    FLOTANTE        reduce using rule 5 (instrucciones -> sentenciaFor .)
    BOOL            reduce using rule 5 (instrucciones -> sentenciaFor .)
    FUNC            reduce using rule 5 (instrucciones -> sentenciaFor .)
    PARLEFT         reduce using rule 5 (instrucciones -> sentenciaFor .)
    BREAK           reduce using rule 5 (instrucciones -> sentenciaFor .)
    CONTINUE        reduce using rule 5 (instrucciones -> sentenciaFor .)
    CASE            reduce using rule 5 (instrucciones -> sentenciaFor .)
    DEFAULT         reduce using rule 5 (instrucciones -> sentenciaFor .)


state 7

    (6) instrucciones -> print .

    $end            reduce using rule 6 (instrucciones -> print .)
    RETURN          reduce using rule 6 (instrucciones -> print .)
    LLAVERIGHT      reduce using rule 6 (instrucciones -> print .)
    PACKAGE         reduce using rule 6 (instrucciones -> print .)
    VAR             reduce using rule 6 (instrucciones -> print .)
    VARIABLE        reduce using rule 6 (instrucciones -> print .)
    IF              reduce using rule 6 (instrucciones -> print .)
    FOR             reduce using rule 6 (instrucciones -> print .)
    IMPRIMIR        reduce using rule 6 (instrucciones -> print .)
    MAP             reduce using rule 6 (instrucciones -> print .)
    PRODUCTO        reduce using rule 6 (instrucciones -> print .)
    SCAN            reduce using rule 6 (instrucciones -> print .)
    SWITCH          reduce using rule 6 (instrucciones -> print .)
    ENTERO          reduce using rule 6 (instrucciones -> print .)
    FLOTANTE        reduce using rule 6 (instrucciones -> print .)
    BOOL            reduce using rule 6 (instrucciones -> print .)
    FUNC            reduce using rule 6 (instrucciones -> print .)
    PARLEFT         reduce using rule 6 (instrucciones -> print .)
    BREAK           reduce using rule 6 (instrucciones -> print .)
    CONTINUE        reduce using rule 6 (instrucciones -> print .)
    CASE            reduce using rule 6 (instrucciones -> print .)
    DEFAULT         reduce using rule 6 (instrucciones -> print .)


state 8

    (7) instrucciones -> mapa .

    $end            reduce using rule 7 (instrucciones -> mapa .)
    RETURN          reduce using rule 7 (instrucciones -> mapa .)
    LLAVERIGHT      reduce using rule 7 (instrucciones -> mapa .)
    PACKAGE         reduce using rule 7 (instrucciones -> mapa .)
    VAR             reduce using rule 7 (instrucciones -> mapa .)
    VARIABLE        reduce using rule 7 (instrucciones -> mapa .)
    IF              reduce using rule 7 (instrucciones -> mapa .)
    FOR             reduce using rule 7 (instrucciones -> mapa .)
    IMPRIMIR        reduce using rule 7 (instrucciones -> mapa .)
    MAP             reduce using rule 7 (instrucciones -> mapa .)
    PRODUCTO        reduce using rule 7 (instrucciones -> mapa .)
    SCAN            reduce using rule 7 (instrucciones -> mapa .)
    SWITCH          reduce using rule 7 (instrucciones -> mapa .)
    ENTERO          reduce using rule 7 (instrucciones -> mapa .)
    FLOTANTE        reduce using rule 7 (instrucciones -> mapa .)
    BOOL            reduce using rule 7 (instrucciones -> mapa .)
    FUNC            reduce using rule 7 (instrucciones -> mapa .)
    PARLEFT         reduce using rule 7 (instrucciones -> mapa .)
    BREAK           reduce using rule 7 (instrucciones -> mapa .)
    CONTINUE        reduce using rule 7 (instrucciones -> mapa .)
    CASE            reduce using rule 7 (instrucciones -> mapa .)
    DEFAULT         reduce using rule 7 (instrucciones -> mapa .)


state 9

    (8) instrucciones -> puntero .

    $end            reduce using rule 8 (instrucciones -> puntero .)
    RETURN          reduce using rule 8 (instrucciones -> puntero .)
    LLAVERIGHT      reduce using rule 8 (instrucciones -> puntero .)
    PACKAGE         reduce using rule 8 (instrucciones -> puntero .)
    VAR             reduce using rule 8 (instrucciones -> puntero .)
    VARIABLE        reduce using rule 8 (instrucciones -> puntero .)
    IF              reduce using rule 8 (instrucciones -> puntero .)
    FOR             reduce using rule 8 (instrucciones -> puntero .)
    IMPRIMIR        reduce using rule 8 (instrucciones -> puntero .)
    MAP             reduce using rule 8 (instrucciones -> puntero .)
    PRODUCTO        reduce using rule 8 (instrucciones -> puntero .)
    SCAN            reduce using rule 8 (instrucciones -> puntero .)
    SWITCH          reduce using rule 8 (instrucciones -> puntero .)
    ENTERO          reduce using rule 8 (instrucciones -> puntero .)
    FLOTANTE        reduce using rule 8 (instrucciones -> puntero .)
    BOOL            reduce using rule 8 (instrucciones -> puntero .)
    FUNC            reduce using rule 8 (instrucciones -> puntero .)
    PARLEFT         reduce using rule 8 (instrucciones -> puntero .)
    BREAK           reduce using rule 8 (instrucciones -> puntero .)
    CONTINUE        reduce using rule 8 (instrucciones -> puntero .)
    CASE            reduce using rule 8 (instrucciones -> puntero .)
    DEFAULT         reduce using rule 8 (instrucciones -> puntero .)


state 10

    (9) instrucciones -> lectura .

    $end            reduce using rule 9 (instrucciones -> lectura .)
    RETURN          reduce using rule 9 (instrucciones -> lectura .)
    LLAVERIGHT      reduce using rule 9 (instrucciones -> lectura .)
    PACKAGE         reduce using rule 9 (instrucciones -> lectura .)
    VAR             reduce using rule 9 (instrucciones -> lectura .)
    VARIABLE        reduce using rule 9 (instrucciones -> lectura .)
    IF              reduce using rule 9 (instrucciones -> lectura .)
    FOR             reduce using rule 9 (instrucciones -> lectura .)
    IMPRIMIR        reduce using rule 9 (instrucciones -> lectura .)
    MAP             reduce using rule 9 (instrucciones -> lectura .)
    PRODUCTO        reduce using rule 9 (instrucciones -> lectura .)
    SCAN            reduce using rule 9 (instrucciones -> lectura .)
    SWITCH          reduce using rule 9 (instrucciones -> lectura .)
    ENTERO          reduce using rule 9 (instrucciones -> lectura .)
    FLOTANTE        reduce using rule 9 (instrucciones -> lectura .)
    BOOL            reduce using rule 9 (instrucciones -> lectura .)
    FUNC            reduce using rule 9 (instrucciones -> lectura .)
    PARLEFT         reduce using rule 9 (instrucciones -> lectura .)
    BREAK           reduce using rule 9 (instrucciones -> lectura .)
    CONTINUE        reduce using rule 9 (instrucciones -> lectura .)
    CASE            reduce using rule 9 (instrucciones -> lectura .)
    DEFAULT         reduce using rule 9 (instrucciones -> lectura .)


state 11

    (10) instrucciones -> array .

    $end            reduce using rule 10 (instrucciones -> array .)
    RETURN          reduce using rule 10 (instrucciones -> array .)
    LLAVERIGHT      reduce using rule 10 (instrucciones -> array .)
    PACKAGE         reduce using rule 10 (instrucciones -> array .)
    VAR             reduce using rule 10 (instrucciones -> array .)
    VARIABLE        reduce using rule 10 (instrucciones -> array .)
    IF              reduce using rule 10 (instrucciones -> array .)
    FOR             reduce using rule 10 (instrucciones -> array .)
    IMPRIMIR        reduce using rule 10 (instrucciones -> array .)
    MAP             reduce using rule 10 (instrucciones -> array .)
    PRODUCTO        reduce using rule 10 (instrucciones -> array .)
    SCAN            reduce using rule 10 (instrucciones -> array .)
    SWITCH          reduce using rule 10 (instrucciones -> array .)
    ENTERO          reduce using rule 10 (instrucciones -> array .)
    FLOTANTE        reduce using rule 10 (instrucciones -> array .)
    BOOL            reduce using rule 10 (instrucciones -> array .)
    FUNC            reduce using rule 10 (instrucciones -> array .)
    PARLEFT         reduce using rule 10 (instrucciones -> array .)
    BREAK           reduce using rule 10 (instrucciones -> array .)
    CONTINUE        reduce using rule 10 (instrucciones -> array .)
    CASE            reduce using rule 10 (instrucciones -> array .)
    DEFAULT         reduce using rule 10 (instrucciones -> array .)


state 12

    (11) instrucciones -> switch .

    $end            reduce using rule 11 (instrucciones -> switch .)
    RETURN          reduce using rule 11 (instrucciones -> switch .)
    LLAVERIGHT      reduce using rule 11 (instrucciones -> switch .)
    PACKAGE         reduce using rule 11 (instrucciones -> switch .)
    VAR             reduce using rule 11 (instrucciones -> switch .)
    VARIABLE        reduce using rule 11 (instrucciones -> switch .)
    IF              reduce using rule 11 (instrucciones -> switch .)
    FOR             reduce using rule 11 (instrucciones -> switch .)
    IMPRIMIR        reduce using rule 11 (instrucciones -> switch .)
    MAP             reduce using rule 11 (instrucciones -> switch .)
    PRODUCTO        reduce using rule 11 (instrucciones -> switch .)
    SCAN            reduce using rule 11 (instrucciones -> switch .)
    SWITCH          reduce using rule 11 (instrucciones -> switch .)
    ENTERO          reduce using rule 11 (instrucciones -> switch .)
    FLOTANTE        reduce using rule 11 (instrucciones -> switch .)
    BOOL            reduce using rule 11 (instrucciones -> switch .)
    FUNC            reduce using rule 11 (instrucciones -> switch .)
    PARLEFT         reduce using rule 11 (instrucciones -> switch .)
    BREAK           reduce using rule 11 (instrucciones -> switch .)
    CONTINUE        reduce using rule 11 (instrucciones -> switch .)
    CASE            reduce using rule 11 (instrucciones -> switch .)
    DEFAULT         reduce using rule 11 (instrucciones -> switch .)


state 13

    (12) instrucciones -> funcion .

    $end            reduce using rule 12 (instrucciones -> funcion .)
    RETURN          reduce using rule 12 (instrucciones -> funcion .)
    LLAVERIGHT      reduce using rule 12 (instrucciones -> funcion .)
    PACKAGE         reduce using rule 12 (instrucciones -> funcion .)
    VAR             reduce using rule 12 (instrucciones -> funcion .)
    VARIABLE        reduce using rule 12 (instrucciones -> funcion .)
    IF              reduce using rule 12 (instrucciones -> funcion .)
    FOR             reduce using rule 12 (instrucciones -> funcion .)
    IMPRIMIR        reduce using rule 12 (instrucciones -> funcion .)
    MAP             reduce using rule 12 (instrucciones -> funcion .)
    PRODUCTO        reduce using rule 12 (instrucciones -> funcion .)
    SCAN            reduce using rule 12 (instrucciones -> funcion .)
    SWITCH          reduce using rule 12 (instrucciones -> funcion .)
    ENTERO          reduce using rule 12 (instrucciones -> funcion .)
    FLOTANTE        reduce using rule 12 (instrucciones -> funcion .)
    BOOL            reduce using rule 12 (instrucciones -> funcion .)
    FUNC            reduce using rule 12 (instrucciones -> funcion .)
    PARLEFT         reduce using rule 12 (instrucciones -> funcion .)
    BREAK           reduce using rule 12 (instrucciones -> funcion .)
    CONTINUE        reduce using rule 12 (instrucciones -> funcion .)
    CASE            reduce using rule 12 (instrucciones -> funcion .)
    DEFAULT         reduce using rule 12 (instrucciones -> funcion .)


state 14

    (13) instrucciones -> PACKAGE . VARIABLE IMPORT CADENA funcion

    VARIABLE        shift and go to state 41


state 15

    (24) asignacion -> VARIABLE . DECLARADOR valor
    (25) asignacion -> VARIABLE . IGUAL valor
    (26) asignacion -> VARIABLE . MASIGUAL acumular
    (27) asignacion -> VARIABLE . MENOSIGUAL expresion
    (92) array -> VARIABLE . DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (137) slices -> VARIABLE . DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (138) slices -> VARIABLE . IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (141) slices -> VARIABLE . DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (142) slices -> VARIABLE . IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (147) slices -> VARIABLE . DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (148) slices -> VARIABLE . IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (151) slices -> VARIABLE . DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (152) slices -> VARIABLE . IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (131) factor -> VARIABLE .
    (160) declaracion_slices_enteros -> VARIABLE . IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (161) declaracion_slices_enteros -> VARIABLE . DECLARADOR CORCHLEFT CORCHRIGHT INT
    (164) declaracion_slices_strings -> VARIABLE . IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (165) declaracion_slices_strings -> VARIABLE . DECLARADOR CORCHLEFT CORCHRIGHT STRING

    DECLARADOR      shift and go to state 42
    IGUAL           shift and go to state 43
    MASIGUAL        shift and go to state 44
    MENOSIGUAL      shift and go to state 45
    MAYORQUE        reduce using rule 131 (factor -> VARIABLE .)
    MENORQUE        reduce using rule 131 (factor -> VARIABLE .)
    DIFERENTE       reduce using rule 131 (factor -> VARIABLE .)
    ESIGUAL         reduce using rule 131 (factor -> VARIABLE .)
    MENORIGUAL      reduce using rule 131 (factor -> VARIABLE .)
    MAYORIGUAL      reduce using rule 131 (factor -> VARIABLE .)


state 16

    (17) asignacion -> VAR . VARIABLE BOOL IGUAL booleano
    (18) asignacion -> VAR . VARIABLE INT IGUAL expresionInt
    (19) asignacion -> VAR . VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> VAR . VARIABLE STRING IGUAL CADENA
    (21) asignacion -> VAR . VARIABLE puntero IGUAL refer
    (22) asignacion -> VAR . VARIABLE puntero
    (139) slices -> VAR . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (140) slices -> VAR . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (143) slices -> VAR . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (144) slices -> VAR . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (149) slices -> VAR . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (150) slices -> VAR . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (153) slices -> VAR . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (154) slices -> VAR . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (156) declaracion_slices_enteros -> VAR . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (157) declaracion_slices_enteros -> VAR . VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT
    (158) declaracion_slices_enteros -> VAR . VARIABLE CORCHLEFT CORCHRIGHT INT
    (159) declaracion_slices_enteros -> VAR . VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT
    (162) declaracion_slices_strings -> VAR . VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING
    (163) declaracion_slices_strings -> VAR . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING

    VARIABLE        shift and go to state 46


state 17

    (215) factor -> BOOL .

    MAYORQUE        reduce using rule 215 (factor -> BOOL .)
    MENORQUE        reduce using rule 215 (factor -> BOOL .)
    DIFERENTE       reduce using rule 215 (factor -> BOOL .)
    ESIGUAL         reduce using rule 215 (factor -> BOOL .)
    MENORIGUAL      reduce using rule 215 (factor -> BOOL .)
    MAYORIGUAL      reduce using rule 215 (factor -> BOOL .)
    $end            reduce using rule 215 (factor -> BOOL .)
    AND             reduce using rule 215 (factor -> BOOL .)
    OR              reduce using rule 215 (factor -> BOOL .)
    LLAVELEFT       reduce using rule 215 (factor -> BOOL .)
    PARRIGHT        reduce using rule 215 (factor -> BOOL .)
    RETURN          reduce using rule 215 (factor -> BOOL .)
    LLAVERIGHT      reduce using rule 215 (factor -> BOOL .)
    PACKAGE         reduce using rule 215 (factor -> BOOL .)
    VAR             reduce using rule 215 (factor -> BOOL .)
    VARIABLE        reduce using rule 215 (factor -> BOOL .)
    IF              reduce using rule 215 (factor -> BOOL .)
    FOR             reduce using rule 215 (factor -> BOOL .)
    IMPRIMIR        reduce using rule 215 (factor -> BOOL .)
    MAP             reduce using rule 215 (factor -> BOOL .)
    PRODUCTO        reduce using rule 215 (factor -> BOOL .)
    SCAN            reduce using rule 215 (factor -> BOOL .)
    SWITCH          reduce using rule 215 (factor -> BOOL .)
    ENTERO          reduce using rule 215 (factor -> BOOL .)
    FLOTANTE        reduce using rule 215 (factor -> BOOL .)
    BOOL            reduce using rule 215 (factor -> BOOL .)
    FUNC            reduce using rule 215 (factor -> BOOL .)
    PARLEFT         reduce using rule 215 (factor -> BOOL .)
    PUNTOCOMA       reduce using rule 215 (factor -> BOOL .)
    BREAK           reduce using rule 215 (factor -> BOOL .)
    CONTINUE        reduce using rule 215 (factor -> BOOL .)
    CASE            reduce using rule 215 (factor -> BOOL .)
    DEFAULT         reduce using rule 215 (factor -> BOOL .)


state 18

    (117) expresion -> expresionInt .
    (119) expresionInt -> expresionInt . operadorArit ENTERO
    (123) operadorArit -> . SUMA
    (124) operadorArit -> . RESTA
    (125) operadorArit -> . PRODUCTO
    (126) operadorArit -> . DIVISION
    (127) operadorArit -> . MODULO

  ! shift/reduce conflict for PRODUCTO resolved as shift
    $end            reduce using rule 117 (expresion -> expresionInt .)
    PARRIGHT        reduce using rule 117 (expresion -> expresionInt .)
    RETURN          reduce using rule 117 (expresion -> expresionInt .)
    LLAVERIGHT      reduce using rule 117 (expresion -> expresionInt .)
    PACKAGE         reduce using rule 117 (expresion -> expresionInt .)
    VAR             reduce using rule 117 (expresion -> expresionInt .)
    VARIABLE        reduce using rule 117 (expresion -> expresionInt .)
    IF              reduce using rule 117 (expresion -> expresionInt .)
    FOR             reduce using rule 117 (expresion -> expresionInt .)
    IMPRIMIR        reduce using rule 117 (expresion -> expresionInt .)
    MAP             reduce using rule 117 (expresion -> expresionInt .)
    SCAN            reduce using rule 117 (expresion -> expresionInt .)
    SWITCH          reduce using rule 117 (expresion -> expresionInt .)
    ENTERO          reduce using rule 117 (expresion -> expresionInt .)
    FLOTANTE        reduce using rule 117 (expresion -> expresionInt .)
    BOOL            reduce using rule 117 (expresion -> expresionInt .)
    FUNC            reduce using rule 117 (expresion -> expresionInt .)
    PARLEFT         reduce using rule 117 (expresion -> expresionInt .)
    BREAK           reduce using rule 117 (expresion -> expresionInt .)
    CONTINUE        reduce using rule 117 (expresion -> expresionInt .)
    CASE            reduce using rule 117 (expresion -> expresionInt .)
    DEFAULT         reduce using rule 117 (expresion -> expresionInt .)
    COMA            reduce using rule 117 (expresion -> expresionInt .)
    SUMA            shift and go to state 48
    RESTA           shift and go to state 49
    PRODUCTO        shift and go to state 50
    DIVISION        shift and go to state 51
    MODULO          shift and go to state 52

  ! PRODUCTO        [ reduce using rule 117 (expresion -> expresionInt .) ]

    operadorArit                   shift and go to state 47

state 19

    (118) expresion -> expresionFloat .
    (121) expresionFloat -> expresionFloat . operadorArit FLOTANTE
    (123) operadorArit -> . SUMA
    (124) operadorArit -> . RESTA
    (125) operadorArit -> . PRODUCTO
    (126) operadorArit -> . DIVISION
    (127) operadorArit -> . MODULO

  ! shift/reduce conflict for PRODUCTO resolved as shift
    $end            reduce using rule 118 (expresion -> expresionFloat .)
    PARRIGHT        reduce using rule 118 (expresion -> expresionFloat .)
    RETURN          reduce using rule 118 (expresion -> expresionFloat .)
    LLAVERIGHT      reduce using rule 118 (expresion -> expresionFloat .)
    PACKAGE         reduce using rule 118 (expresion -> expresionFloat .)
    VAR             reduce using rule 118 (expresion -> expresionFloat .)
    VARIABLE        reduce using rule 118 (expresion -> expresionFloat .)
    IF              reduce using rule 118 (expresion -> expresionFloat .)
    FOR             reduce using rule 118 (expresion -> expresionFloat .)
    IMPRIMIR        reduce using rule 118 (expresion -> expresionFloat .)
    MAP             reduce using rule 118 (expresion -> expresionFloat .)
    SCAN            reduce using rule 118 (expresion -> expresionFloat .)
    SWITCH          reduce using rule 118 (expresion -> expresionFloat .)
    ENTERO          reduce using rule 118 (expresion -> expresionFloat .)
    FLOTANTE        reduce using rule 118 (expresion -> expresionFloat .)
    BOOL            reduce using rule 118 (expresion -> expresionFloat .)
    FUNC            reduce using rule 118 (expresion -> expresionFloat .)
    PARLEFT         reduce using rule 118 (expresion -> expresionFloat .)
    BREAK           reduce using rule 118 (expresion -> expresionFloat .)
    CONTINUE        reduce using rule 118 (expresion -> expresionFloat .)
    CASE            reduce using rule 118 (expresion -> expresionFloat .)
    DEFAULT         reduce using rule 118 (expresion -> expresionFloat .)
    COMA            reduce using rule 118 (expresion -> expresionFloat .)
    SUMA            shift and go to state 48
    RESTA           shift and go to state 49
    PRODUCTO        shift and go to state 50
    DIVISION        shift and go to state 51
    MODULO          shift and go to state 52

  ! PRODUCTO        [ reduce using rule 118 (expresion -> expresionFloat .) ]

    operadorArit                   shift and go to state 53

state 20

    (23) asignacion -> slices .

    $end            reduce using rule 23 (asignacion -> slices .)
    RETURN          reduce using rule 23 (asignacion -> slices .)
    LLAVERIGHT      reduce using rule 23 (asignacion -> slices .)
    PACKAGE         reduce using rule 23 (asignacion -> slices .)
    VAR             reduce using rule 23 (asignacion -> slices .)
    VARIABLE        reduce using rule 23 (asignacion -> slices .)
    IF              reduce using rule 23 (asignacion -> slices .)
    FOR             reduce using rule 23 (asignacion -> slices .)
    IMPRIMIR        reduce using rule 23 (asignacion -> slices .)
    MAP             reduce using rule 23 (asignacion -> slices .)
    PRODUCTO        reduce using rule 23 (asignacion -> slices .)
    SCAN            reduce using rule 23 (asignacion -> slices .)
    SWITCH          reduce using rule 23 (asignacion -> slices .)
    ENTERO          reduce using rule 23 (asignacion -> slices .)
    FLOTANTE        reduce using rule 23 (asignacion -> slices .)
    BOOL            reduce using rule 23 (asignacion -> slices .)
    FUNC            reduce using rule 23 (asignacion -> slices .)
    PARLEFT         reduce using rule 23 (asignacion -> slices .)
    BREAK           reduce using rule 23 (asignacion -> slices .)
    CONTINUE        reduce using rule 23 (asignacion -> slices .)
    CASE            reduce using rule 23 (asignacion -> slices .)
    DEFAULT         reduce using rule 23 (asignacion -> slices .)


state 21

    (28) asignacion -> derefer . IGUAL valor

    IGUAL           shift and go to state 54


state 22

    (128) expresion -> term .

    $end            reduce using rule 128 (expresion -> term .)
    PARRIGHT        reduce using rule 128 (expresion -> term .)
    RETURN          reduce using rule 128 (expresion -> term .)
    LLAVERIGHT      reduce using rule 128 (expresion -> term .)
    PACKAGE         reduce using rule 128 (expresion -> term .)
    VAR             reduce using rule 128 (expresion -> term .)
    VARIABLE        reduce using rule 128 (expresion -> term .)
    IF              reduce using rule 128 (expresion -> term .)
    FOR             reduce using rule 128 (expresion -> term .)
    IMPRIMIR        reduce using rule 128 (expresion -> term .)
    MAP             reduce using rule 128 (expresion -> term .)
    PRODUCTO        reduce using rule 128 (expresion -> term .)
    SCAN            reduce using rule 128 (expresion -> term .)
    SWITCH          reduce using rule 128 (expresion -> term .)
    ENTERO          reduce using rule 128 (expresion -> term .)
    FLOTANTE        reduce using rule 128 (expresion -> term .)
    BOOL            reduce using rule 128 (expresion -> term .)
    FUNC            reduce using rule 128 (expresion -> term .)
    PARLEFT         reduce using rule 128 (expresion -> term .)
    BREAK           reduce using rule 128 (expresion -> term .)
    CONTINUE        reduce using rule 128 (expresion -> term .)
    CASE            reduce using rule 128 (expresion -> term .)
    DEFAULT         reduce using rule 128 (expresion -> term .)
    COMA            reduce using rule 128 (expresion -> term .)


state 23

    (204) condiciones -> factor . MAYORQUE factor
    (205) condiciones -> factor . MENORQUE factor
    (206) condiciones -> factor . DIFERENTE factor
    (207) condiciones -> factor . ESIGUAL factor
    (208) condiciones -> factor . MENORIGUAL factor
    (209) condiciones -> factor . MAYORIGUAL factor

    MAYORQUE        shift and go to state 55
    MENORQUE        shift and go to state 56
    DIFERENTE       shift and go to state 57
    ESIGUAL         shift and go to state 58
    MENORIGUAL      shift and go to state 59
    MAYORIGUAL      shift and go to state 60


state 24

    (41) sentenciaIf -> IF . comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> IF . comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> IF . comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> IF . comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> IF . comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> IF . comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (210) comparaciones -> . comparacion
    (211) comparaciones -> . comparacion anado comparaciones
    (166) comparacion -> . condiciones
    (167) comparacion -> . NEGACION PARLEFT condiciones PARRIGHT
    (168) comparacion -> . PARLEFT condiciones PARRIGHT
    (204) condiciones -> . factor MAYORQUE factor
    (205) condiciones -> . factor MENORQUE factor
    (206) condiciones -> . factor DIFERENTE factor
    (207) condiciones -> . factor ESIGUAL factor
    (208) condiciones -> . factor MENORIGUAL factor
    (209) condiciones -> . factor MAYORIGUAL factor
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    NEGACION        shift and go to state 65
    PARLEFT         shift and go to state 66
    VARIABLE        shift and go to state 62
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 68
    FLOTANTE        shift and go to state 69

    comparaciones                  shift and go to state 61
    comparacion                    shift and go to state 63
    condiciones                    shift and go to state 64
    factor                         shift and go to state 23
    numericos                      shift and go to state 67

state 25

    (85) sentenciaFor -> FOR . inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (86) inicio -> . VARIABLE DECLARADOR ENTERO

    VARIABLE        shift and go to state 71

    inicio                         shift and go to state 70

state 26

    (106) print -> IMPRIMIR . PARLEFT contPrint PARRIGHT

    PARLEFT         shift and go to state 72


state 27

    (134) numericos -> PARLEFT . expresion PARRIGHT
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    PARLEFT         shift and go to state 27

    expresion                      shift and go to state 73
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 74

state 28

    (51) mapa -> MAP . CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> MAP . CORCHLEFT STRING CORCHRIGHT contMapa

    CORCHLEFT       shift and go to state 75


state 29

    (82) puntero -> PRODUCTO . typeData
    (84) derefer -> PRODUCTO . VARIABLE
    (88) typeData -> . BOOL
    (89) typeData -> . INT
    (90) typeData -> . FLOAT
    (91) typeData -> . STRING

    VARIABLE        shift and go to state 77
    BOOL            shift and go to state 78
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 81

    typeData                       shift and go to state 76

state 30

    (115) lectura -> SCAN . PARLEFT contScan PARRIGHT

    PARLEFT         shift and go to state 82


state 31

    (120) expresionInt -> ENTERO . operadorArit ENTERO
    (132) numericos -> ENTERO .
    (123) operadorArit -> . SUMA
    (124) operadorArit -> . RESTA
    (125) operadorArit -> . PRODUCTO
    (126) operadorArit -> . DIVISION
    (127) operadorArit -> . MODULO

  ! shift/reduce conflict for PRODUCTO resolved as shift
    $end            reduce using rule 132 (numericos -> ENTERO .)
    MAYORQUE        reduce using rule 132 (numericos -> ENTERO .)
    MENORQUE        reduce using rule 132 (numericos -> ENTERO .)
    DIFERENTE       reduce using rule 132 (numericos -> ENTERO .)
    ESIGUAL         reduce using rule 132 (numericos -> ENTERO .)
    MENORIGUAL      reduce using rule 132 (numericos -> ENTERO .)
    MAYORIGUAL      reduce using rule 132 (numericos -> ENTERO .)
    PARRIGHT        reduce using rule 132 (numericos -> ENTERO .)
    RETURN          reduce using rule 132 (numericos -> ENTERO .)
    LLAVERIGHT      reduce using rule 132 (numericos -> ENTERO .)
    PACKAGE         reduce using rule 132 (numericos -> ENTERO .)
    VAR             reduce using rule 132 (numericos -> ENTERO .)
    VARIABLE        reduce using rule 132 (numericos -> ENTERO .)
    IF              reduce using rule 132 (numericos -> ENTERO .)
    FOR             reduce using rule 132 (numericos -> ENTERO .)
    IMPRIMIR        reduce using rule 132 (numericos -> ENTERO .)
    MAP             reduce using rule 132 (numericos -> ENTERO .)
    SCAN            reduce using rule 132 (numericos -> ENTERO .)
    SWITCH          reduce using rule 132 (numericos -> ENTERO .)
    ENTERO          reduce using rule 132 (numericos -> ENTERO .)
    FLOTANTE        reduce using rule 132 (numericos -> ENTERO .)
    BOOL            reduce using rule 132 (numericos -> ENTERO .)
    FUNC            reduce using rule 132 (numericos -> ENTERO .)
    PARLEFT         reduce using rule 132 (numericos -> ENTERO .)
    BREAK           reduce using rule 132 (numericos -> ENTERO .)
    CONTINUE        reduce using rule 132 (numericos -> ENTERO .)
    CASE            reduce using rule 132 (numericos -> ENTERO .)
    DEFAULT         reduce using rule 132 (numericos -> ENTERO .)
    COMA            reduce using rule 132 (numericos -> ENTERO .)
    SUMA            shift and go to state 48
    RESTA           shift and go to state 49
    PRODUCTO        shift and go to state 50
    DIVISION        shift and go to state 51
    MODULO          shift and go to state 52

  ! PRODUCTO        [ reduce using rule 132 (numericos -> ENTERO .) ]

    operadorArit                   shift and go to state 83

state 32

    (183) switch -> SWITCH . VARIABLE LLAVELEFT bloque_switch LLAVERIGHT

    VARIABLE        shift and go to state 84


state 33

    (169) funcion -> funcion_sin_parametro .

    $end            reduce using rule 169 (funcion -> funcion_sin_parametro .)
    RETURN          reduce using rule 169 (funcion -> funcion_sin_parametro .)
    LLAVERIGHT      reduce using rule 169 (funcion -> funcion_sin_parametro .)
    PACKAGE         reduce using rule 169 (funcion -> funcion_sin_parametro .)
    VAR             reduce using rule 169 (funcion -> funcion_sin_parametro .)
    VARIABLE        reduce using rule 169 (funcion -> funcion_sin_parametro .)
    IF              reduce using rule 169 (funcion -> funcion_sin_parametro .)
    FOR             reduce using rule 169 (funcion -> funcion_sin_parametro .)
    IMPRIMIR        reduce using rule 169 (funcion -> funcion_sin_parametro .)
    MAP             reduce using rule 169 (funcion -> funcion_sin_parametro .)
    PRODUCTO        reduce using rule 169 (funcion -> funcion_sin_parametro .)
    SCAN            reduce using rule 169 (funcion -> funcion_sin_parametro .)
    SWITCH          reduce using rule 169 (funcion -> funcion_sin_parametro .)
    ENTERO          reduce using rule 169 (funcion -> funcion_sin_parametro .)
    FLOTANTE        reduce using rule 169 (funcion -> funcion_sin_parametro .)
    BOOL            reduce using rule 169 (funcion -> funcion_sin_parametro .)
    FUNC            reduce using rule 169 (funcion -> funcion_sin_parametro .)
    PARLEFT         reduce using rule 169 (funcion -> funcion_sin_parametro .)
    BREAK           reduce using rule 169 (funcion -> funcion_sin_parametro .)
    CONTINUE        reduce using rule 169 (funcion -> funcion_sin_parametro .)
    CASE            reduce using rule 169 (funcion -> funcion_sin_parametro .)
    DEFAULT         reduce using rule 169 (funcion -> funcion_sin_parametro .)


state 34

    (170) funcion -> funcion_parametro .

    $end            reduce using rule 170 (funcion -> funcion_parametro .)
    RETURN          reduce using rule 170 (funcion -> funcion_parametro .)
    LLAVERIGHT      reduce using rule 170 (funcion -> funcion_parametro .)
    PACKAGE         reduce using rule 170 (funcion -> funcion_parametro .)
    VAR             reduce using rule 170 (funcion -> funcion_parametro .)
    VARIABLE        reduce using rule 170 (funcion -> funcion_parametro .)
    IF              reduce using rule 170 (funcion -> funcion_parametro .)
    FOR             reduce using rule 170 (funcion -> funcion_parametro .)
    IMPRIMIR        reduce using rule 170 (funcion -> funcion_parametro .)
    MAP             reduce using rule 170 (funcion -> funcion_parametro .)
    PRODUCTO        reduce using rule 170 (funcion -> funcion_parametro .)
    SCAN            reduce using rule 170 (funcion -> funcion_parametro .)
    SWITCH          reduce using rule 170 (funcion -> funcion_parametro .)
    ENTERO          reduce using rule 170 (funcion -> funcion_parametro .)
    FLOTANTE        reduce using rule 170 (funcion -> funcion_parametro .)
    BOOL            reduce using rule 170 (funcion -> funcion_parametro .)
    FUNC            reduce using rule 170 (funcion -> funcion_parametro .)
    PARLEFT         reduce using rule 170 (funcion -> funcion_parametro .)
    BREAK           reduce using rule 170 (funcion -> funcion_parametro .)
    CONTINUE        reduce using rule 170 (funcion -> funcion_parametro .)
    CASE            reduce using rule 170 (funcion -> funcion_parametro .)
    DEFAULT         reduce using rule 170 (funcion -> funcion_parametro .)


state 35

    (171) funcion -> funcion_sin_parametro_return .

    $end            reduce using rule 171 (funcion -> funcion_sin_parametro_return .)
    RETURN          reduce using rule 171 (funcion -> funcion_sin_parametro_return .)
    LLAVERIGHT      reduce using rule 171 (funcion -> funcion_sin_parametro_return .)
    PACKAGE         reduce using rule 171 (funcion -> funcion_sin_parametro_return .)
    VAR             reduce using rule 171 (funcion -> funcion_sin_parametro_return .)
    VARIABLE        reduce using rule 171 (funcion -> funcion_sin_parametro_return .)
    IF              reduce using rule 171 (funcion -> funcion_sin_parametro_return .)
    FOR             reduce using rule 171 (funcion -> funcion_sin_parametro_return .)
    IMPRIMIR        reduce using rule 171 (funcion -> funcion_sin_parametro_return .)
    MAP             reduce using rule 171 (funcion -> funcion_sin_parametro_return .)
    PRODUCTO        reduce using rule 171 (funcion -> funcion_sin_parametro_return .)
    SCAN            reduce using rule 171 (funcion -> funcion_sin_parametro_return .)
    SWITCH          reduce using rule 171 (funcion -> funcion_sin_parametro_return .)
    ENTERO          reduce using rule 171 (funcion -> funcion_sin_parametro_return .)
    FLOTANTE        reduce using rule 171 (funcion -> funcion_sin_parametro_return .)
    BOOL            reduce using rule 171 (funcion -> funcion_sin_parametro_return .)
    FUNC            reduce using rule 171 (funcion -> funcion_sin_parametro_return .)
    PARLEFT         reduce using rule 171 (funcion -> funcion_sin_parametro_return .)
    BREAK           reduce using rule 171 (funcion -> funcion_sin_parametro_return .)
    CONTINUE        reduce using rule 171 (funcion -> funcion_sin_parametro_return .)
    CASE            reduce using rule 171 (funcion -> funcion_sin_parametro_return .)
    DEFAULT         reduce using rule 171 (funcion -> funcion_sin_parametro_return .)


state 36

    (135) slices -> declaracion_slices_enteros . LLAVELEFT contArrayEnteros LLAVERIGHT
    (145) slices -> declaracion_slices_enteros .

    LLAVELEFT       shift and go to state 85
    $end            reduce using rule 145 (slices -> declaracion_slices_enteros .)
    RETURN          reduce using rule 145 (slices -> declaracion_slices_enteros .)
    LLAVERIGHT      reduce using rule 145 (slices -> declaracion_slices_enteros .)
    PACKAGE         reduce using rule 145 (slices -> declaracion_slices_enteros .)
    VAR             reduce using rule 145 (slices -> declaracion_slices_enteros .)
    VARIABLE        reduce using rule 145 (slices -> declaracion_slices_enteros .)
    IF              reduce using rule 145 (slices -> declaracion_slices_enteros .)
    FOR             reduce using rule 145 (slices -> declaracion_slices_enteros .)
    IMPRIMIR        reduce using rule 145 (slices -> declaracion_slices_enteros .)
    MAP             reduce using rule 145 (slices -> declaracion_slices_enteros .)
    PRODUCTO        reduce using rule 145 (slices -> declaracion_slices_enteros .)
    SCAN            reduce using rule 145 (slices -> declaracion_slices_enteros .)
    SWITCH          reduce using rule 145 (slices -> declaracion_slices_enteros .)
    ENTERO          reduce using rule 145 (slices -> declaracion_slices_enteros .)
    FLOTANTE        reduce using rule 145 (slices -> declaracion_slices_enteros .)
    BOOL            reduce using rule 145 (slices -> declaracion_slices_enteros .)
    FUNC            reduce using rule 145 (slices -> declaracion_slices_enteros .)
    PARLEFT         reduce using rule 145 (slices -> declaracion_slices_enteros .)
    BREAK           reduce using rule 145 (slices -> declaracion_slices_enteros .)
    CONTINUE        reduce using rule 145 (slices -> declaracion_slices_enteros .)
    CASE            reduce using rule 145 (slices -> declaracion_slices_enteros .)
    DEFAULT         reduce using rule 145 (slices -> declaracion_slices_enteros .)


state 37

    (136) slices -> declaracion_slices_strings . LLAVELEFT contArrayCadenas LLAVERIGHT
    (146) slices -> declaracion_slices_strings .

    LLAVELEFT       shift and go to state 86
    $end            reduce using rule 146 (slices -> declaracion_slices_strings .)
    RETURN          reduce using rule 146 (slices -> declaracion_slices_strings .)
    LLAVERIGHT      reduce using rule 146 (slices -> declaracion_slices_strings .)
    PACKAGE         reduce using rule 146 (slices -> declaracion_slices_strings .)
    VAR             reduce using rule 146 (slices -> declaracion_slices_strings .)
    VARIABLE        reduce using rule 146 (slices -> declaracion_slices_strings .)
    IF              reduce using rule 146 (slices -> declaracion_slices_strings .)
    FOR             reduce using rule 146 (slices -> declaracion_slices_strings .)
    IMPRIMIR        reduce using rule 146 (slices -> declaracion_slices_strings .)
    MAP             reduce using rule 146 (slices -> declaracion_slices_strings .)
    PRODUCTO        reduce using rule 146 (slices -> declaracion_slices_strings .)
    SCAN            reduce using rule 146 (slices -> declaracion_slices_strings .)
    SWITCH          reduce using rule 146 (slices -> declaracion_slices_strings .)
    ENTERO          reduce using rule 146 (slices -> declaracion_slices_strings .)
    FLOTANTE        reduce using rule 146 (slices -> declaracion_slices_strings .)
    BOOL            reduce using rule 146 (slices -> declaracion_slices_strings .)
    FUNC            reduce using rule 146 (slices -> declaracion_slices_strings .)
    PARLEFT         reduce using rule 146 (slices -> declaracion_slices_strings .)
    BREAK           reduce using rule 146 (slices -> declaracion_slices_strings .)
    CONTINUE        reduce using rule 146 (slices -> declaracion_slices_strings .)
    CASE            reduce using rule 146 (slices -> declaracion_slices_strings .)
    DEFAULT         reduce using rule 146 (slices -> declaracion_slices_strings .)


state 38

    (122) expresionFloat -> FLOTANTE . operadorArit FLOTANTE
    (133) numericos -> FLOTANTE .
    (123) operadorArit -> . SUMA
    (124) operadorArit -> . RESTA
    (125) operadorArit -> . PRODUCTO
    (126) operadorArit -> . DIVISION
    (127) operadorArit -> . MODULO

  ! shift/reduce conflict for PRODUCTO resolved as shift
    $end            reduce using rule 133 (numericos -> FLOTANTE .)
    MAYORQUE        reduce using rule 133 (numericos -> FLOTANTE .)
    MENORQUE        reduce using rule 133 (numericos -> FLOTANTE .)
    DIFERENTE       reduce using rule 133 (numericos -> FLOTANTE .)
    ESIGUAL         reduce using rule 133 (numericos -> FLOTANTE .)
    MENORIGUAL      reduce using rule 133 (numericos -> FLOTANTE .)
    MAYORIGUAL      reduce using rule 133 (numericos -> FLOTANTE .)
    PARRIGHT        reduce using rule 133 (numericos -> FLOTANTE .)
    RETURN          reduce using rule 133 (numericos -> FLOTANTE .)
    LLAVERIGHT      reduce using rule 133 (numericos -> FLOTANTE .)
    PACKAGE         reduce using rule 133 (numericos -> FLOTANTE .)
    VAR             reduce using rule 133 (numericos -> FLOTANTE .)
    VARIABLE        reduce using rule 133 (numericos -> FLOTANTE .)
    IF              reduce using rule 133 (numericos -> FLOTANTE .)
    FOR             reduce using rule 133 (numericos -> FLOTANTE .)
    IMPRIMIR        reduce using rule 133 (numericos -> FLOTANTE .)
    MAP             reduce using rule 133 (numericos -> FLOTANTE .)
    SCAN            reduce using rule 133 (numericos -> FLOTANTE .)
    SWITCH          reduce using rule 133 (numericos -> FLOTANTE .)
    ENTERO          reduce using rule 133 (numericos -> FLOTANTE .)
    FLOTANTE        reduce using rule 133 (numericos -> FLOTANTE .)
    BOOL            reduce using rule 133 (numericos -> FLOTANTE .)
    FUNC            reduce using rule 133 (numericos -> FLOTANTE .)
    PARLEFT         reduce using rule 133 (numericos -> FLOTANTE .)
    BREAK           reduce using rule 133 (numericos -> FLOTANTE .)
    CONTINUE        reduce using rule 133 (numericos -> FLOTANTE .)
    CASE            reduce using rule 133 (numericos -> FLOTANTE .)
    DEFAULT         reduce using rule 133 (numericos -> FLOTANTE .)
    COMA            reduce using rule 133 (numericos -> FLOTANTE .)
    SUMA            shift and go to state 48
    RESTA           shift and go to state 49
    PRODUCTO        shift and go to state 50
    DIVISION        shift and go to state 51
    MODULO          shift and go to state 52

  ! PRODUCTO        [ reduce using rule 133 (numericos -> FLOTANTE .) ]

    operadorArit                   shift and go to state 87

state 39

    (129) term -> numericos .
    (130) factor -> numericos .

    $end            reduce using rule 129 (term -> numericos .)
    RETURN          reduce using rule 129 (term -> numericos .)
    LLAVERIGHT      reduce using rule 129 (term -> numericos .)
    PACKAGE         reduce using rule 129 (term -> numericos .)
    VAR             reduce using rule 129 (term -> numericos .)
    VARIABLE        reduce using rule 129 (term -> numericos .)
    IF              reduce using rule 129 (term -> numericos .)
    FOR             reduce using rule 129 (term -> numericos .)
    IMPRIMIR        reduce using rule 129 (term -> numericos .)
    MAP             reduce using rule 129 (term -> numericos .)
    PRODUCTO        reduce using rule 129 (term -> numericos .)
    SCAN            reduce using rule 129 (term -> numericos .)
    SWITCH          reduce using rule 129 (term -> numericos .)
    ENTERO          reduce using rule 129 (term -> numericos .)
    FLOTANTE        reduce using rule 129 (term -> numericos .)
    BOOL            reduce using rule 129 (term -> numericos .)
    FUNC            reduce using rule 129 (term -> numericos .)
    PARLEFT         reduce using rule 129 (term -> numericos .)
    BREAK           reduce using rule 129 (term -> numericos .)
    CONTINUE        reduce using rule 129 (term -> numericos .)
    CASE            reduce using rule 129 (term -> numericos .)
    DEFAULT         reduce using rule 129 (term -> numericos .)
    MAYORQUE        reduce using rule 130 (factor -> numericos .)
    MENORQUE        reduce using rule 130 (factor -> numericos .)
    DIFERENTE       reduce using rule 130 (factor -> numericos .)
    ESIGUAL         reduce using rule 130 (factor -> numericos .)
    MENORIGUAL      reduce using rule 130 (factor -> numericos .)
    MAYORIGUAL      reduce using rule 130 (factor -> numericos .)


state 40

    (172) funcion_sin_parametro -> FUNC . VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (173) funcion_sin_parametro -> FUNC . VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (174) funcion_sin_parametro -> FUNC . VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (176) funcion_parametro -> FUNC . VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> FUNC . VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> FUNC . VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> FUNC . VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT

    VARIABLE        shift and go to state 88


state 41

    (13) instrucciones -> PACKAGE VARIABLE . IMPORT CADENA funcion

    IMPORT          shift and go to state 89


state 42

    (24) asignacion -> VARIABLE DECLARADOR . valor
    (92) array -> VARIABLE DECLARADOR . CORCHLEFT ENTERO CORCHRIGHT contArray
    (137) slices -> VARIABLE DECLARADOR . metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (141) slices -> VARIABLE DECLARADOR . metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (147) slices -> VARIABLE DECLARADOR . metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (151) slices -> VARIABLE DECLARADOR . metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (161) declaracion_slices_enteros -> VARIABLE DECLARADOR . CORCHLEFT CORCHRIGHT INT
    (165) declaracion_slices_strings -> VARIABLE DECLARADOR . CORCHLEFT CORCHRIGHT STRING
    (32) valor -> . booleano
    (33) valor -> . expresion
    (34) valor -> . CADENA
    (35) valor -> . VARIABLE
    (36) valor -> . mapa
    (37) valor -> . refer
    (155) metodos_slices -> . MAKE
    (29) booleano -> . condicion
    (30) booleano -> . TRUE
    (31) booleano -> . FALSE
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (83) refer -> . AMPERSAND VARIABLE
    (213) condicion -> . AND
    (214) condicion -> . OR
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    CORCHLEFT       shift and go to state 92
    CADENA          shift and go to state 96
    VARIABLE        shift and go to state 90
    MAKE            shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102
    MAP             shift and go to state 28
    AMPERSAND       shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    PARLEFT         shift and go to state 27

    valor                          shift and go to state 91
    metodos_slices                 shift and go to state 93
    booleano                       shift and go to state 94
    expresion                      shift and go to state 95
    mapa                           shift and go to state 97
    refer                          shift and go to state 98
    condicion                      shift and go to state 100
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 74

state 43

    (25) asignacion -> VARIABLE IGUAL . valor
    (138) slices -> VARIABLE IGUAL . metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (142) slices -> VARIABLE IGUAL . metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (148) slices -> VARIABLE IGUAL . metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (152) slices -> VARIABLE IGUAL . metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (160) declaracion_slices_enteros -> VARIABLE IGUAL . CORCHLEFT ENTERO CORCHRIGHT INT
    (164) declaracion_slices_strings -> VARIABLE IGUAL . CORCHLEFT ENTERO CORCHRIGHT STRING
    (32) valor -> . booleano
    (33) valor -> . expresion
    (34) valor -> . CADENA
    (35) valor -> . VARIABLE
    (36) valor -> . mapa
    (37) valor -> . refer
    (155) metodos_slices -> . MAKE
    (29) booleano -> . condicion
    (30) booleano -> . TRUE
    (31) booleano -> . FALSE
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (83) refer -> . AMPERSAND VARIABLE
    (213) condicion -> . AND
    (214) condicion -> . OR
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    CORCHLEFT       shift and go to state 108
    CADENA          shift and go to state 96
    VARIABLE        shift and go to state 90
    MAKE            shift and go to state 99
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102
    MAP             shift and go to state 28
    AMPERSAND       shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    PARLEFT         shift and go to state 27

    valor                          shift and go to state 106
    metodos_slices                 shift and go to state 107
    booleano                       shift and go to state 94
    expresion                      shift and go to state 95
    mapa                           shift and go to state 97
    refer                          shift and go to state 98
    condicion                      shift and go to state 100
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 74

state 44

    (26) asignacion -> VARIABLE MASIGUAL . acumular
    (38) acumular -> . expresion
    (39) acumular -> . CADENA
    (40) acumular -> . VARIABLE
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    CADENA          shift and go to state 112
    VARIABLE        shift and go to state 109
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    PARLEFT         shift and go to state 27

    acumular                       shift and go to state 110
    expresion                      shift and go to state 111
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 74

state 45

    (27) asignacion -> VARIABLE MENOSIGUAL . expresion
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    PARLEFT         shift and go to state 27

    expresion                      shift and go to state 113
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 74

state 46

    (17) asignacion -> VAR VARIABLE . BOOL IGUAL booleano
    (18) asignacion -> VAR VARIABLE . INT IGUAL expresionInt
    (19) asignacion -> VAR VARIABLE . FLOAT IGUAL expresionFloat
    (20) asignacion -> VAR VARIABLE . STRING IGUAL CADENA
    (21) asignacion -> VAR VARIABLE . puntero IGUAL refer
    (22) asignacion -> VAR VARIABLE . puntero
    (139) slices -> VAR VARIABLE . DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (140) slices -> VAR VARIABLE . IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (143) slices -> VAR VARIABLE . DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (144) slices -> VAR VARIABLE . IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (149) slices -> VAR VARIABLE . DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (150) slices -> VAR VARIABLE . IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (153) slices -> VAR VARIABLE . DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (154) slices -> VAR VARIABLE . IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (156) declaracion_slices_enteros -> VAR VARIABLE . IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (157) declaracion_slices_enteros -> VAR VARIABLE . CORCHLEFT ENTERO CORCHRIGHT INT
    (158) declaracion_slices_enteros -> VAR VARIABLE . CORCHLEFT CORCHRIGHT INT
    (159) declaracion_slices_enteros -> VAR VARIABLE . IGUAL CORCHLEFT CORCHRIGHT INT
    (162) declaracion_slices_strings -> VAR VARIABLE . IGUAL CORCHLEFT CORCHRIGHT STRING
    (163) declaracion_slices_strings -> VAR VARIABLE . IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (82) puntero -> . PRODUCTO typeData

    BOOL            shift and go to state 114
    INT             shift and go to state 116
    FLOAT           shift and go to state 117
    STRING          shift and go to state 118
    DECLARADOR      shift and go to state 120
    IGUAL           shift and go to state 115
    CORCHLEFT       shift and go to state 121
    PRODUCTO        shift and go to state 122

    puntero                        shift and go to state 119

state 47

    (119) expresionInt -> expresionInt operadorArit . ENTERO

    ENTERO          shift and go to state 123


state 48

    (123) operadorArit -> SUMA .

    ENTERO          reduce using rule 123 (operadorArit -> SUMA .)
    FLOTANTE        reduce using rule 123 (operadorArit -> SUMA .)


state 49

    (124) operadorArit -> RESTA .

    ENTERO          reduce using rule 124 (operadorArit -> RESTA .)
    FLOTANTE        reduce using rule 124 (operadorArit -> RESTA .)


state 50

    (125) operadorArit -> PRODUCTO .

    ENTERO          reduce using rule 125 (operadorArit -> PRODUCTO .)
    FLOTANTE        reduce using rule 125 (operadorArit -> PRODUCTO .)


state 51

    (126) operadorArit -> DIVISION .

    ENTERO          reduce using rule 126 (operadorArit -> DIVISION .)
    FLOTANTE        reduce using rule 126 (operadorArit -> DIVISION .)


state 52

    (127) operadorArit -> MODULO .

    ENTERO          reduce using rule 127 (operadorArit -> MODULO .)
    FLOTANTE        reduce using rule 127 (operadorArit -> MODULO .)


state 53

    (121) expresionFloat -> expresionFloat operadorArit . FLOTANTE

    FLOTANTE        shift and go to state 124


state 54

    (28) asignacion -> derefer IGUAL . valor
    (32) valor -> . booleano
    (33) valor -> . expresion
    (34) valor -> . CADENA
    (35) valor -> . VARIABLE
    (36) valor -> . mapa
    (37) valor -> . refer
    (29) booleano -> . condicion
    (30) booleano -> . TRUE
    (31) booleano -> . FALSE
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (83) refer -> . AMPERSAND VARIABLE
    (213) condicion -> . AND
    (214) condicion -> . OR
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    CADENA          shift and go to state 96
    VARIABLE        shift and go to state 90
    TRUE            shift and go to state 101
    FALSE           shift and go to state 102
    MAP             shift and go to state 28
    AMPERSAND       shift and go to state 103
    AND             shift and go to state 104
    OR              shift and go to state 105
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    PARLEFT         shift and go to state 27

    valor                          shift and go to state 125
    booleano                       shift and go to state 94
    expresion                      shift and go to state 95
    mapa                           shift and go to state 97
    refer                          shift and go to state 98
    condicion                      shift and go to state 100
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 74

state 55

    (204) condiciones -> factor MAYORQUE . factor
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 62
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 68
    FLOTANTE        shift and go to state 69
    PARLEFT         shift and go to state 27

    factor                         shift and go to state 126
    numericos                      shift and go to state 67

state 56

    (205) condiciones -> factor MENORQUE . factor
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 62
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 68
    FLOTANTE        shift and go to state 69
    PARLEFT         shift and go to state 27

    factor                         shift and go to state 127
    numericos                      shift and go to state 67

state 57

    (206) condiciones -> factor DIFERENTE . factor
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 62
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 68
    FLOTANTE        shift and go to state 69
    PARLEFT         shift and go to state 27

    factor                         shift and go to state 128
    numericos                      shift and go to state 67

state 58

    (207) condiciones -> factor ESIGUAL . factor
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 62
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 68
    FLOTANTE        shift and go to state 69
    PARLEFT         shift and go to state 27

    factor                         shift and go to state 129
    numericos                      shift and go to state 67

state 59

    (208) condiciones -> factor MENORIGUAL . factor
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 62
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 68
    FLOTANTE        shift and go to state 69
    PARLEFT         shift and go to state 27

    factor                         shift and go to state 130
    numericos                      shift and go to state 67

state 60

    (209) condiciones -> factor MAYORIGUAL . factor
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 62
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 68
    FLOTANTE        shift and go to state 69
    PARLEFT         shift and go to state 27

    factor                         shift and go to state 131
    numericos                      shift and go to state 67

state 61

    (41) sentenciaIf -> IF comparaciones . LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> IF comparaciones . LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> IF comparaciones . LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> IF comparaciones . LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> IF comparaciones . LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> IF comparaciones . LLAVELEFT RETURN VARIABLE LLAVERIGHT else

    LLAVELEFT       shift and go to state 132


state 62

    (131) factor -> VARIABLE .

    MAYORQUE        reduce using rule 131 (factor -> VARIABLE .)
    MENORQUE        reduce using rule 131 (factor -> VARIABLE .)
    DIFERENTE       reduce using rule 131 (factor -> VARIABLE .)
    ESIGUAL         reduce using rule 131 (factor -> VARIABLE .)
    MENORIGUAL      reduce using rule 131 (factor -> VARIABLE .)
    MAYORIGUAL      reduce using rule 131 (factor -> VARIABLE .)
    $end            reduce using rule 131 (factor -> VARIABLE .)
    AND             reduce using rule 131 (factor -> VARIABLE .)
    OR              reduce using rule 131 (factor -> VARIABLE .)
    LLAVELEFT       reduce using rule 131 (factor -> VARIABLE .)
    PARRIGHT        reduce using rule 131 (factor -> VARIABLE .)
    RETURN          reduce using rule 131 (factor -> VARIABLE .)
    LLAVERIGHT      reduce using rule 131 (factor -> VARIABLE .)
    PACKAGE         reduce using rule 131 (factor -> VARIABLE .)
    VAR             reduce using rule 131 (factor -> VARIABLE .)
    VARIABLE        reduce using rule 131 (factor -> VARIABLE .)
    IF              reduce using rule 131 (factor -> VARIABLE .)
    FOR             reduce using rule 131 (factor -> VARIABLE .)
    IMPRIMIR        reduce using rule 131 (factor -> VARIABLE .)
    MAP             reduce using rule 131 (factor -> VARIABLE .)
    PRODUCTO        reduce using rule 131 (factor -> VARIABLE .)
    SCAN            reduce using rule 131 (factor -> VARIABLE .)
    SWITCH          reduce using rule 131 (factor -> VARIABLE .)
    ENTERO          reduce using rule 131 (factor -> VARIABLE .)
    FLOTANTE        reduce using rule 131 (factor -> VARIABLE .)
    BOOL            reduce using rule 131 (factor -> VARIABLE .)
    FUNC            reduce using rule 131 (factor -> VARIABLE .)
    PARLEFT         reduce using rule 131 (factor -> VARIABLE .)
    PUNTOCOMA       reduce using rule 131 (factor -> VARIABLE .)
    BREAK           reduce using rule 131 (factor -> VARIABLE .)
    CONTINUE        reduce using rule 131 (factor -> VARIABLE .)
    CASE            reduce using rule 131 (factor -> VARIABLE .)
    DEFAULT         reduce using rule 131 (factor -> VARIABLE .)


state 63

    (210) comparaciones -> comparacion .
    (211) comparaciones -> comparacion . anado comparaciones
    (212) anado -> . condicion
    (213) condicion -> . AND
    (214) condicion -> . OR

    LLAVELEFT       reduce using rule 210 (comparaciones -> comparacion .)
    AND             shift and go to state 104
    OR              shift and go to state 105

    anado                          shift and go to state 133
    condicion                      shift and go to state 134

state 64

    (166) comparacion -> condiciones .

    AND             reduce using rule 166 (comparacion -> condiciones .)
    OR              reduce using rule 166 (comparacion -> condiciones .)
    LLAVELEFT       reduce using rule 166 (comparacion -> condiciones .)


state 65

    (167) comparacion -> NEGACION . PARLEFT condiciones PARRIGHT

    PARLEFT         shift and go to state 135


state 66

    (168) comparacion -> PARLEFT . condiciones PARRIGHT
    (134) numericos -> PARLEFT . expresion PARRIGHT
    (204) condiciones -> . factor MAYORQUE factor
    (205) condiciones -> . factor MENORQUE factor
    (206) condiciones -> . factor DIFERENTE factor
    (207) condiciones -> . factor ESIGUAL factor
    (208) condiciones -> . factor MENORIGUAL factor
    (209) condiciones -> . factor MAYORIGUAL factor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 62
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    PARLEFT         shift and go to state 27

    condiciones                    shift and go to state 136
    expresion                      shift and go to state 73
    factor                         shift and go to state 23
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 137

state 67

    (130) factor -> numericos .

    MAYORQUE        reduce using rule 130 (factor -> numericos .)
    MENORQUE        reduce using rule 130 (factor -> numericos .)
    DIFERENTE       reduce using rule 130 (factor -> numericos .)
    ESIGUAL         reduce using rule 130 (factor -> numericos .)
    MENORIGUAL      reduce using rule 130 (factor -> numericos .)
    MAYORIGUAL      reduce using rule 130 (factor -> numericos .)
    $end            reduce using rule 130 (factor -> numericos .)
    AND             reduce using rule 130 (factor -> numericos .)
    OR              reduce using rule 130 (factor -> numericos .)
    LLAVELEFT       reduce using rule 130 (factor -> numericos .)
    PARRIGHT        reduce using rule 130 (factor -> numericos .)
    RETURN          reduce using rule 130 (factor -> numericos .)
    LLAVERIGHT      reduce using rule 130 (factor -> numericos .)
    PACKAGE         reduce using rule 130 (factor -> numericos .)
    VAR             reduce using rule 130 (factor -> numericos .)
    VARIABLE        reduce using rule 130 (factor -> numericos .)
    IF              reduce using rule 130 (factor -> numericos .)
    FOR             reduce using rule 130 (factor -> numericos .)
    IMPRIMIR        reduce using rule 130 (factor -> numericos .)
    MAP             reduce using rule 130 (factor -> numericos .)
    PRODUCTO        reduce using rule 130 (factor -> numericos .)
    SCAN            reduce using rule 130 (factor -> numericos .)
    SWITCH          reduce using rule 130 (factor -> numericos .)
    ENTERO          reduce using rule 130 (factor -> numericos .)
    FLOTANTE        reduce using rule 130 (factor -> numericos .)
    BOOL            reduce using rule 130 (factor -> numericos .)
    FUNC            reduce using rule 130 (factor -> numericos .)
    PARLEFT         reduce using rule 130 (factor -> numericos .)
    PUNTOCOMA       reduce using rule 130 (factor -> numericos .)
    BREAK           reduce using rule 130 (factor -> numericos .)
    CONTINUE        reduce using rule 130 (factor -> numericos .)
    CASE            reduce using rule 130 (factor -> numericos .)
    DEFAULT         reduce using rule 130 (factor -> numericos .)


state 68

    (132) numericos -> ENTERO .

    MAYORQUE        reduce using rule 132 (numericos -> ENTERO .)
    MENORQUE        reduce using rule 132 (numericos -> ENTERO .)
    DIFERENTE       reduce using rule 132 (numericos -> ENTERO .)
    ESIGUAL         reduce using rule 132 (numericos -> ENTERO .)
    MENORIGUAL      reduce using rule 132 (numericos -> ENTERO .)
    MAYORIGUAL      reduce using rule 132 (numericos -> ENTERO .)
    $end            reduce using rule 132 (numericos -> ENTERO .)
    AND             reduce using rule 132 (numericos -> ENTERO .)
    OR              reduce using rule 132 (numericos -> ENTERO .)
    LLAVELEFT       reduce using rule 132 (numericos -> ENTERO .)
    PARRIGHT        reduce using rule 132 (numericos -> ENTERO .)
    RETURN          reduce using rule 132 (numericos -> ENTERO .)
    LLAVERIGHT      reduce using rule 132 (numericos -> ENTERO .)
    PACKAGE         reduce using rule 132 (numericos -> ENTERO .)
    VAR             reduce using rule 132 (numericos -> ENTERO .)
    VARIABLE        reduce using rule 132 (numericos -> ENTERO .)
    IF              reduce using rule 132 (numericos -> ENTERO .)
    FOR             reduce using rule 132 (numericos -> ENTERO .)
    IMPRIMIR        reduce using rule 132 (numericos -> ENTERO .)
    MAP             reduce using rule 132 (numericos -> ENTERO .)
    PRODUCTO        reduce using rule 132 (numericos -> ENTERO .)
    SCAN            reduce using rule 132 (numericos -> ENTERO .)
    SWITCH          reduce using rule 132 (numericos -> ENTERO .)
    ENTERO          reduce using rule 132 (numericos -> ENTERO .)
    FLOTANTE        reduce using rule 132 (numericos -> ENTERO .)
    BOOL            reduce using rule 132 (numericos -> ENTERO .)
    FUNC            reduce using rule 132 (numericos -> ENTERO .)
    PARLEFT         reduce using rule 132 (numericos -> ENTERO .)
    PUNTOCOMA       reduce using rule 132 (numericos -> ENTERO .)
    BREAK           reduce using rule 132 (numericos -> ENTERO .)
    CONTINUE        reduce using rule 132 (numericos -> ENTERO .)
    CASE            reduce using rule 132 (numericos -> ENTERO .)
    DEFAULT         reduce using rule 132 (numericos -> ENTERO .)


state 69

    (133) numericos -> FLOTANTE .

    MAYORQUE        reduce using rule 133 (numericos -> FLOTANTE .)
    MENORQUE        reduce using rule 133 (numericos -> FLOTANTE .)
    DIFERENTE       reduce using rule 133 (numericos -> FLOTANTE .)
    ESIGUAL         reduce using rule 133 (numericos -> FLOTANTE .)
    MENORIGUAL      reduce using rule 133 (numericos -> FLOTANTE .)
    MAYORIGUAL      reduce using rule 133 (numericos -> FLOTANTE .)
    $end            reduce using rule 133 (numericos -> FLOTANTE .)
    AND             reduce using rule 133 (numericos -> FLOTANTE .)
    OR              reduce using rule 133 (numericos -> FLOTANTE .)
    LLAVELEFT       reduce using rule 133 (numericos -> FLOTANTE .)
    PARRIGHT        reduce using rule 133 (numericos -> FLOTANTE .)
    RETURN          reduce using rule 133 (numericos -> FLOTANTE .)
    LLAVERIGHT      reduce using rule 133 (numericos -> FLOTANTE .)
    PACKAGE         reduce using rule 133 (numericos -> FLOTANTE .)
    VAR             reduce using rule 133 (numericos -> FLOTANTE .)
    VARIABLE        reduce using rule 133 (numericos -> FLOTANTE .)
    IF              reduce using rule 133 (numericos -> FLOTANTE .)
    FOR             reduce using rule 133 (numericos -> FLOTANTE .)
    IMPRIMIR        reduce using rule 133 (numericos -> FLOTANTE .)
    MAP             reduce using rule 133 (numericos -> FLOTANTE .)
    PRODUCTO        reduce using rule 133 (numericos -> FLOTANTE .)
    SCAN            reduce using rule 133 (numericos -> FLOTANTE .)
    SWITCH          reduce using rule 133 (numericos -> FLOTANTE .)
    ENTERO          reduce using rule 133 (numericos -> FLOTANTE .)
    FLOTANTE        reduce using rule 133 (numericos -> FLOTANTE .)
    BOOL            reduce using rule 133 (numericos -> FLOTANTE .)
    FUNC            reduce using rule 133 (numericos -> FLOTANTE .)
    PARLEFT         reduce using rule 133 (numericos -> FLOTANTE .)
    PUNTOCOMA       reduce using rule 133 (numericos -> FLOTANTE .)
    BREAK           reduce using rule 133 (numericos -> FLOTANTE .)
    CONTINUE        reduce using rule 133 (numericos -> FLOTANTE .)
    CASE            reduce using rule 133 (numericos -> FLOTANTE .)
    DEFAULT         reduce using rule 133 (numericos -> FLOTANTE .)


state 70

    (85) sentenciaFor -> FOR inicio . PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT

    PUNTOCOMA       shift and go to state 138


state 71

    (86) inicio -> VARIABLE . DECLARADOR ENTERO

    DECLARADOR      shift and go to state 139


state 72

    (106) print -> IMPRIMIR PARLEFT . contPrint PARRIGHT
    (107) contPrint -> . contenido masCont
    (108) contPrint -> . contenido
    (111) contenido -> . CADENA
    (112) contenido -> . VARIABLE
    (113) contenido -> . method
    (114) contenido -> .
    (102) method -> . methodArray
    (103) methodArray -> . namemetodoArr PARLEFT VARIABLE PARRIGHT
    (104) namemetodoArr -> . LEN
    (105) namemetodoArr -> . CAP

    CADENA          shift and go to state 142
    VARIABLE        shift and go to state 143
    COMA            reduce using rule 114 (contenido -> .)
    PARRIGHT        reduce using rule 114 (contenido -> .)
    LEN             shift and go to state 147
    CAP             shift and go to state 148

    contPrint                      shift and go to state 140
    contenido                      shift and go to state 141
    method                         shift and go to state 144
    methodArray                    shift and go to state 145
    namemetodoArr                  shift and go to state 146

state 73

    (134) numericos -> PARLEFT expresion . PARRIGHT

    PARRIGHT        shift and go to state 149


state 74

    (129) term -> numericos .

    PARRIGHT        reduce using rule 129 (term -> numericos .)
    $end            reduce using rule 129 (term -> numericos .)
    RETURN          reduce using rule 129 (term -> numericos .)
    LLAVERIGHT      reduce using rule 129 (term -> numericos .)
    PACKAGE         reduce using rule 129 (term -> numericos .)
    VAR             reduce using rule 129 (term -> numericos .)
    VARIABLE        reduce using rule 129 (term -> numericos .)
    IF              reduce using rule 129 (term -> numericos .)
    FOR             reduce using rule 129 (term -> numericos .)
    IMPRIMIR        reduce using rule 129 (term -> numericos .)
    MAP             reduce using rule 129 (term -> numericos .)
    PRODUCTO        reduce using rule 129 (term -> numericos .)
    SCAN            reduce using rule 129 (term -> numericos .)
    SWITCH          reduce using rule 129 (term -> numericos .)
    ENTERO          reduce using rule 129 (term -> numericos .)
    FLOTANTE        reduce using rule 129 (term -> numericos .)
    BOOL            reduce using rule 129 (term -> numericos .)
    FUNC            reduce using rule 129 (term -> numericos .)
    PARLEFT         reduce using rule 129 (term -> numericos .)
    BREAK           reduce using rule 129 (term -> numericos .)
    CONTINUE        reduce using rule 129 (term -> numericos .)
    CASE            reduce using rule 129 (term -> numericos .)
    DEFAULT         reduce using rule 129 (term -> numericos .)
    COMA            reduce using rule 129 (term -> numericos .)


state 75

    (51) mapa -> MAP CORCHLEFT . STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> MAP CORCHLEFT . STRING CORCHRIGHT contMapa

    STRING          shift and go to state 150


state 76

    (82) puntero -> PRODUCTO typeData .

    $end            reduce using rule 82 (puntero -> PRODUCTO typeData .)
    IGUAL           reduce using rule 82 (puntero -> PRODUCTO typeData .)
    RETURN          reduce using rule 82 (puntero -> PRODUCTO typeData .)
    LLAVERIGHT      reduce using rule 82 (puntero -> PRODUCTO typeData .)
    PACKAGE         reduce using rule 82 (puntero -> PRODUCTO typeData .)
    VAR             reduce using rule 82 (puntero -> PRODUCTO typeData .)
    VARIABLE        reduce using rule 82 (puntero -> PRODUCTO typeData .)
    IF              reduce using rule 82 (puntero -> PRODUCTO typeData .)
    FOR             reduce using rule 82 (puntero -> PRODUCTO typeData .)
    IMPRIMIR        reduce using rule 82 (puntero -> PRODUCTO typeData .)
    MAP             reduce using rule 82 (puntero -> PRODUCTO typeData .)
    PRODUCTO        reduce using rule 82 (puntero -> PRODUCTO typeData .)
    SCAN            reduce using rule 82 (puntero -> PRODUCTO typeData .)
    SWITCH          reduce using rule 82 (puntero -> PRODUCTO typeData .)
    ENTERO          reduce using rule 82 (puntero -> PRODUCTO typeData .)
    FLOTANTE        reduce using rule 82 (puntero -> PRODUCTO typeData .)
    BOOL            reduce using rule 82 (puntero -> PRODUCTO typeData .)
    FUNC            reduce using rule 82 (puntero -> PRODUCTO typeData .)
    PARLEFT         reduce using rule 82 (puntero -> PRODUCTO typeData .)
    BREAK           reduce using rule 82 (puntero -> PRODUCTO typeData .)
    CONTINUE        reduce using rule 82 (puntero -> PRODUCTO typeData .)
    CASE            reduce using rule 82 (puntero -> PRODUCTO typeData .)
    DEFAULT         reduce using rule 82 (puntero -> PRODUCTO typeData .)


state 77

    (84) derefer -> PRODUCTO VARIABLE .

    IGUAL           reduce using rule 84 (derefer -> PRODUCTO VARIABLE .)


state 78

    (88) typeData -> BOOL .

    $end            reduce using rule 88 (typeData -> BOOL .)
    RETURN          reduce using rule 88 (typeData -> BOOL .)
    LLAVERIGHT      reduce using rule 88 (typeData -> BOOL .)
    PACKAGE         reduce using rule 88 (typeData -> BOOL .)
    VAR             reduce using rule 88 (typeData -> BOOL .)
    VARIABLE        reduce using rule 88 (typeData -> BOOL .)
    IF              reduce using rule 88 (typeData -> BOOL .)
    FOR             reduce using rule 88 (typeData -> BOOL .)
    IMPRIMIR        reduce using rule 88 (typeData -> BOOL .)
    MAP             reduce using rule 88 (typeData -> BOOL .)
    PRODUCTO        reduce using rule 88 (typeData -> BOOL .)
    SCAN            reduce using rule 88 (typeData -> BOOL .)
    SWITCH          reduce using rule 88 (typeData -> BOOL .)
    ENTERO          reduce using rule 88 (typeData -> BOOL .)
    FLOTANTE        reduce using rule 88 (typeData -> BOOL .)
    BOOL            reduce using rule 88 (typeData -> BOOL .)
    FUNC            reduce using rule 88 (typeData -> BOOL .)
    PARLEFT         reduce using rule 88 (typeData -> BOOL .)
    BREAK           reduce using rule 88 (typeData -> BOOL .)
    CONTINUE        reduce using rule 88 (typeData -> BOOL .)
    CASE            reduce using rule 88 (typeData -> BOOL .)
    DEFAULT         reduce using rule 88 (typeData -> BOOL .)
    IGUAL           reduce using rule 88 (typeData -> BOOL .)


state 79

    (89) typeData -> INT .

    $end            reduce using rule 89 (typeData -> INT .)
    RETURN          reduce using rule 89 (typeData -> INT .)
    LLAVERIGHT      reduce using rule 89 (typeData -> INT .)
    PACKAGE         reduce using rule 89 (typeData -> INT .)
    VAR             reduce using rule 89 (typeData -> INT .)
    VARIABLE        reduce using rule 89 (typeData -> INT .)
    IF              reduce using rule 89 (typeData -> INT .)
    FOR             reduce using rule 89 (typeData -> INT .)
    IMPRIMIR        reduce using rule 89 (typeData -> INT .)
    MAP             reduce using rule 89 (typeData -> INT .)
    PRODUCTO        reduce using rule 89 (typeData -> INT .)
    SCAN            reduce using rule 89 (typeData -> INT .)
    SWITCH          reduce using rule 89 (typeData -> INT .)
    ENTERO          reduce using rule 89 (typeData -> INT .)
    FLOTANTE        reduce using rule 89 (typeData -> INT .)
    BOOL            reduce using rule 89 (typeData -> INT .)
    FUNC            reduce using rule 89 (typeData -> INT .)
    PARLEFT         reduce using rule 89 (typeData -> INT .)
    BREAK           reduce using rule 89 (typeData -> INT .)
    CONTINUE        reduce using rule 89 (typeData -> INT .)
    CASE            reduce using rule 89 (typeData -> INT .)
    DEFAULT         reduce using rule 89 (typeData -> INT .)
    IGUAL           reduce using rule 89 (typeData -> INT .)


state 80

    (90) typeData -> FLOAT .

    $end            reduce using rule 90 (typeData -> FLOAT .)
    RETURN          reduce using rule 90 (typeData -> FLOAT .)
    LLAVERIGHT      reduce using rule 90 (typeData -> FLOAT .)
    PACKAGE         reduce using rule 90 (typeData -> FLOAT .)
    VAR             reduce using rule 90 (typeData -> FLOAT .)
    VARIABLE        reduce using rule 90 (typeData -> FLOAT .)
    IF              reduce using rule 90 (typeData -> FLOAT .)
    FOR             reduce using rule 90 (typeData -> FLOAT .)
    IMPRIMIR        reduce using rule 90 (typeData -> FLOAT .)
    MAP             reduce using rule 90 (typeData -> FLOAT .)
    PRODUCTO        reduce using rule 90 (typeData -> FLOAT .)
    SCAN            reduce using rule 90 (typeData -> FLOAT .)
    SWITCH          reduce using rule 90 (typeData -> FLOAT .)
    ENTERO          reduce using rule 90 (typeData -> FLOAT .)
    FLOTANTE        reduce using rule 90 (typeData -> FLOAT .)
    BOOL            reduce using rule 90 (typeData -> FLOAT .)
    FUNC            reduce using rule 90 (typeData -> FLOAT .)
    PARLEFT         reduce using rule 90 (typeData -> FLOAT .)
    BREAK           reduce using rule 90 (typeData -> FLOAT .)
    CONTINUE        reduce using rule 90 (typeData -> FLOAT .)
    CASE            reduce using rule 90 (typeData -> FLOAT .)
    DEFAULT         reduce using rule 90 (typeData -> FLOAT .)
    IGUAL           reduce using rule 90 (typeData -> FLOAT .)


state 81

    (91) typeData -> STRING .

    $end            reduce using rule 91 (typeData -> STRING .)
    RETURN          reduce using rule 91 (typeData -> STRING .)
    LLAVERIGHT      reduce using rule 91 (typeData -> STRING .)
    PACKAGE         reduce using rule 91 (typeData -> STRING .)
    VAR             reduce using rule 91 (typeData -> STRING .)
    VARIABLE        reduce using rule 91 (typeData -> STRING .)
    IF              reduce using rule 91 (typeData -> STRING .)
    FOR             reduce using rule 91 (typeData -> STRING .)
    IMPRIMIR        reduce using rule 91 (typeData -> STRING .)
    MAP             reduce using rule 91 (typeData -> STRING .)
    PRODUCTO        reduce using rule 91 (typeData -> STRING .)
    SCAN            reduce using rule 91 (typeData -> STRING .)
    SWITCH          reduce using rule 91 (typeData -> STRING .)
    ENTERO          reduce using rule 91 (typeData -> STRING .)
    FLOTANTE        reduce using rule 91 (typeData -> STRING .)
    BOOL            reduce using rule 91 (typeData -> STRING .)
    FUNC            reduce using rule 91 (typeData -> STRING .)
    PARLEFT         reduce using rule 91 (typeData -> STRING .)
    BREAK           reduce using rule 91 (typeData -> STRING .)
    CONTINUE        reduce using rule 91 (typeData -> STRING .)
    CASE            reduce using rule 91 (typeData -> STRING .)
    DEFAULT         reduce using rule 91 (typeData -> STRING .)
    IGUAL           reduce using rule 91 (typeData -> STRING .)


state 82

    (115) lectura -> SCAN PARLEFT . contScan PARRIGHT
    (116) contScan -> . AMPERSAND VARIABLE

    AMPERSAND       shift and go to state 152

    contScan                       shift and go to state 151

state 83

    (120) expresionInt -> ENTERO operadorArit . ENTERO

    ENTERO          shift and go to state 153


state 84

    (183) switch -> SWITCH VARIABLE . LLAVELEFT bloque_switch LLAVERIGHT

    LLAVELEFT       shift and go to state 154


state 85

    (135) slices -> declaracion_slices_enteros LLAVELEFT . contArrayEnteros LLAVERIGHT
    (96) contArrayEnteros -> . ENTERO COMA ENTERO
    (97) contArrayEnteros -> . contArrayEnteros COMA ENTERO

    ENTERO          shift and go to state 156

    contArrayEnteros               shift and go to state 155

state 86

    (136) slices -> declaracion_slices_strings LLAVELEFT . contArrayCadenas LLAVERIGHT
    (98) contArrayCadenas -> . CADENA COMA CADENA
    (99) contArrayCadenas -> . contArrayCadenas COMA CADENA

    CADENA          shift and go to state 158

    contArrayCadenas               shift and go to state 157

state 87

    (122) expresionFloat -> FLOTANTE operadorArit . FLOTANTE

    FLOTANTE        shift and go to state 159


state 88

    (172) funcion_sin_parametro -> FUNC VARIABLE . PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (173) funcion_sin_parametro -> FUNC VARIABLE . PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (174) funcion_sin_parametro -> FUNC VARIABLE . PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (176) funcion_parametro -> FUNC VARIABLE . PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> FUNC VARIABLE . PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> FUNC VARIABLE . PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> FUNC VARIABLE . PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT

    PARLEFT         shift and go to state 160


state 89

    (13) instrucciones -> PACKAGE VARIABLE IMPORT . CADENA funcion

    CADENA          shift and go to state 161


state 90

    (35) valor -> VARIABLE .

    $end            reduce using rule 35 (valor -> VARIABLE .)
    RETURN          reduce using rule 35 (valor -> VARIABLE .)
    LLAVERIGHT      reduce using rule 35 (valor -> VARIABLE .)
    PACKAGE         reduce using rule 35 (valor -> VARIABLE .)
    VAR             reduce using rule 35 (valor -> VARIABLE .)
    VARIABLE        reduce using rule 35 (valor -> VARIABLE .)
    IF              reduce using rule 35 (valor -> VARIABLE .)
    FOR             reduce using rule 35 (valor -> VARIABLE .)
    IMPRIMIR        reduce using rule 35 (valor -> VARIABLE .)
    MAP             reduce using rule 35 (valor -> VARIABLE .)
    PRODUCTO        reduce using rule 35 (valor -> VARIABLE .)
    SCAN            reduce using rule 35 (valor -> VARIABLE .)
    SWITCH          reduce using rule 35 (valor -> VARIABLE .)
    ENTERO          reduce using rule 35 (valor -> VARIABLE .)
    FLOTANTE        reduce using rule 35 (valor -> VARIABLE .)
    BOOL            reduce using rule 35 (valor -> VARIABLE .)
    FUNC            reduce using rule 35 (valor -> VARIABLE .)
    PARLEFT         reduce using rule 35 (valor -> VARIABLE .)
    BREAK           reduce using rule 35 (valor -> VARIABLE .)
    CONTINUE        reduce using rule 35 (valor -> VARIABLE .)
    CASE            reduce using rule 35 (valor -> VARIABLE .)
    DEFAULT         reduce using rule 35 (valor -> VARIABLE .)


state 91

    (24) asignacion -> VARIABLE DECLARADOR valor .

    $end            reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    RETURN          reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    LLAVERIGHT      reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    PACKAGE         reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    VAR             reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    VARIABLE        reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    IF              reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    FOR             reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    IMPRIMIR        reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    MAP             reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    PRODUCTO        reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    SCAN            reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    SWITCH          reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    ENTERO          reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    FLOTANTE        reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    BOOL            reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    FUNC            reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    PARLEFT         reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    BREAK           reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    CONTINUE        reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    CASE            reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)
    DEFAULT         reduce using rule 24 (asignacion -> VARIABLE DECLARADOR valor .)


state 92

    (92) array -> VARIABLE DECLARADOR CORCHLEFT . ENTERO CORCHRIGHT contArray
    (161) declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT . CORCHRIGHT INT
    (165) declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT . CORCHRIGHT STRING

    ENTERO          shift and go to state 162
    CORCHRIGHT      shift and go to state 163


state 93

    (137) slices -> VARIABLE DECLARADOR metodos_slices . PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (141) slices -> VARIABLE DECLARADOR metodos_slices . PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (147) slices -> VARIABLE DECLARADOR metodos_slices . PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (151) slices -> VARIABLE DECLARADOR metodos_slices . PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT

    PARLEFT         shift and go to state 164


state 94

    (32) valor -> booleano .

    $end            reduce using rule 32 (valor -> booleano .)
    RETURN          reduce using rule 32 (valor -> booleano .)
    LLAVERIGHT      reduce using rule 32 (valor -> booleano .)
    PACKAGE         reduce using rule 32 (valor -> booleano .)
    VAR             reduce using rule 32 (valor -> booleano .)
    VARIABLE        reduce using rule 32 (valor -> booleano .)
    IF              reduce using rule 32 (valor -> booleano .)
    FOR             reduce using rule 32 (valor -> booleano .)
    IMPRIMIR        reduce using rule 32 (valor -> booleano .)
    MAP             reduce using rule 32 (valor -> booleano .)
    PRODUCTO        reduce using rule 32 (valor -> booleano .)
    SCAN            reduce using rule 32 (valor -> booleano .)
    SWITCH          reduce using rule 32 (valor -> booleano .)
    ENTERO          reduce using rule 32 (valor -> booleano .)
    FLOTANTE        reduce using rule 32 (valor -> booleano .)
    BOOL            reduce using rule 32 (valor -> booleano .)
    FUNC            reduce using rule 32 (valor -> booleano .)
    PARLEFT         reduce using rule 32 (valor -> booleano .)
    BREAK           reduce using rule 32 (valor -> booleano .)
    CONTINUE        reduce using rule 32 (valor -> booleano .)
    CASE            reduce using rule 32 (valor -> booleano .)
    DEFAULT         reduce using rule 32 (valor -> booleano .)


state 95

    (33) valor -> expresion .

    $end            reduce using rule 33 (valor -> expresion .)
    RETURN          reduce using rule 33 (valor -> expresion .)
    LLAVERIGHT      reduce using rule 33 (valor -> expresion .)
    PACKAGE         reduce using rule 33 (valor -> expresion .)
    VAR             reduce using rule 33 (valor -> expresion .)
    VARIABLE        reduce using rule 33 (valor -> expresion .)
    IF              reduce using rule 33 (valor -> expresion .)
    FOR             reduce using rule 33 (valor -> expresion .)
    IMPRIMIR        reduce using rule 33 (valor -> expresion .)
    MAP             reduce using rule 33 (valor -> expresion .)
    PRODUCTO        reduce using rule 33 (valor -> expresion .)
    SCAN            reduce using rule 33 (valor -> expresion .)
    SWITCH          reduce using rule 33 (valor -> expresion .)
    ENTERO          reduce using rule 33 (valor -> expresion .)
    FLOTANTE        reduce using rule 33 (valor -> expresion .)
    BOOL            reduce using rule 33 (valor -> expresion .)
    FUNC            reduce using rule 33 (valor -> expresion .)
    PARLEFT         reduce using rule 33 (valor -> expresion .)
    BREAK           reduce using rule 33 (valor -> expresion .)
    CONTINUE        reduce using rule 33 (valor -> expresion .)
    CASE            reduce using rule 33 (valor -> expresion .)
    DEFAULT         reduce using rule 33 (valor -> expresion .)


state 96

    (34) valor -> CADENA .

    $end            reduce using rule 34 (valor -> CADENA .)
    RETURN          reduce using rule 34 (valor -> CADENA .)
    LLAVERIGHT      reduce using rule 34 (valor -> CADENA .)
    PACKAGE         reduce using rule 34 (valor -> CADENA .)
    VAR             reduce using rule 34 (valor -> CADENA .)
    VARIABLE        reduce using rule 34 (valor -> CADENA .)
    IF              reduce using rule 34 (valor -> CADENA .)
    FOR             reduce using rule 34 (valor -> CADENA .)
    IMPRIMIR        reduce using rule 34 (valor -> CADENA .)
    MAP             reduce using rule 34 (valor -> CADENA .)
    PRODUCTO        reduce using rule 34 (valor -> CADENA .)
    SCAN            reduce using rule 34 (valor -> CADENA .)
    SWITCH          reduce using rule 34 (valor -> CADENA .)
    ENTERO          reduce using rule 34 (valor -> CADENA .)
    FLOTANTE        reduce using rule 34 (valor -> CADENA .)
    BOOL            reduce using rule 34 (valor -> CADENA .)
    FUNC            reduce using rule 34 (valor -> CADENA .)
    PARLEFT         reduce using rule 34 (valor -> CADENA .)
    BREAK           reduce using rule 34 (valor -> CADENA .)
    CONTINUE        reduce using rule 34 (valor -> CADENA .)
    CASE            reduce using rule 34 (valor -> CADENA .)
    DEFAULT         reduce using rule 34 (valor -> CADENA .)


state 97

    (36) valor -> mapa .

    $end            reduce using rule 36 (valor -> mapa .)
    RETURN          reduce using rule 36 (valor -> mapa .)
    LLAVERIGHT      reduce using rule 36 (valor -> mapa .)
    PACKAGE         reduce using rule 36 (valor -> mapa .)
    VAR             reduce using rule 36 (valor -> mapa .)
    VARIABLE        reduce using rule 36 (valor -> mapa .)
    IF              reduce using rule 36 (valor -> mapa .)
    FOR             reduce using rule 36 (valor -> mapa .)
    IMPRIMIR        reduce using rule 36 (valor -> mapa .)
    MAP             reduce using rule 36 (valor -> mapa .)
    PRODUCTO        reduce using rule 36 (valor -> mapa .)
    SCAN            reduce using rule 36 (valor -> mapa .)
    SWITCH          reduce using rule 36 (valor -> mapa .)
    ENTERO          reduce using rule 36 (valor -> mapa .)
    FLOTANTE        reduce using rule 36 (valor -> mapa .)
    BOOL            reduce using rule 36 (valor -> mapa .)
    FUNC            reduce using rule 36 (valor -> mapa .)
    PARLEFT         reduce using rule 36 (valor -> mapa .)
    BREAK           reduce using rule 36 (valor -> mapa .)
    CONTINUE        reduce using rule 36 (valor -> mapa .)
    CASE            reduce using rule 36 (valor -> mapa .)
    DEFAULT         reduce using rule 36 (valor -> mapa .)


state 98

    (37) valor -> refer .

    $end            reduce using rule 37 (valor -> refer .)
    RETURN          reduce using rule 37 (valor -> refer .)
    LLAVERIGHT      reduce using rule 37 (valor -> refer .)
    PACKAGE         reduce using rule 37 (valor -> refer .)
    VAR             reduce using rule 37 (valor -> refer .)
    VARIABLE        reduce using rule 37 (valor -> refer .)
    IF              reduce using rule 37 (valor -> refer .)
    FOR             reduce using rule 37 (valor -> refer .)
    IMPRIMIR        reduce using rule 37 (valor -> refer .)
    MAP             reduce using rule 37 (valor -> refer .)
    PRODUCTO        reduce using rule 37 (valor -> refer .)
    SCAN            reduce using rule 37 (valor -> refer .)
    SWITCH          reduce using rule 37 (valor -> refer .)
    ENTERO          reduce using rule 37 (valor -> refer .)
    FLOTANTE        reduce using rule 37 (valor -> refer .)
    BOOL            reduce using rule 37 (valor -> refer .)
    FUNC            reduce using rule 37 (valor -> refer .)
    PARLEFT         reduce using rule 37 (valor -> refer .)
    BREAK           reduce using rule 37 (valor -> refer .)
    CONTINUE        reduce using rule 37 (valor -> refer .)
    CASE            reduce using rule 37 (valor -> refer .)
    DEFAULT         reduce using rule 37 (valor -> refer .)


state 99

    (155) metodos_slices -> MAKE .

    PARLEFT         reduce using rule 155 (metodos_slices -> MAKE .)


state 100

    (29) booleano -> condicion .

    $end            reduce using rule 29 (booleano -> condicion .)
    RETURN          reduce using rule 29 (booleano -> condicion .)
    LLAVERIGHT      reduce using rule 29 (booleano -> condicion .)
    PACKAGE         reduce using rule 29 (booleano -> condicion .)
    VAR             reduce using rule 29 (booleano -> condicion .)
    VARIABLE        reduce using rule 29 (booleano -> condicion .)
    IF              reduce using rule 29 (booleano -> condicion .)
    FOR             reduce using rule 29 (booleano -> condicion .)
    IMPRIMIR        reduce using rule 29 (booleano -> condicion .)
    MAP             reduce using rule 29 (booleano -> condicion .)
    PRODUCTO        reduce using rule 29 (booleano -> condicion .)
    SCAN            reduce using rule 29 (booleano -> condicion .)
    SWITCH          reduce using rule 29 (booleano -> condicion .)
    ENTERO          reduce using rule 29 (booleano -> condicion .)
    FLOTANTE        reduce using rule 29 (booleano -> condicion .)
    BOOL            reduce using rule 29 (booleano -> condicion .)
    FUNC            reduce using rule 29 (booleano -> condicion .)
    PARLEFT         reduce using rule 29 (booleano -> condicion .)
    BREAK           reduce using rule 29 (booleano -> condicion .)
    CONTINUE        reduce using rule 29 (booleano -> condicion .)
    CASE            reduce using rule 29 (booleano -> condicion .)
    DEFAULT         reduce using rule 29 (booleano -> condicion .)


state 101

    (30) booleano -> TRUE .

    $end            reduce using rule 30 (booleano -> TRUE .)
    RETURN          reduce using rule 30 (booleano -> TRUE .)
    LLAVERIGHT      reduce using rule 30 (booleano -> TRUE .)
    PACKAGE         reduce using rule 30 (booleano -> TRUE .)
    VAR             reduce using rule 30 (booleano -> TRUE .)
    VARIABLE        reduce using rule 30 (booleano -> TRUE .)
    IF              reduce using rule 30 (booleano -> TRUE .)
    FOR             reduce using rule 30 (booleano -> TRUE .)
    IMPRIMIR        reduce using rule 30 (booleano -> TRUE .)
    MAP             reduce using rule 30 (booleano -> TRUE .)
    PRODUCTO        reduce using rule 30 (booleano -> TRUE .)
    SCAN            reduce using rule 30 (booleano -> TRUE .)
    SWITCH          reduce using rule 30 (booleano -> TRUE .)
    ENTERO          reduce using rule 30 (booleano -> TRUE .)
    FLOTANTE        reduce using rule 30 (booleano -> TRUE .)
    BOOL            reduce using rule 30 (booleano -> TRUE .)
    FUNC            reduce using rule 30 (booleano -> TRUE .)
    PARLEFT         reduce using rule 30 (booleano -> TRUE .)
    BREAK           reduce using rule 30 (booleano -> TRUE .)
    CONTINUE        reduce using rule 30 (booleano -> TRUE .)
    CASE            reduce using rule 30 (booleano -> TRUE .)
    DEFAULT         reduce using rule 30 (booleano -> TRUE .)


state 102

    (31) booleano -> FALSE .

    $end            reduce using rule 31 (booleano -> FALSE .)
    RETURN          reduce using rule 31 (booleano -> FALSE .)
    LLAVERIGHT      reduce using rule 31 (booleano -> FALSE .)
    PACKAGE         reduce using rule 31 (booleano -> FALSE .)
    VAR             reduce using rule 31 (booleano -> FALSE .)
    VARIABLE        reduce using rule 31 (booleano -> FALSE .)
    IF              reduce using rule 31 (booleano -> FALSE .)
    FOR             reduce using rule 31 (booleano -> FALSE .)
    IMPRIMIR        reduce using rule 31 (booleano -> FALSE .)
    MAP             reduce using rule 31 (booleano -> FALSE .)
    PRODUCTO        reduce using rule 31 (booleano -> FALSE .)
    SCAN            reduce using rule 31 (booleano -> FALSE .)
    SWITCH          reduce using rule 31 (booleano -> FALSE .)
    ENTERO          reduce using rule 31 (booleano -> FALSE .)
    FLOTANTE        reduce using rule 31 (booleano -> FALSE .)
    BOOL            reduce using rule 31 (booleano -> FALSE .)
    FUNC            reduce using rule 31 (booleano -> FALSE .)
    PARLEFT         reduce using rule 31 (booleano -> FALSE .)
    BREAK           reduce using rule 31 (booleano -> FALSE .)
    CONTINUE        reduce using rule 31 (booleano -> FALSE .)
    CASE            reduce using rule 31 (booleano -> FALSE .)
    DEFAULT         reduce using rule 31 (booleano -> FALSE .)


state 103

    (83) refer -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 165


state 104

    (213) condicion -> AND .

    $end            reduce using rule 213 (condicion -> AND .)
    RETURN          reduce using rule 213 (condicion -> AND .)
    LLAVERIGHT      reduce using rule 213 (condicion -> AND .)
    PACKAGE         reduce using rule 213 (condicion -> AND .)
    VAR             reduce using rule 213 (condicion -> AND .)
    VARIABLE        reduce using rule 213 (condicion -> AND .)
    IF              reduce using rule 213 (condicion -> AND .)
    FOR             reduce using rule 213 (condicion -> AND .)
    IMPRIMIR        reduce using rule 213 (condicion -> AND .)
    MAP             reduce using rule 213 (condicion -> AND .)
    PRODUCTO        reduce using rule 213 (condicion -> AND .)
    SCAN            reduce using rule 213 (condicion -> AND .)
    SWITCH          reduce using rule 213 (condicion -> AND .)
    ENTERO          reduce using rule 213 (condicion -> AND .)
    FLOTANTE        reduce using rule 213 (condicion -> AND .)
    BOOL            reduce using rule 213 (condicion -> AND .)
    FUNC            reduce using rule 213 (condicion -> AND .)
    PARLEFT         reduce using rule 213 (condicion -> AND .)
    BREAK           reduce using rule 213 (condicion -> AND .)
    CONTINUE        reduce using rule 213 (condicion -> AND .)
    CASE            reduce using rule 213 (condicion -> AND .)
    DEFAULT         reduce using rule 213 (condicion -> AND .)
    NEGACION        reduce using rule 213 (condicion -> AND .)
    COMA            reduce using rule 213 (condicion -> AND .)


state 105

    (214) condicion -> OR .

    $end            reduce using rule 214 (condicion -> OR .)
    RETURN          reduce using rule 214 (condicion -> OR .)
    LLAVERIGHT      reduce using rule 214 (condicion -> OR .)
    PACKAGE         reduce using rule 214 (condicion -> OR .)
    VAR             reduce using rule 214 (condicion -> OR .)
    VARIABLE        reduce using rule 214 (condicion -> OR .)
    IF              reduce using rule 214 (condicion -> OR .)
    FOR             reduce using rule 214 (condicion -> OR .)
    IMPRIMIR        reduce using rule 214 (condicion -> OR .)
    MAP             reduce using rule 214 (condicion -> OR .)
    PRODUCTO        reduce using rule 214 (condicion -> OR .)
    SCAN            reduce using rule 214 (condicion -> OR .)
    SWITCH          reduce using rule 214 (condicion -> OR .)
    ENTERO          reduce using rule 214 (condicion -> OR .)
    FLOTANTE        reduce using rule 214 (condicion -> OR .)
    BOOL            reduce using rule 214 (condicion -> OR .)
    FUNC            reduce using rule 214 (condicion -> OR .)
    PARLEFT         reduce using rule 214 (condicion -> OR .)
    BREAK           reduce using rule 214 (condicion -> OR .)
    CONTINUE        reduce using rule 214 (condicion -> OR .)
    CASE            reduce using rule 214 (condicion -> OR .)
    DEFAULT         reduce using rule 214 (condicion -> OR .)
    NEGACION        reduce using rule 214 (condicion -> OR .)
    COMA            reduce using rule 214 (condicion -> OR .)


state 106

    (25) asignacion -> VARIABLE IGUAL valor .

    $end            reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    RETURN          reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    LLAVERIGHT      reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    PACKAGE         reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    VAR             reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    VARIABLE        reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    IF              reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    FOR             reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    IMPRIMIR        reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    MAP             reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    PRODUCTO        reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    SCAN            reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    SWITCH          reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    ENTERO          reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    FLOTANTE        reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    BOOL            reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    FUNC            reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    PARLEFT         reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    BREAK           reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    CONTINUE        reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    CASE            reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)
    DEFAULT         reduce using rule 25 (asignacion -> VARIABLE IGUAL valor .)


state 107

    (138) slices -> VARIABLE IGUAL metodos_slices . PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (142) slices -> VARIABLE IGUAL metodos_slices . PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (148) slices -> VARIABLE IGUAL metodos_slices . PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (152) slices -> VARIABLE IGUAL metodos_slices . PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT

    PARLEFT         shift and go to state 166


state 108

    (160) declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT . ENTERO CORCHRIGHT INT
    (164) declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT . ENTERO CORCHRIGHT STRING

    ENTERO          shift and go to state 167


state 109

    (40) acumular -> VARIABLE .

    $end            reduce using rule 40 (acumular -> VARIABLE .)
    RETURN          reduce using rule 40 (acumular -> VARIABLE .)
    LLAVERIGHT      reduce using rule 40 (acumular -> VARIABLE .)
    PACKAGE         reduce using rule 40 (acumular -> VARIABLE .)
    VAR             reduce using rule 40 (acumular -> VARIABLE .)
    VARIABLE        reduce using rule 40 (acumular -> VARIABLE .)
    IF              reduce using rule 40 (acumular -> VARIABLE .)
    FOR             reduce using rule 40 (acumular -> VARIABLE .)
    IMPRIMIR        reduce using rule 40 (acumular -> VARIABLE .)
    MAP             reduce using rule 40 (acumular -> VARIABLE .)
    PRODUCTO        reduce using rule 40 (acumular -> VARIABLE .)
    SCAN            reduce using rule 40 (acumular -> VARIABLE .)
    SWITCH          reduce using rule 40 (acumular -> VARIABLE .)
    ENTERO          reduce using rule 40 (acumular -> VARIABLE .)
    FLOTANTE        reduce using rule 40 (acumular -> VARIABLE .)
    BOOL            reduce using rule 40 (acumular -> VARIABLE .)
    FUNC            reduce using rule 40 (acumular -> VARIABLE .)
    PARLEFT         reduce using rule 40 (acumular -> VARIABLE .)
    BREAK           reduce using rule 40 (acumular -> VARIABLE .)
    CONTINUE        reduce using rule 40 (acumular -> VARIABLE .)
    CASE            reduce using rule 40 (acumular -> VARIABLE .)
    DEFAULT         reduce using rule 40 (acumular -> VARIABLE .)


state 110

    (26) asignacion -> VARIABLE MASIGUAL acumular .

    $end            reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    RETURN          reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    LLAVERIGHT      reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    PACKAGE         reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    VAR             reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    VARIABLE        reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    IF              reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    FOR             reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    IMPRIMIR        reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    MAP             reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    PRODUCTO        reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    SCAN            reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    SWITCH          reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    ENTERO          reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    FLOTANTE        reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    BOOL            reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    FUNC            reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    PARLEFT         reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    BREAK           reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    CONTINUE        reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    CASE            reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)
    DEFAULT         reduce using rule 26 (asignacion -> VARIABLE MASIGUAL acumular .)


state 111

    (38) acumular -> expresion .

    $end            reduce using rule 38 (acumular -> expresion .)
    RETURN          reduce using rule 38 (acumular -> expresion .)
    LLAVERIGHT      reduce using rule 38 (acumular -> expresion .)
    PACKAGE         reduce using rule 38 (acumular -> expresion .)
    VAR             reduce using rule 38 (acumular -> expresion .)
    VARIABLE        reduce using rule 38 (acumular -> expresion .)
    IF              reduce using rule 38 (acumular -> expresion .)
    FOR             reduce using rule 38 (acumular -> expresion .)
    IMPRIMIR        reduce using rule 38 (acumular -> expresion .)
    MAP             reduce using rule 38 (acumular -> expresion .)
    PRODUCTO        reduce using rule 38 (acumular -> expresion .)
    SCAN            reduce using rule 38 (acumular -> expresion .)
    SWITCH          reduce using rule 38 (acumular -> expresion .)
    ENTERO          reduce using rule 38 (acumular -> expresion .)
    FLOTANTE        reduce using rule 38 (acumular -> expresion .)
    BOOL            reduce using rule 38 (acumular -> expresion .)
    FUNC            reduce using rule 38 (acumular -> expresion .)
    PARLEFT         reduce using rule 38 (acumular -> expresion .)
    BREAK           reduce using rule 38 (acumular -> expresion .)
    CONTINUE        reduce using rule 38 (acumular -> expresion .)
    CASE            reduce using rule 38 (acumular -> expresion .)
    DEFAULT         reduce using rule 38 (acumular -> expresion .)


state 112

    (39) acumular -> CADENA .

    $end            reduce using rule 39 (acumular -> CADENA .)
    RETURN          reduce using rule 39 (acumular -> CADENA .)
    LLAVERIGHT      reduce using rule 39 (acumular -> CADENA .)
    PACKAGE         reduce using rule 39 (acumular -> CADENA .)
    VAR             reduce using rule 39 (acumular -> CADENA .)
    VARIABLE        reduce using rule 39 (acumular -> CADENA .)
    IF              reduce using rule 39 (acumular -> CADENA .)
    FOR             reduce using rule 39 (acumular -> CADENA .)
    IMPRIMIR        reduce using rule 39 (acumular -> CADENA .)
    MAP             reduce using rule 39 (acumular -> CADENA .)
    PRODUCTO        reduce using rule 39 (acumular -> CADENA .)
    SCAN            reduce using rule 39 (acumular -> CADENA .)
    SWITCH          reduce using rule 39 (acumular -> CADENA .)
    ENTERO          reduce using rule 39 (acumular -> CADENA .)
    FLOTANTE        reduce using rule 39 (acumular -> CADENA .)
    BOOL            reduce using rule 39 (acumular -> CADENA .)
    FUNC            reduce using rule 39 (acumular -> CADENA .)
    PARLEFT         reduce using rule 39 (acumular -> CADENA .)
    BREAK           reduce using rule 39 (acumular -> CADENA .)
    CONTINUE        reduce using rule 39 (acumular -> CADENA .)
    CASE            reduce using rule 39 (acumular -> CADENA .)
    DEFAULT         reduce using rule 39 (acumular -> CADENA .)


state 113

    (27) asignacion -> VARIABLE MENOSIGUAL expresion .

    $end            reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    RETURN          reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    LLAVERIGHT      reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    PACKAGE         reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    VAR             reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    VARIABLE        reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    IF              reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    FOR             reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    IMPRIMIR        reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    MAP             reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    PRODUCTO        reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    SCAN            reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    SWITCH          reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    ENTERO          reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    FLOTANTE        reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    BOOL            reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    FUNC            reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    PARLEFT         reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    BREAK           reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    CONTINUE        reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    CASE            reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)
    DEFAULT         reduce using rule 27 (asignacion -> VARIABLE MENOSIGUAL expresion .)


state 114

    (17) asignacion -> VAR VARIABLE BOOL . IGUAL booleano

    IGUAL           shift and go to state 168


state 115

    (140) slices -> VAR VARIABLE IGUAL . metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (144) slices -> VAR VARIABLE IGUAL . metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (150) slices -> VAR VARIABLE IGUAL . metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (154) slices -> VAR VARIABLE IGUAL . metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (156) declaracion_slices_enteros -> VAR VARIABLE IGUAL . CORCHLEFT ENTERO CORCHRIGHT INT
    (159) declaracion_slices_enteros -> VAR VARIABLE IGUAL . CORCHLEFT CORCHRIGHT INT
    (162) declaracion_slices_strings -> VAR VARIABLE IGUAL . CORCHLEFT CORCHRIGHT STRING
    (163) declaracion_slices_strings -> VAR VARIABLE IGUAL . CORCHLEFT ENTERO CORCHRIGHT STRING
    (155) metodos_slices -> . MAKE

    CORCHLEFT       shift and go to state 170
    MAKE            shift and go to state 99

    metodos_slices                 shift and go to state 169

state 116

    (18) asignacion -> VAR VARIABLE INT . IGUAL expresionInt

    IGUAL           shift and go to state 171


state 117

    (19) asignacion -> VAR VARIABLE FLOAT . IGUAL expresionFloat

    IGUAL           shift and go to state 172


state 118

    (20) asignacion -> VAR VARIABLE STRING . IGUAL CADENA

    IGUAL           shift and go to state 173


state 119

    (21) asignacion -> VAR VARIABLE puntero . IGUAL refer
    (22) asignacion -> VAR VARIABLE puntero .

    IGUAL           shift and go to state 174
    $end            reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    RETURN          reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    LLAVERIGHT      reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    PACKAGE         reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    VAR             reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    VARIABLE        reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    IF              reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    FOR             reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    IMPRIMIR        reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    MAP             reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    PRODUCTO        reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    SCAN            reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    SWITCH          reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    ENTERO          reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    FLOTANTE        reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    BOOL            reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    FUNC            reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    PARLEFT         reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    BREAK           reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    CONTINUE        reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    CASE            reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)
    DEFAULT         reduce using rule 22 (asignacion -> VAR VARIABLE puntero .)


state 120

    (139) slices -> VAR VARIABLE DECLARADOR . metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (143) slices -> VAR VARIABLE DECLARADOR . metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (149) slices -> VAR VARIABLE DECLARADOR . metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (153) slices -> VAR VARIABLE DECLARADOR . metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (155) metodos_slices -> . MAKE

    MAKE            shift and go to state 99

    metodos_slices                 shift and go to state 175

state 121

    (157) declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT . ENTERO CORCHRIGHT INT
    (158) declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT . CORCHRIGHT INT

    ENTERO          shift and go to state 176
    CORCHRIGHT      shift and go to state 177


state 122

    (82) puntero -> PRODUCTO . typeData
    (88) typeData -> . BOOL
    (89) typeData -> . INT
    (90) typeData -> . FLOAT
    (91) typeData -> . STRING

    BOOL            shift and go to state 78
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 81

    typeData                       shift and go to state 76

state 123

    (119) expresionInt -> expresionInt operadorArit ENTERO .

    SUMA            reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    RESTA           reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    PRODUCTO        reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    DIVISION        reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    MODULO          reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    $end            reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    PARRIGHT        reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    RETURN          reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    LLAVERIGHT      reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    PACKAGE         reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    VAR             reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    VARIABLE        reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    IF              reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    FOR             reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    IMPRIMIR        reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    MAP             reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    SCAN            reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    SWITCH          reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    ENTERO          reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    FLOTANTE        reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    BOOL            reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    FUNC            reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    PARLEFT         reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    BREAK           reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    CONTINUE        reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    CASE            reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    DEFAULT         reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)
    COMA            reduce using rule 119 (expresionInt -> expresionInt operadorArit ENTERO .)


state 124

    (121) expresionFloat -> expresionFloat operadorArit FLOTANTE .

    SUMA            reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    RESTA           reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    PRODUCTO        reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    DIVISION        reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    MODULO          reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    $end            reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    PARRIGHT        reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    RETURN          reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    LLAVERIGHT      reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    PACKAGE         reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    VAR             reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    VARIABLE        reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    IF              reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    FOR             reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    IMPRIMIR        reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    MAP             reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    SCAN            reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    SWITCH          reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    ENTERO          reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    FLOTANTE        reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    BOOL            reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    FUNC            reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    PARLEFT         reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    BREAK           reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    CONTINUE        reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    CASE            reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    DEFAULT         reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)
    COMA            reduce using rule 121 (expresionFloat -> expresionFloat operadorArit FLOTANTE .)


state 125

    (28) asignacion -> derefer IGUAL valor .

    $end            reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    RETURN          reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    LLAVERIGHT      reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    PACKAGE         reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    VAR             reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    VARIABLE        reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    IF              reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    FOR             reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    IMPRIMIR        reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    MAP             reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    PRODUCTO        reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    SCAN            reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    SWITCH          reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    ENTERO          reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    FLOTANTE        reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    BOOL            reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    FUNC            reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    PARLEFT         reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    BREAK           reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    CONTINUE        reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    CASE            reduce using rule 28 (asignacion -> derefer IGUAL valor .)
    DEFAULT         reduce using rule 28 (asignacion -> derefer IGUAL valor .)


state 126

    (204) condiciones -> factor MAYORQUE factor .

    $end            reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    AND             reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    OR              reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    LLAVELEFT       reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    PARRIGHT        reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    RETURN          reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    LLAVERIGHT      reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    PACKAGE         reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    VAR             reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    VARIABLE        reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    IF              reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    FOR             reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    IMPRIMIR        reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    MAP             reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    PRODUCTO        reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    SCAN            reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    SWITCH          reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    ENTERO          reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    FLOTANTE        reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    BOOL            reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    FUNC            reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    PARLEFT         reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    PUNTOCOMA       reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    BREAK           reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    CONTINUE        reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    CASE            reduce using rule 204 (condiciones -> factor MAYORQUE factor .)
    DEFAULT         reduce using rule 204 (condiciones -> factor MAYORQUE factor .)


state 127

    (205) condiciones -> factor MENORQUE factor .

    $end            reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    AND             reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    OR              reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    LLAVELEFT       reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    PARRIGHT        reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    RETURN          reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    LLAVERIGHT      reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    PACKAGE         reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    VAR             reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    VARIABLE        reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    IF              reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    FOR             reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    IMPRIMIR        reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    MAP             reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    PRODUCTO        reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    SCAN            reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    SWITCH          reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    ENTERO          reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    FLOTANTE        reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    BOOL            reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    FUNC            reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    PARLEFT         reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    PUNTOCOMA       reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    BREAK           reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    CONTINUE        reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    CASE            reduce using rule 205 (condiciones -> factor MENORQUE factor .)
    DEFAULT         reduce using rule 205 (condiciones -> factor MENORQUE factor .)


state 128

    (206) condiciones -> factor DIFERENTE factor .

    $end            reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    AND             reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    OR              reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    LLAVELEFT       reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    PARRIGHT        reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    RETURN          reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    LLAVERIGHT      reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    PACKAGE         reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    VAR             reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    VARIABLE        reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    IF              reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    FOR             reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    IMPRIMIR        reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    MAP             reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    PRODUCTO        reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    SCAN            reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    SWITCH          reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    ENTERO          reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    FLOTANTE        reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    BOOL            reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    FUNC            reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    PARLEFT         reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    PUNTOCOMA       reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    BREAK           reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    CONTINUE        reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    CASE            reduce using rule 206 (condiciones -> factor DIFERENTE factor .)
    DEFAULT         reduce using rule 206 (condiciones -> factor DIFERENTE factor .)


state 129

    (207) condiciones -> factor ESIGUAL factor .

    $end            reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    AND             reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    OR              reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    LLAVELEFT       reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    PARRIGHT        reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    RETURN          reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    LLAVERIGHT      reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    PACKAGE         reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    VAR             reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    VARIABLE        reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    IF              reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    FOR             reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    IMPRIMIR        reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    MAP             reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    PRODUCTO        reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    SCAN            reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    SWITCH          reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    ENTERO          reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    FLOTANTE        reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    BOOL            reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    FUNC            reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    PARLEFT         reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    PUNTOCOMA       reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    BREAK           reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    CONTINUE        reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    CASE            reduce using rule 207 (condiciones -> factor ESIGUAL factor .)
    DEFAULT         reduce using rule 207 (condiciones -> factor ESIGUAL factor .)


state 130

    (208) condiciones -> factor MENORIGUAL factor .

    $end            reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    AND             reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    OR              reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    LLAVELEFT       reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    PARRIGHT        reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    RETURN          reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    LLAVERIGHT      reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    PACKAGE         reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    VAR             reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    VARIABLE        reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    IF              reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    FOR             reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    IMPRIMIR        reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    MAP             reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    PRODUCTO        reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    SCAN            reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    SWITCH          reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    ENTERO          reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    FLOTANTE        reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    BOOL            reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    FUNC            reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    PARLEFT         reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    PUNTOCOMA       reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    BREAK           reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    CONTINUE        reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    CASE            reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)
    DEFAULT         reduce using rule 208 (condiciones -> factor MENORIGUAL factor .)


state 131

    (209) condiciones -> factor MAYORIGUAL factor .

    $end            reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    AND             reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    OR              reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    LLAVELEFT       reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    PARRIGHT        reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    RETURN          reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    LLAVERIGHT      reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    PACKAGE         reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    VAR             reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    VARIABLE        reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    IF              reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    FOR             reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    IMPRIMIR        reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    MAP             reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    PRODUCTO        reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    SCAN            reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    SWITCH          reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    ENTERO          reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    FLOTANTE        reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    BOOL            reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    FUNC            reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    PARLEFT         reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    PUNTOCOMA       reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    BREAK           reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    CONTINUE        reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    CASE            reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)
    DEFAULT         reduce using rule 209 (condiciones -> factor MAYORIGUAL factor .)


state 132

    (41) sentenciaIf -> IF comparaciones LLAVELEFT . instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> IF comparaciones LLAVELEFT . instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> IF comparaciones LLAVELEFT . instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> IF comparaciones LLAVELEFT . instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> IF comparaciones LLAVELEFT . RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> IF comparaciones LLAVELEFT . RETURN VARIABLE LLAVERIGHT else
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (204) condiciones -> . factor MAYORQUE factor
    (205) condiciones -> . factor MENORQUE factor
    (206) condiciones -> . factor DIFERENTE factor
    (207) condiciones -> . factor ESIGUAL factor
    (208) condiciones -> . factor MENORIGUAL factor
    (209) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (183) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (169) funcion -> . funcion_sin_parametro
    (170) funcion -> . funcion_parametro
    (171) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT
    (136) slices -> . declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT
    (137) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (138) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (139) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (140) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (141) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (142) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (143) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (144) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (145) slices -> . declaracion_slices_enteros
    (146) slices -> . declaracion_slices_strings
    (147) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (148) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (149) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (150) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (151) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (152) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (153) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (154) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (172) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (173) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (174) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (176) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (156) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (157) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT
    (158) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT CORCHRIGHT INT
    (159) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT
    (160) declaracion_slices_enteros -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (161) declaracion_slices_enteros -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT
    (162) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING
    (163) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (164) declaracion_slices_strings -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (165) declaracion_slices_strings -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    RETURN          shift and go to state 179
    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    BOOL            shift and go to state 17
    FUNC            shift and go to state 40
    PARLEFT         shift and go to state 27

    instrucciones                  shift and go to state 178
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices_enteros     shift and go to state 36
    declaracion_slices_strings     shift and go to state 37
    numericos                      shift and go to state 39

state 133

    (211) comparaciones -> comparacion anado . comparaciones
    (210) comparaciones -> . comparacion
    (211) comparaciones -> . comparacion anado comparaciones
    (166) comparacion -> . condiciones
    (167) comparacion -> . NEGACION PARLEFT condiciones PARRIGHT
    (168) comparacion -> . PARLEFT condiciones PARRIGHT
    (204) condiciones -> . factor MAYORQUE factor
    (205) condiciones -> . factor MENORQUE factor
    (206) condiciones -> . factor DIFERENTE factor
    (207) condiciones -> . factor ESIGUAL factor
    (208) condiciones -> . factor MENORIGUAL factor
    (209) condiciones -> . factor MAYORIGUAL factor
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    NEGACION        shift and go to state 65
    PARLEFT         shift and go to state 66
    VARIABLE        shift and go to state 62
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 68
    FLOTANTE        shift and go to state 69

    comparacion                    shift and go to state 63
    comparaciones                  shift and go to state 180
    condiciones                    shift and go to state 64
    factor                         shift and go to state 23
    numericos                      shift and go to state 67

state 134

    (212) anado -> condicion .

    NEGACION        reduce using rule 212 (anado -> condicion .)
    PARLEFT         reduce using rule 212 (anado -> condicion .)
    VARIABLE        reduce using rule 212 (anado -> condicion .)
    BOOL            reduce using rule 212 (anado -> condicion .)
    ENTERO          reduce using rule 212 (anado -> condicion .)
    FLOTANTE        reduce using rule 212 (anado -> condicion .)


state 135

    (167) comparacion -> NEGACION PARLEFT . condiciones PARRIGHT
    (204) condiciones -> . factor MAYORQUE factor
    (205) condiciones -> . factor MENORQUE factor
    (206) condiciones -> . factor DIFERENTE factor
    (207) condiciones -> . factor ESIGUAL factor
    (208) condiciones -> . factor MENORIGUAL factor
    (209) condiciones -> . factor MAYORIGUAL factor
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 62
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 68
    FLOTANTE        shift and go to state 69
    PARLEFT         shift and go to state 27

    condiciones                    shift and go to state 181
    factor                         shift and go to state 23
    numericos                      shift and go to state 67

state 136

    (168) comparacion -> PARLEFT condiciones . PARRIGHT

    PARRIGHT        shift and go to state 182


state 137

    (130) factor -> numericos .
    (129) term -> numericos .

    MAYORQUE        reduce using rule 130 (factor -> numericos .)
    MENORQUE        reduce using rule 130 (factor -> numericos .)
    DIFERENTE       reduce using rule 130 (factor -> numericos .)
    ESIGUAL         reduce using rule 130 (factor -> numericos .)
    MENORIGUAL      reduce using rule 130 (factor -> numericos .)
    MAYORIGUAL      reduce using rule 130 (factor -> numericos .)
    PARRIGHT        reduce using rule 129 (term -> numericos .)


state 138

    (85) sentenciaFor -> FOR inicio PUNTOCOMA . condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (204) condiciones -> . factor MAYORQUE factor
    (205) condiciones -> . factor MENORQUE factor
    (206) condiciones -> . factor DIFERENTE factor
    (207) condiciones -> . factor ESIGUAL factor
    (208) condiciones -> . factor MENORIGUAL factor
    (209) condiciones -> . factor MAYORIGUAL factor
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 62
    BOOL            shift and go to state 17
    ENTERO          shift and go to state 68
    FLOTANTE        shift and go to state 69
    PARLEFT         shift and go to state 27

    condiciones                    shift and go to state 183
    factor                         shift and go to state 23
    numericos                      shift and go to state 67

state 139

    (86) inicio -> VARIABLE DECLARADOR . ENTERO

    ENTERO          shift and go to state 184


state 140

    (106) print -> IMPRIMIR PARLEFT contPrint . PARRIGHT

    PARRIGHT        shift and go to state 185


state 141

    (107) contPrint -> contenido . masCont
    (108) contPrint -> contenido .
    (109) masCont -> . masCont COMA contenido
    (110) masCont -> . COMA contenido

    PARRIGHT        reduce using rule 108 (contPrint -> contenido .)
    COMA            shift and go to state 187

    masCont                        shift and go to state 186

state 142

    (111) contenido -> CADENA .

    COMA            reduce using rule 111 (contenido -> CADENA .)
    PARRIGHT        reduce using rule 111 (contenido -> CADENA .)


state 143

    (112) contenido -> VARIABLE .

    COMA            reduce using rule 112 (contenido -> VARIABLE .)
    PARRIGHT        reduce using rule 112 (contenido -> VARIABLE .)


state 144

    (113) contenido -> method .

    COMA            reduce using rule 113 (contenido -> method .)
    PARRIGHT        reduce using rule 113 (contenido -> method .)


state 145

    (102) method -> methodArray .

    COMA            reduce using rule 102 (method -> methodArray .)
    PARRIGHT        reduce using rule 102 (method -> methodArray .)


state 146

    (103) methodArray -> namemetodoArr . PARLEFT VARIABLE PARRIGHT

    PARLEFT         shift and go to state 188


state 147

    (104) namemetodoArr -> LEN .

    PARLEFT         reduce using rule 104 (namemetodoArr -> LEN .)


state 148

    (105) namemetodoArr -> CAP .

    PARLEFT         reduce using rule 105 (namemetodoArr -> CAP .)


state 149

    (134) numericos -> PARLEFT expresion PARRIGHT .

    $end            reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    MAYORQUE        reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    MENORQUE        reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    DIFERENTE       reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    ESIGUAL         reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    MENORIGUAL      reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    MAYORIGUAL      reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    PARRIGHT        reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    RETURN          reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    LLAVERIGHT      reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    PACKAGE         reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    VAR             reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    VARIABLE        reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    IF              reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    FOR             reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    IMPRIMIR        reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    MAP             reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    PRODUCTO        reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    SCAN            reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    SWITCH          reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    ENTERO          reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    FLOTANTE        reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    BOOL            reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    FUNC            reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    PARLEFT         reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    BREAK           reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    CONTINUE        reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    CASE            reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    DEFAULT         reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    AND             reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    OR              reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    LLAVELEFT       reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    PUNTOCOMA       reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)
    COMA            reduce using rule 134 (numericos -> PARLEFT expresion PARRIGHT .)


state 150

    (51) mapa -> MAP CORCHLEFT STRING . CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> MAP CORCHLEFT STRING . CORCHRIGHT contMapa

    CORCHRIGHT      shift and go to state 189


state 151

    (115) lectura -> SCAN PARLEFT contScan . PARRIGHT

    PARRIGHT        shift and go to state 190


state 152

    (116) contScan -> AMPERSAND . VARIABLE

    VARIABLE        shift and go to state 191


state 153

    (120) expresionInt -> ENTERO operadorArit ENTERO .

    SUMA            reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    RESTA           reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    PRODUCTO        reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    DIVISION        reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    MODULO          reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    $end            reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    PARRIGHT        reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    RETURN          reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    LLAVERIGHT      reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    PACKAGE         reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    VAR             reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    VARIABLE        reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    IF              reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    FOR             reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    IMPRIMIR        reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    MAP             reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    SCAN            reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    SWITCH          reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    ENTERO          reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    FLOTANTE        reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    BOOL            reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    FUNC            reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    PARLEFT         reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    BREAK           reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    CONTINUE        reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    CASE            reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    DEFAULT         reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)
    COMA            reduce using rule 120 (expresionInt -> ENTERO operadorArit ENTERO .)


state 154

    (183) switch -> SWITCH VARIABLE LLAVELEFT . bloque_switch LLAVERIGHT
    (184) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK
    (185) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones
    (186) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones BREAK
    (187) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones
    (188) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones CONTINUE
    (189) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones CONTINUE
    (190) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK bloque_switch
    (191) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones bloque_switch
    (192) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones bloque_switch
    (193) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones switch_default
    (194) bloque_switch -> . switch_default
    (198) switch_default -> . DEFAULT DOSPUNTOS instrucciones masInstrucciones BREAK
    (199) switch_default -> . DEFAULT DOSPUNTOS instrucciones masInstrucciones
    (200) switch_default -> . DEFAULT DOSPUNTOS instrucciones BREAK
    (201) switch_default -> . DEFAULT DOSPUNTOS instrucciones masInstrucciones CONTINUE
    (202) switch_default -> . DEFAULT DOSPUNTOS instrucciones CONTINUE
    (203) switch_default -> . DEFAULT DOSPUNTOS instrucciones

    CASE            shift and go to state 193
    DEFAULT         shift and go to state 195

    bloque_switch                  shift and go to state 192
    switch_default                 shift and go to state 194

state 155

    (135) slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros . LLAVERIGHT
    (97) contArrayEnteros -> contArrayEnteros . COMA ENTERO

    LLAVERIGHT      shift and go to state 196
    COMA            shift and go to state 197


state 156

    (96) contArrayEnteros -> ENTERO . COMA ENTERO

    COMA            shift and go to state 198


state 157

    (136) slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas . LLAVERIGHT
    (99) contArrayCadenas -> contArrayCadenas . COMA CADENA

    LLAVERIGHT      shift and go to state 199
    COMA            shift and go to state 200


state 158

    (98) contArrayCadenas -> CADENA . COMA CADENA

    COMA            shift and go to state 201


state 159

    (122) expresionFloat -> FLOTANTE operadorArit FLOTANTE .

    SUMA            reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    RESTA           reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    PRODUCTO        reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    DIVISION        reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    MODULO          reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    $end            reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    PARRIGHT        reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    RETURN          reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    LLAVERIGHT      reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    PACKAGE         reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    VAR             reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    VARIABLE        reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    IF              reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    FOR             reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    IMPRIMIR        reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    MAP             reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    SCAN            reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    SWITCH          reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    ENTERO          reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    FLOTANTE        reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    BOOL            reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    FUNC            reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    PARLEFT         reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    BREAK           reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    CONTINUE        reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    CASE            reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    DEFAULT         reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)
    COMA            reduce using rule 122 (expresionFloat -> FLOTANTE operadorArit FLOTANTE .)


state 160

    (172) funcion_sin_parametro -> FUNC VARIABLE PARLEFT . PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (173) funcion_sin_parametro -> FUNC VARIABLE PARLEFT . PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (174) funcion_sin_parametro -> FUNC VARIABLE PARLEFT . PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (176) funcion_parametro -> FUNC VARIABLE PARLEFT . parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> FUNC VARIABLE PARLEFT . parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> FUNC VARIABLE PARLEFT . parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT . PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (179) parametros -> . VARIABLE
    (180) parametros -> . VARIABLE COMA parametros
    (181) parametros -> . typeData VARIABLE
    (182) parametros -> . typeData VARIABLE COMA parametros
    (88) typeData -> . BOOL
    (89) typeData -> . INT
    (90) typeData -> . FLOAT
    (91) typeData -> . STRING

    PARRIGHT        shift and go to state 203
    VARIABLE        shift and go to state 202
    BOOL            shift and go to state 78
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 81

    parametros                     shift and go to state 204
    typeData                       shift and go to state 205

state 161

    (13) instrucciones -> PACKAGE VARIABLE IMPORT CADENA . funcion
    (169) funcion -> . funcion_sin_parametro
    (170) funcion -> . funcion_parametro
    (171) funcion -> . funcion_sin_parametro_return
    (172) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (173) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (174) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (176) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT

    FUNC            shift and go to state 40

    funcion                        shift and go to state 206
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35

state 162

    (92) array -> VARIABLE DECLARADOR CORCHLEFT ENTERO . CORCHRIGHT contArray

    CORCHRIGHT      shift and go to state 207


state 163

    (161) declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT . INT
    (165) declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT . STRING

    INT             shift and go to state 208
    STRING          shift and go to state 209


state 164

    (137) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT . CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (141) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT . CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (147) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT . CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (151) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT . CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT

    CORCHLEFT       shift and go to state 210


state 165

    (83) refer -> AMPERSAND VARIABLE .

    $end            reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    RETURN          reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    LLAVERIGHT      reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    PACKAGE         reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    VAR             reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    VARIABLE        reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    IF              reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    FOR             reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    IMPRIMIR        reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    MAP             reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    PRODUCTO        reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    SCAN            reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    SWITCH          reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    ENTERO          reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    FLOTANTE        reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    BOOL            reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    FUNC            reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    PARLEFT         reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    BREAK           reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    CONTINUE        reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    CASE            reduce using rule 83 (refer -> AMPERSAND VARIABLE .)
    DEFAULT         reduce using rule 83 (refer -> AMPERSAND VARIABLE .)


state 166

    (138) slices -> VARIABLE IGUAL metodos_slices PARLEFT . CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (142) slices -> VARIABLE IGUAL metodos_slices PARLEFT . CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (148) slices -> VARIABLE IGUAL metodos_slices PARLEFT . CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (152) slices -> VARIABLE IGUAL metodos_slices PARLEFT . CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT

    CORCHLEFT       shift and go to state 211


state 167

    (160) declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO . CORCHRIGHT INT
    (164) declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO . CORCHRIGHT STRING

    CORCHRIGHT      shift and go to state 212


state 168

    (17) asignacion -> VAR VARIABLE BOOL IGUAL . booleano
    (29) booleano -> . condicion
    (30) booleano -> . TRUE
    (31) booleano -> . FALSE
    (213) condicion -> . AND
    (214) condicion -> . OR

    TRUE            shift and go to state 101
    FALSE           shift and go to state 102
    AND             shift and go to state 104
    OR              shift and go to state 105

    booleano                       shift and go to state 213
    condicion                      shift and go to state 100

state 169

    (140) slices -> VAR VARIABLE IGUAL metodos_slices . PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (144) slices -> VAR VARIABLE IGUAL metodos_slices . PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (150) slices -> VAR VARIABLE IGUAL metodos_slices . PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (154) slices -> VAR VARIABLE IGUAL metodos_slices . PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT

    PARLEFT         shift and go to state 214


state 170

    (156) declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT . ENTERO CORCHRIGHT INT
    (159) declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT . CORCHRIGHT INT
    (162) declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT . CORCHRIGHT STRING
    (163) declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT . ENTERO CORCHRIGHT STRING

    ENTERO          shift and go to state 215
    CORCHRIGHT      shift and go to state 216


state 171

    (18) asignacion -> VAR VARIABLE INT IGUAL . expresionInt
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO

    ENTERO          shift and go to state 218

    expresionInt                   shift and go to state 217

state 172

    (19) asignacion -> VAR VARIABLE FLOAT IGUAL . expresionFloat
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE

    FLOTANTE        shift and go to state 220

    expresionFloat                 shift and go to state 219

state 173

    (20) asignacion -> VAR VARIABLE STRING IGUAL . CADENA

    CADENA          shift and go to state 221


state 174

    (21) asignacion -> VAR VARIABLE puntero IGUAL . refer
    (83) refer -> . AMPERSAND VARIABLE

    AMPERSAND       shift and go to state 103

    refer                          shift and go to state 222

state 175

    (139) slices -> VAR VARIABLE DECLARADOR metodos_slices . PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (143) slices -> VAR VARIABLE DECLARADOR metodos_slices . PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (149) slices -> VAR VARIABLE DECLARADOR metodos_slices . PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (153) slices -> VAR VARIABLE DECLARADOR metodos_slices . PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT

    PARLEFT         shift and go to state 223


state 176

    (157) declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO . CORCHRIGHT INT

    CORCHRIGHT      shift and go to state 224


state 177

    (158) declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT . INT

    INT             shift and go to state 225


state 178

    (41) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones . masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones . masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones . masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones . masInstrucciones LLAVERIGHT else
    (14) masInstrucciones -> . masInstrucciones instrucciones
    (15) masInstrucciones -> . masInstrucciones
    (16) masInstrucciones -> .

    RETURN          reduce using rule 16 (masInstrucciones -> .)
    LLAVERIGHT      reduce using rule 16 (masInstrucciones -> .)
    PACKAGE         reduce using rule 16 (masInstrucciones -> .)
    VAR             reduce using rule 16 (masInstrucciones -> .)
    VARIABLE        reduce using rule 16 (masInstrucciones -> .)
    IF              reduce using rule 16 (masInstrucciones -> .)
    FOR             reduce using rule 16 (masInstrucciones -> .)
    IMPRIMIR        reduce using rule 16 (masInstrucciones -> .)
    MAP             reduce using rule 16 (masInstrucciones -> .)
    PRODUCTO        reduce using rule 16 (masInstrucciones -> .)
    SCAN            reduce using rule 16 (masInstrucciones -> .)
    SWITCH          reduce using rule 16 (masInstrucciones -> .)
    ENTERO          reduce using rule 16 (masInstrucciones -> .)
    FLOTANTE        reduce using rule 16 (masInstrucciones -> .)
    BOOL            reduce using rule 16 (masInstrucciones -> .)
    FUNC            reduce using rule 16 (masInstrucciones -> .)
    PARLEFT         reduce using rule 16 (masInstrucciones -> .)

    masInstrucciones               shift and go to state 226

state 179

    (45) sentenciaIf -> IF comparaciones LLAVELEFT RETURN . VARIABLE LLAVERIGHT
    (46) sentenciaIf -> IF comparaciones LLAVELEFT RETURN . VARIABLE LLAVERIGHT else

    VARIABLE        shift and go to state 227


state 180

    (211) comparaciones -> comparacion anado comparaciones .

    LLAVELEFT       reduce using rule 211 (comparaciones -> comparacion anado comparaciones .)


state 181

    (167) comparacion -> NEGACION PARLEFT condiciones . PARRIGHT

    PARRIGHT        shift and go to state 228


state 182

    (168) comparacion -> PARLEFT condiciones PARRIGHT .

    AND             reduce using rule 168 (comparacion -> PARLEFT condiciones PARRIGHT .)
    OR              reduce using rule 168 (comparacion -> PARLEFT condiciones PARRIGHT .)
    LLAVELEFT       reduce using rule 168 (comparacion -> PARLEFT condiciones PARRIGHT .)


state 183

    (85) sentenciaFor -> FOR inicio PUNTOCOMA condiciones . PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT

    PUNTOCOMA       shift and go to state 229


state 184

    (86) inicio -> VARIABLE DECLARADOR ENTERO .

    PUNTOCOMA       reduce using rule 86 (inicio -> VARIABLE DECLARADOR ENTERO .)


state 185

    (106) print -> IMPRIMIR PARLEFT contPrint PARRIGHT .

    $end            reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    RETURN          reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    LLAVERIGHT      reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    PACKAGE         reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    VAR             reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    VARIABLE        reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    IF              reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    FOR             reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    IMPRIMIR        reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    MAP             reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    PRODUCTO        reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    SCAN            reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    SWITCH          reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    ENTERO          reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    FLOTANTE        reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    BOOL            reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    FUNC            reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    PARLEFT         reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    BREAK           reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    CONTINUE        reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    CASE            reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)
    DEFAULT         reduce using rule 106 (print -> IMPRIMIR PARLEFT contPrint PARRIGHT .)


state 186

    (107) contPrint -> contenido masCont .
    (109) masCont -> masCont . COMA contenido

    PARRIGHT        reduce using rule 107 (contPrint -> contenido masCont .)
    COMA            shift and go to state 230


state 187

    (110) masCont -> COMA . contenido
    (111) contenido -> . CADENA
    (112) contenido -> . VARIABLE
    (113) contenido -> . method
    (114) contenido -> .
    (102) method -> . methodArray
    (103) methodArray -> . namemetodoArr PARLEFT VARIABLE PARRIGHT
    (104) namemetodoArr -> . LEN
    (105) namemetodoArr -> . CAP

    CADENA          shift and go to state 142
    VARIABLE        shift and go to state 143
    COMA            reduce using rule 114 (contenido -> .)
    PARRIGHT        reduce using rule 114 (contenido -> .)
    LEN             shift and go to state 147
    CAP             shift and go to state 148

    contenido                      shift and go to state 231
    method                         shift and go to state 144
    methodArray                    shift and go to state 145
    namemetodoArr                  shift and go to state 146

state 188

    (103) methodArray -> namemetodoArr PARLEFT . VARIABLE PARRIGHT

    VARIABLE        shift and go to state 232


state 189

    (51) mapa -> MAP CORCHLEFT STRING CORCHRIGHT . typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> MAP CORCHLEFT STRING CORCHRIGHT . contMapa
    (88) typeData -> . BOOL
    (89) typeData -> . INT
    (90) typeData -> . FLOAT
    (91) typeData -> . STRING
    (53) contMapa -> . INT LLAVELEFT parEntero LLAVERIGHT
    (54) contMapa -> . STRING LLAVELEFT parCadena LLAVERIGHT
    (55) contMapa -> . FLOAT LLAVELEFT parFlotante LLAVERIGHT
    (56) contMapa -> . BOOL LLAVELEFT parBoolean LLAVERIGHT

    BOOL            shift and go to state 236
    INT             shift and go to state 237
    FLOAT           shift and go to state 238
    STRING          shift and go to state 233

    typeData                       shift and go to state 234
    contMapa                       shift and go to state 235

state 190

    (115) lectura -> SCAN PARLEFT contScan PARRIGHT .

    $end            reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    RETURN          reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    LLAVERIGHT      reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    PACKAGE         reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    VAR             reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    VARIABLE        reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    IF              reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    FOR             reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    IMPRIMIR        reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    MAP             reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    PRODUCTO        reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    SCAN            reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    SWITCH          reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    ENTERO          reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    FLOTANTE        reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    BOOL            reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    FUNC            reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    PARLEFT         reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    BREAK           reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    CONTINUE        reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    CASE            reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)
    DEFAULT         reduce using rule 115 (lectura -> SCAN PARLEFT contScan PARRIGHT .)


state 191

    (116) contScan -> AMPERSAND VARIABLE .

    PARRIGHT        reduce using rule 116 (contScan -> AMPERSAND VARIABLE .)


state 192

    (183) switch -> SWITCH VARIABLE LLAVELEFT bloque_switch . LLAVERIGHT

    LLAVERIGHT      shift and go to state 239


state 193

    (184) bloque_switch -> CASE . caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK
    (185) bloque_switch -> CASE . caso_switch DOSPUNTOS instrucciones masInstrucciones
    (186) bloque_switch -> CASE . caso_switch DOSPUNTOS instrucciones BREAK
    (187) bloque_switch -> CASE . caso_switch DOSPUNTOS instrucciones
    (188) bloque_switch -> CASE . caso_switch DOSPUNTOS instrucciones masInstrucciones CONTINUE
    (189) bloque_switch -> CASE . caso_switch DOSPUNTOS instrucciones CONTINUE
    (190) bloque_switch -> CASE . caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK bloque_switch
    (191) bloque_switch -> CASE . caso_switch DOSPUNTOS instrucciones masInstrucciones bloque_switch
    (192) bloque_switch -> CASE . caso_switch DOSPUNTOS instrucciones bloque_switch
    (193) bloque_switch -> CASE . caso_switch DOSPUNTOS instrucciones switch_default
    (195) caso_switch -> . VARIABLE
    (196) caso_switch -> . CADENA
    (197) caso_switch -> . ENTERO

    VARIABLE        shift and go to state 241
    CADENA          shift and go to state 242
    ENTERO          shift and go to state 243

    caso_switch                    shift and go to state 240

state 194

    (194) bloque_switch -> switch_default .

    LLAVERIGHT      reduce using rule 194 (bloque_switch -> switch_default .)


state 195

    (198) switch_default -> DEFAULT . DOSPUNTOS instrucciones masInstrucciones BREAK
    (199) switch_default -> DEFAULT . DOSPUNTOS instrucciones masInstrucciones
    (200) switch_default -> DEFAULT . DOSPUNTOS instrucciones BREAK
    (201) switch_default -> DEFAULT . DOSPUNTOS instrucciones masInstrucciones CONTINUE
    (202) switch_default -> DEFAULT . DOSPUNTOS instrucciones CONTINUE
    (203) switch_default -> DEFAULT . DOSPUNTOS instrucciones

    DOSPUNTOS       shift and go to state 244


state 196

    (135) slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .

    $end            reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)
    RETURN          reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)
    PACKAGE         reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)
    VAR             reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)
    VARIABLE        reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)
    IF              reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)
    FOR             reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)
    IMPRIMIR        reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)
    MAP             reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)
    PRODUCTO        reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)
    SCAN            reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)
    SWITCH          reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)
    ENTERO          reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)
    FLOTANTE        reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)
    BOOL            reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)
    FUNC            reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)
    PARLEFT         reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)
    BREAK           reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)
    CONTINUE        reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)
    CASE            reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)
    DEFAULT         reduce using rule 135 (slices -> declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT .)


state 197

    (97) contArrayEnteros -> contArrayEnteros COMA . ENTERO

    ENTERO          shift and go to state 245


state 198

    (96) contArrayEnteros -> ENTERO COMA . ENTERO

    ENTERO          shift and go to state 246


state 199

    (136) slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .

    $end            reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)
    RETURN          reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)
    PACKAGE         reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)
    VAR             reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)
    VARIABLE        reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)
    IF              reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)
    FOR             reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)
    IMPRIMIR        reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)
    MAP             reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)
    PRODUCTO        reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)
    SCAN            reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)
    SWITCH          reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)
    ENTERO          reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)
    FLOTANTE        reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)
    BOOL            reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)
    FUNC            reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)
    PARLEFT         reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)
    BREAK           reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)
    CONTINUE        reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)
    CASE            reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)
    DEFAULT         reduce using rule 136 (slices -> declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT .)


state 200

    (99) contArrayCadenas -> contArrayCadenas COMA . CADENA

    CADENA          shift and go to state 247


state 201

    (98) contArrayCadenas -> CADENA COMA . CADENA

    CADENA          shift and go to state 248


state 202

    (179) parametros -> VARIABLE .
    (180) parametros -> VARIABLE . COMA parametros

    PARRIGHT        reduce using rule 179 (parametros -> VARIABLE .)
    COMA            shift and go to state 249


state 203

    (172) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT . LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (173) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT . LLAVELEFT RETURN LLAVERIGHT
    (174) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT . LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT . LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT

    LLAVELEFT       shift and go to state 250


state 204

    (176) funcion_parametro -> FUNC VARIABLE PARLEFT parametros . PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> FUNC VARIABLE PARLEFT parametros . PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> FUNC VARIABLE PARLEFT parametros . PARRIGHT LLAVELEFT RETURN LLAVERIGHT

    PARRIGHT        shift and go to state 251


state 205

    (181) parametros -> typeData . VARIABLE
    (182) parametros -> typeData . VARIABLE COMA parametros

    VARIABLE        shift and go to state 252


state 206

    (13) instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .

    $end            reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    RETURN          reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    LLAVERIGHT      reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    PACKAGE         reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    VAR             reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    VARIABLE        reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    IF              reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    FOR             reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    IMPRIMIR        reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    MAP             reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    PRODUCTO        reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    SCAN            reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    SWITCH          reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    ENTERO          reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    FLOTANTE        reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    BOOL            reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    FUNC            reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    PARLEFT         reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    BREAK           reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    CONTINUE        reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    CASE            reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)
    DEFAULT         reduce using rule 13 (instrucciones -> PACKAGE VARIABLE IMPORT CADENA funcion .)


state 207

    (92) array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT . contArray
    (93) contArray -> . INT LLAVELEFT contArrayEnteros LLAVERIGHT
    (94) contArray -> . STRING LLAVELEFT contArrayCadenas LLAVERIGHT
    (95) contArray -> . FLOAT LLAVELEFT contArrayFloat LLAVERIGHT

    INT             shift and go to state 254
    STRING          shift and go to state 255
    FLOAT           shift and go to state 256

    contArray                      shift and go to state 253

state 208

    (161) declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .

    LLAVELEFT       reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    $end            reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    RETURN          reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    LLAVERIGHT      reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    PACKAGE         reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    VAR             reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    VARIABLE        reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    IF              reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    FOR             reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    IMPRIMIR        reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    MAP             reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    PRODUCTO        reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    SCAN            reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    SWITCH          reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    ENTERO          reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    FLOTANTE        reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    BOOL            reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    FUNC            reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    PARLEFT         reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    BREAK           reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    CONTINUE        reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    CASE            reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)
    DEFAULT         reduce using rule 161 (declaracion_slices_enteros -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT .)


state 209

    (165) declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .

    LLAVELEFT       reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    $end            reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    RETURN          reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    LLAVERIGHT      reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    PACKAGE         reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    VAR             reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    VARIABLE        reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    IF              reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    FOR             reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    IMPRIMIR        reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    MAP             reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    PRODUCTO        reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    SCAN            reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    SWITCH          reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    ENTERO          reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    FLOTANTE        reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    BOOL            reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    FUNC            reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    PARLEFT         reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    BREAK           reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    CONTINUE        reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    CASE            reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)
    DEFAULT         reduce using rule 165 (declaracion_slices_strings -> VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING .)


state 210

    (137) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT . CORCHRIGHT INT COMA ENTERO PARRIGHT
    (141) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT . CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (147) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT . CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (151) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT . CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT

    CORCHRIGHT      shift and go to state 257


state 211

    (138) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT . CORCHRIGHT INT COMA ENTERO PARRIGHT
    (142) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT . CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (148) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT . CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (152) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT . CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT

    CORCHRIGHT      shift and go to state 258


state 212

    (160) declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT . INT
    (164) declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT . STRING

    INT             shift and go to state 259
    STRING          shift and go to state 260


state 213

    (17) asignacion -> VAR VARIABLE BOOL IGUAL booleano .

    $end            reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    RETURN          reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    LLAVERIGHT      reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    PACKAGE         reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    VAR             reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    VARIABLE        reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    IF              reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    FOR             reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    IMPRIMIR        reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    MAP             reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    PRODUCTO        reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    SCAN            reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    SWITCH          reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    ENTERO          reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    FLOTANTE        reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    BOOL            reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    FUNC            reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    PARLEFT         reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    BREAK           reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    CONTINUE        reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    CASE            reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)
    DEFAULT         reduce using rule 17 (asignacion -> VAR VARIABLE BOOL IGUAL booleano .)


state 214

    (140) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT . CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (144) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT . CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (150) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT . CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (154) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT . CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT

    CORCHLEFT       shift and go to state 261


state 215

    (156) declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO . CORCHRIGHT INT
    (163) declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO . CORCHRIGHT STRING

    CORCHRIGHT      shift and go to state 262


state 216

    (159) declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT . INT
    (162) declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT . STRING

    INT             shift and go to state 263
    STRING          shift and go to state 264


state 217

    (18) asignacion -> VAR VARIABLE INT IGUAL expresionInt .
    (119) expresionInt -> expresionInt . operadorArit ENTERO
    (123) operadorArit -> . SUMA
    (124) operadorArit -> . RESTA
    (125) operadorArit -> . PRODUCTO
    (126) operadorArit -> . DIVISION
    (127) operadorArit -> . MODULO

  ! shift/reduce conflict for PRODUCTO resolved as shift
    $end            reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    RETURN          reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    LLAVERIGHT      reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    PACKAGE         reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    VAR             reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    VARIABLE        reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    IF              reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    FOR             reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    IMPRIMIR        reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    MAP             reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    SCAN            reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    SWITCH          reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    ENTERO          reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    FLOTANTE        reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    BOOL            reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    FUNC            reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    PARLEFT         reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    BREAK           reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    CONTINUE        reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    CASE            reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    DEFAULT         reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .)
    SUMA            shift and go to state 48
    RESTA           shift and go to state 49
    PRODUCTO        shift and go to state 50
    DIVISION        shift and go to state 51
    MODULO          shift and go to state 52

  ! PRODUCTO        [ reduce using rule 18 (asignacion -> VAR VARIABLE INT IGUAL expresionInt .) ]

    operadorArit                   shift and go to state 47

state 218

    (120) expresionInt -> ENTERO . operadorArit ENTERO
    (123) operadorArit -> . SUMA
    (124) operadorArit -> . RESTA
    (125) operadorArit -> . PRODUCTO
    (126) operadorArit -> . DIVISION
    (127) operadorArit -> . MODULO

    SUMA            shift and go to state 48
    RESTA           shift and go to state 49
    PRODUCTO        shift and go to state 50
    DIVISION        shift and go to state 51
    MODULO          shift and go to state 52

    operadorArit                   shift and go to state 83

state 219

    (19) asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .
    (121) expresionFloat -> expresionFloat . operadorArit FLOTANTE
    (123) operadorArit -> . SUMA
    (124) operadorArit -> . RESTA
    (125) operadorArit -> . PRODUCTO
    (126) operadorArit -> . DIVISION
    (127) operadorArit -> . MODULO

  ! shift/reduce conflict for PRODUCTO resolved as shift
    $end            reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    RETURN          reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    LLAVERIGHT      reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    PACKAGE         reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    VAR             reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    VARIABLE        reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    IF              reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    FOR             reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    IMPRIMIR        reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    MAP             reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    SCAN            reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    SWITCH          reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    ENTERO          reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    FLOTANTE        reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    BOOL            reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    FUNC            reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    PARLEFT         reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    BREAK           reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    CONTINUE        reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    CASE            reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    DEFAULT         reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .)
    SUMA            shift and go to state 48
    RESTA           shift and go to state 49
    PRODUCTO        shift and go to state 50
    DIVISION        shift and go to state 51
    MODULO          shift and go to state 52

  ! PRODUCTO        [ reduce using rule 19 (asignacion -> VAR VARIABLE FLOAT IGUAL expresionFloat .) ]

    operadorArit                   shift and go to state 53

state 220

    (122) expresionFloat -> FLOTANTE . operadorArit FLOTANTE
    (123) operadorArit -> . SUMA
    (124) operadorArit -> . RESTA
    (125) operadorArit -> . PRODUCTO
    (126) operadorArit -> . DIVISION
    (127) operadorArit -> . MODULO

    SUMA            shift and go to state 48
    RESTA           shift and go to state 49
    PRODUCTO        shift and go to state 50
    DIVISION        shift and go to state 51
    MODULO          shift and go to state 52

    operadorArit                   shift and go to state 87

state 221

    (20) asignacion -> VAR VARIABLE STRING IGUAL CADENA .

    $end            reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    RETURN          reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    LLAVERIGHT      reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    PACKAGE         reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    VAR             reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    VARIABLE        reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    IF              reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    FOR             reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    IMPRIMIR        reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    MAP             reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    PRODUCTO        reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    SCAN            reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    SWITCH          reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    ENTERO          reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    FLOTANTE        reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    BOOL            reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    FUNC            reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    PARLEFT         reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    BREAK           reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    CONTINUE        reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    CASE            reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)
    DEFAULT         reduce using rule 20 (asignacion -> VAR VARIABLE STRING IGUAL CADENA .)


state 222

    (21) asignacion -> VAR VARIABLE puntero IGUAL refer .

    $end            reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    RETURN          reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    LLAVERIGHT      reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    PACKAGE         reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    VAR             reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    VARIABLE        reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    IF              reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    FOR             reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    IMPRIMIR        reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    MAP             reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    PRODUCTO        reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    SCAN            reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    SWITCH          reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    ENTERO          reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    FLOTANTE        reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    BOOL            reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    FUNC            reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    PARLEFT         reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    BREAK           reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    CONTINUE        reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    CASE            reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)
    DEFAULT         reduce using rule 21 (asignacion -> VAR VARIABLE puntero IGUAL refer .)


state 223

    (139) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT . CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (143) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT . CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (149) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT . CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (153) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT . CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT

    CORCHLEFT       shift and go to state 265


state 224

    (157) declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT . INT

    INT             shift and go to state 266


state 225

    (158) declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .

    LLAVELEFT       reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    $end            reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    RETURN          reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    LLAVERIGHT      reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    PACKAGE         reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    VAR             reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    VARIABLE        reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    IF              reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    FOR             reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    IMPRIMIR        reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    MAP             reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    PRODUCTO        reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    SCAN            reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    SWITCH          reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    ENTERO          reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    FLOTANTE        reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    BOOL            reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    FUNC            reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    PARLEFT         reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    BREAK           reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    CONTINUE        reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    CASE            reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)
    DEFAULT         reduce using rule 158 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT CORCHRIGHT INT .)


state 226

    (41) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones . RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones . RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones . LLAVERIGHT
    (44) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones . LLAVERIGHT else
    (14) masInstrucciones -> masInstrucciones . instrucciones
    (15) masInstrucciones -> masInstrucciones .
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (204) condiciones -> . factor MAYORQUE factor
    (205) condiciones -> . factor MENORQUE factor
    (206) condiciones -> . factor DIFERENTE factor
    (207) condiciones -> . factor ESIGUAL factor
    (208) condiciones -> . factor MENORIGUAL factor
    (209) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (183) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (169) funcion -> . funcion_sin_parametro
    (170) funcion -> . funcion_parametro
    (171) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT
    (136) slices -> . declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT
    (137) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (138) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (139) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (140) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (141) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (142) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (143) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (144) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (145) slices -> . declaracion_slices_enteros
    (146) slices -> . declaracion_slices_strings
    (147) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (148) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (149) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (150) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (151) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (152) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (153) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (154) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (172) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (173) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (174) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (176) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (156) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (157) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT
    (158) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT CORCHRIGHT INT
    (159) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT
    (160) declaracion_slices_enteros -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (161) declaracion_slices_enteros -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT
    (162) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING
    (163) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (164) declaracion_slices_strings -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (165) declaracion_slices_strings -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LLAVERIGHT resolved as shift
  ! shift/reduce conflict for PACKAGE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for PRODUCTO resolved as shift
  ! shift/reduce conflict for SCAN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for PARLEFT resolved as shift
    RETURN          shift and go to state 268
    LLAVERIGHT      shift and go to state 269
    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    BOOL            shift and go to state 17
    FUNC            shift and go to state 40
    PARLEFT         shift and go to state 27

  ! RETURN          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! LLAVERIGHT      [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PACKAGE         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VAR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VARIABLE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IF              [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FOR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IMPRIMIR        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! MAP             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PRODUCTO        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SCAN            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SWITCH          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! ENTERO          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FLOTANTE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! BOOL            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FUNC            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PARLEFT         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]

    instrucciones                  shift and go to state 267
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices_enteros     shift and go to state 36
    declaracion_slices_strings     shift and go to state 37
    numericos                      shift and go to state 39

state 227

    (45) sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE . LLAVERIGHT
    (46) sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE . LLAVERIGHT else

    LLAVERIGHT      shift and go to state 270


state 228

    (167) comparacion -> NEGACION PARLEFT condiciones PARRIGHT .

    AND             reduce using rule 167 (comparacion -> NEGACION PARLEFT condiciones PARRIGHT .)
    OR              reduce using rule 167 (comparacion -> NEGACION PARLEFT condiciones PARRIGHT .)
    LLAVELEFT       reduce using rule 167 (comparacion -> NEGACION PARLEFT condiciones PARRIGHT .)


state 229

    (85) sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA . incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (87) incrementa -> . VARIABLE INCREMENTO

    VARIABLE        shift and go to state 272

    incrementa                     shift and go to state 271

state 230

    (109) masCont -> masCont COMA . contenido
    (111) contenido -> . CADENA
    (112) contenido -> . VARIABLE
    (113) contenido -> . method
    (114) contenido -> .
    (102) method -> . methodArray
    (103) methodArray -> . namemetodoArr PARLEFT VARIABLE PARRIGHT
    (104) namemetodoArr -> . LEN
    (105) namemetodoArr -> . CAP

    CADENA          shift and go to state 142
    VARIABLE        shift and go to state 143
    COMA            reduce using rule 114 (contenido -> .)
    PARRIGHT        reduce using rule 114 (contenido -> .)
    LEN             shift and go to state 147
    CAP             shift and go to state 148

    contenido                      shift and go to state 273
    method                         shift and go to state 144
    methodArray                    shift and go to state 145
    namemetodoArr                  shift and go to state 146

state 231

    (110) masCont -> COMA contenido .

    COMA            reduce using rule 110 (masCont -> COMA contenido .)
    PARRIGHT        reduce using rule 110 (masCont -> COMA contenido .)


state 232

    (103) methodArray -> namemetodoArr PARLEFT VARIABLE . PARRIGHT

    PARRIGHT        shift and go to state 274


state 233

    (91) typeData -> STRING .
    (54) contMapa -> STRING . LLAVELEFT parCadena LLAVERIGHT

  ! shift/reduce conflict for LLAVELEFT resolved as shift
    LLAVELEFT       shift and go to state 275

  ! LLAVELEFT       [ reduce using rule 91 (typeData -> STRING .) ]


state 234

    (51) mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData . LLAVELEFT LLAVERIGHT

    LLAVELEFT       shift and go to state 276


state 235

    (52) mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .

    $end            reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    RETURN          reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    LLAVERIGHT      reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    PACKAGE         reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    VAR             reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    VARIABLE        reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    IF              reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    FOR             reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    IMPRIMIR        reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    MAP             reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    PRODUCTO        reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    SCAN            reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    SWITCH          reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    ENTERO          reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    FLOTANTE        reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    BOOL            reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    FUNC            reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    PARLEFT         reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    BREAK           reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    CONTINUE        reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    CASE            reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)
    DEFAULT         reduce using rule 52 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT contMapa .)


state 236

    (88) typeData -> BOOL .
    (56) contMapa -> BOOL . LLAVELEFT parBoolean LLAVERIGHT

  ! shift/reduce conflict for LLAVELEFT resolved as shift
    LLAVELEFT       shift and go to state 277

  ! LLAVELEFT       [ reduce using rule 88 (typeData -> BOOL .) ]


state 237

    (89) typeData -> INT .
    (53) contMapa -> INT . LLAVELEFT parEntero LLAVERIGHT

  ! shift/reduce conflict for LLAVELEFT resolved as shift
    LLAVELEFT       shift and go to state 278

  ! LLAVELEFT       [ reduce using rule 89 (typeData -> INT .) ]


state 238

    (90) typeData -> FLOAT .
    (55) contMapa -> FLOAT . LLAVELEFT parFlotante LLAVERIGHT

  ! shift/reduce conflict for LLAVELEFT resolved as shift
    LLAVELEFT       shift and go to state 279

  ! LLAVELEFT       [ reduce using rule 90 (typeData -> FLOAT .) ]


state 239

    (183) switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .

    $end            reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    RETURN          reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    PACKAGE         reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    VAR             reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    VARIABLE        reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    IF              reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    FOR             reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    IMPRIMIR        reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    MAP             reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    PRODUCTO        reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    SCAN            reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    SWITCH          reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    ENTERO          reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    FLOTANTE        reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    BOOL            reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    FUNC            reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    PARLEFT         reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    BREAK           reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    CONTINUE        reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    CASE            reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)
    DEFAULT         reduce using rule 183 (switch -> SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT .)


state 240

    (184) bloque_switch -> CASE caso_switch . DOSPUNTOS instrucciones masInstrucciones BREAK
    (185) bloque_switch -> CASE caso_switch . DOSPUNTOS instrucciones masInstrucciones
    (186) bloque_switch -> CASE caso_switch . DOSPUNTOS instrucciones BREAK
    (187) bloque_switch -> CASE caso_switch . DOSPUNTOS instrucciones
    (188) bloque_switch -> CASE caso_switch . DOSPUNTOS instrucciones masInstrucciones CONTINUE
    (189) bloque_switch -> CASE caso_switch . DOSPUNTOS instrucciones CONTINUE
    (190) bloque_switch -> CASE caso_switch . DOSPUNTOS instrucciones masInstrucciones BREAK bloque_switch
    (191) bloque_switch -> CASE caso_switch . DOSPUNTOS instrucciones masInstrucciones bloque_switch
    (192) bloque_switch -> CASE caso_switch . DOSPUNTOS instrucciones bloque_switch
    (193) bloque_switch -> CASE caso_switch . DOSPUNTOS instrucciones switch_default

    DOSPUNTOS       shift and go to state 280


state 241

    (195) caso_switch -> VARIABLE .

    DOSPUNTOS       reduce using rule 195 (caso_switch -> VARIABLE .)


state 242

    (196) caso_switch -> CADENA .

    DOSPUNTOS       reduce using rule 196 (caso_switch -> CADENA .)


state 243

    (197) caso_switch -> ENTERO .

    DOSPUNTOS       reduce using rule 197 (caso_switch -> ENTERO .)


state 244

    (198) switch_default -> DEFAULT DOSPUNTOS . instrucciones masInstrucciones BREAK
    (199) switch_default -> DEFAULT DOSPUNTOS . instrucciones masInstrucciones
    (200) switch_default -> DEFAULT DOSPUNTOS . instrucciones BREAK
    (201) switch_default -> DEFAULT DOSPUNTOS . instrucciones masInstrucciones CONTINUE
    (202) switch_default -> DEFAULT DOSPUNTOS . instrucciones CONTINUE
    (203) switch_default -> DEFAULT DOSPUNTOS . instrucciones
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (204) condiciones -> . factor MAYORQUE factor
    (205) condiciones -> . factor MENORQUE factor
    (206) condiciones -> . factor DIFERENTE factor
    (207) condiciones -> . factor ESIGUAL factor
    (208) condiciones -> . factor MENORIGUAL factor
    (209) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (183) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (169) funcion -> . funcion_sin_parametro
    (170) funcion -> . funcion_parametro
    (171) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT
    (136) slices -> . declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT
    (137) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (138) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (139) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (140) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (141) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (142) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (143) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (144) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (145) slices -> . declaracion_slices_enteros
    (146) slices -> . declaracion_slices_strings
    (147) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (148) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (149) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (150) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (151) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (152) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (153) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (154) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (172) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (173) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (174) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (176) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (156) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (157) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT
    (158) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT CORCHRIGHT INT
    (159) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT
    (160) declaracion_slices_enteros -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (161) declaracion_slices_enteros -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT
    (162) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING
    (163) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (164) declaracion_slices_strings -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (165) declaracion_slices_strings -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    BOOL            shift and go to state 17
    FUNC            shift and go to state 40
    PARLEFT         shift and go to state 27

    instrucciones                  shift and go to state 281
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices_enteros     shift and go to state 36
    declaracion_slices_strings     shift and go to state 37
    numericos                      shift and go to state 39

state 245

    (97) contArrayEnteros -> contArrayEnteros COMA ENTERO .

    LLAVERIGHT      reduce using rule 97 (contArrayEnteros -> contArrayEnteros COMA ENTERO .)
    COMA            reduce using rule 97 (contArrayEnteros -> contArrayEnteros COMA ENTERO .)


state 246

    (96) contArrayEnteros -> ENTERO COMA ENTERO .

    LLAVERIGHT      reduce using rule 96 (contArrayEnteros -> ENTERO COMA ENTERO .)
    COMA            reduce using rule 96 (contArrayEnteros -> ENTERO COMA ENTERO .)


state 247

    (99) contArrayCadenas -> contArrayCadenas COMA CADENA .

    LLAVERIGHT      reduce using rule 99 (contArrayCadenas -> contArrayCadenas COMA CADENA .)
    COMA            reduce using rule 99 (contArrayCadenas -> contArrayCadenas COMA CADENA .)


state 248

    (98) contArrayCadenas -> CADENA COMA CADENA .

    LLAVERIGHT      reduce using rule 98 (contArrayCadenas -> CADENA COMA CADENA .)
    COMA            reduce using rule 98 (contArrayCadenas -> CADENA COMA CADENA .)


state 249

    (180) parametros -> VARIABLE COMA . parametros
    (179) parametros -> . VARIABLE
    (180) parametros -> . VARIABLE COMA parametros
    (181) parametros -> . typeData VARIABLE
    (182) parametros -> . typeData VARIABLE COMA parametros
    (88) typeData -> . BOOL
    (89) typeData -> . INT
    (90) typeData -> . FLOAT
    (91) typeData -> . STRING

    VARIABLE        shift and go to state 202
    BOOL            shift and go to state 78
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 81

    parametros                     shift and go to state 282
    typeData                       shift and go to state 205

state 250

    (172) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT . instrucciones masInstrucciones LLAVERIGHT
    (173) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT . RETURN LLAVERIGHT
    (174) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT . instrucciones masInstrucciones RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT . instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (204) condiciones -> . factor MAYORQUE factor
    (205) condiciones -> . factor MENORQUE factor
    (206) condiciones -> . factor DIFERENTE factor
    (207) condiciones -> . factor ESIGUAL factor
    (208) condiciones -> . factor MENORIGUAL factor
    (209) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (183) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (169) funcion -> . funcion_sin_parametro
    (170) funcion -> . funcion_parametro
    (171) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT
    (136) slices -> . declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT
    (137) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (138) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (139) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (140) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (141) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (142) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (143) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (144) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (145) slices -> . declaracion_slices_enteros
    (146) slices -> . declaracion_slices_strings
    (147) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (148) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (149) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (150) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (151) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (152) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (153) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (154) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (172) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (173) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (174) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (176) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (156) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (157) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT
    (158) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT CORCHRIGHT INT
    (159) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT
    (160) declaracion_slices_enteros -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (161) declaracion_slices_enteros -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT
    (162) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING
    (163) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (164) declaracion_slices_strings -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (165) declaracion_slices_strings -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    RETURN          shift and go to state 284
    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    BOOL            shift and go to state 17
    FUNC            shift and go to state 40
    PARLEFT         shift and go to state 27

    instrucciones                  shift and go to state 283
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices_enteros     shift and go to state 36
    declaracion_slices_strings     shift and go to state 37
    numericos                      shift and go to state 39

state 251

    (176) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT . LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT . LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT . LLAVELEFT RETURN LLAVERIGHT

    LLAVELEFT       shift and go to state 285


state 252

    (181) parametros -> typeData VARIABLE .
    (182) parametros -> typeData VARIABLE . COMA parametros

    PARRIGHT        reduce using rule 181 (parametros -> typeData VARIABLE .)
    COMA            shift and go to state 286


state 253

    (92) array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .

    $end            reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    RETURN          reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    LLAVERIGHT      reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    PACKAGE         reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    VAR             reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    VARIABLE        reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    IF              reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    FOR             reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    IMPRIMIR        reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    MAP             reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    PRODUCTO        reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    SCAN            reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    SWITCH          reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    ENTERO          reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    FLOTANTE        reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    BOOL            reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    FUNC            reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    PARLEFT         reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    BREAK           reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    CONTINUE        reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    CASE            reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)
    DEFAULT         reduce using rule 92 (array -> VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray .)


state 254

    (93) contArray -> INT . LLAVELEFT contArrayEnteros LLAVERIGHT

    LLAVELEFT       shift and go to state 287


state 255

    (94) contArray -> STRING . LLAVELEFT contArrayCadenas LLAVERIGHT

    LLAVELEFT       shift and go to state 288


state 256

    (95) contArray -> FLOAT . LLAVELEFT contArrayFloat LLAVERIGHT

    LLAVELEFT       shift and go to state 289


state 257

    (137) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT . INT COMA ENTERO PARRIGHT
    (141) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT . INT COMA ENTERO COMA ENTERO PARRIGHT
    (147) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT . STRING COMA ENTERO PARRIGHT
    (151) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT . STRING COMA ENTERO COMA ENTERO PARRIGHT

    INT             shift and go to state 290
    STRING          shift and go to state 291


state 258

    (138) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT . INT COMA ENTERO PARRIGHT
    (142) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT . INT COMA ENTERO COMA ENTERO PARRIGHT
    (148) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT . STRING COMA ENTERO PARRIGHT
    (152) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT . STRING COMA ENTERO COMA ENTERO PARRIGHT

    INT             shift and go to state 292
    STRING          shift and go to state 293


state 259

    (160) declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .

    LLAVELEFT       reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    $end            reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    RETURN          reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    LLAVERIGHT      reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    PACKAGE         reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    VAR             reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    VARIABLE        reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    IF              reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    FOR             reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    IMPRIMIR        reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    MAP             reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    PRODUCTO        reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    SCAN            reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    SWITCH          reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    ENTERO          reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    FLOTANTE        reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    BOOL            reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    FUNC            reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    PARLEFT         reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    BREAK           reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    CONTINUE        reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    CASE            reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    DEFAULT         reduce using rule 160 (declaracion_slices_enteros -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)


state 260

    (164) declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .

    LLAVELEFT       reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    $end            reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    RETURN          reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    LLAVERIGHT      reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    PACKAGE         reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    VAR             reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    VARIABLE        reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    IF              reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    FOR             reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    IMPRIMIR        reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    MAP             reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    PRODUCTO        reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    SCAN            reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    SWITCH          reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    ENTERO          reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    FLOTANTE        reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    BOOL            reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    FUNC            reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    PARLEFT         reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    BREAK           reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    CONTINUE        reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    CASE            reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    DEFAULT         reduce using rule 164 (declaracion_slices_strings -> VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)


state 261

    (140) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT . CORCHRIGHT INT COMA ENTERO PARRIGHT
    (144) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT . CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (150) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT . CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (154) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT . CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT

    CORCHRIGHT      shift and go to state 294


state 262

    (156) declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT . INT
    (163) declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT . STRING

    INT             shift and go to state 295
    STRING          shift and go to state 296


state 263

    (159) declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .

    LLAVELEFT       reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    $end            reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    RETURN          reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    LLAVERIGHT      reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    PACKAGE         reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    VAR             reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    VARIABLE        reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    IF              reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    FOR             reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    IMPRIMIR        reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    MAP             reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    PRODUCTO        reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    SCAN            reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    SWITCH          reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    ENTERO          reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    FLOTANTE        reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    BOOL            reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    FUNC            reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    PARLEFT         reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    BREAK           reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    CONTINUE        reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    CASE            reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)
    DEFAULT         reduce using rule 159 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT .)


state 264

    (162) declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .

    LLAVELEFT       reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    $end            reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    RETURN          reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    LLAVERIGHT      reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    PACKAGE         reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    VAR             reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    VARIABLE        reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    IF              reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    FOR             reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    IMPRIMIR        reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    MAP             reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    PRODUCTO        reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    SCAN            reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    SWITCH          reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    ENTERO          reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    FLOTANTE        reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    BOOL            reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    FUNC            reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    PARLEFT         reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    BREAK           reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    CONTINUE        reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    CASE            reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)
    DEFAULT         reduce using rule 162 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING .)


state 265

    (139) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT . CORCHRIGHT INT COMA ENTERO PARRIGHT
    (143) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT . CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (149) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT . CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (153) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT . CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT

    CORCHRIGHT      shift and go to state 297


state 266

    (157) declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .

    LLAVELEFT       reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    $end            reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    RETURN          reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    LLAVERIGHT      reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    PACKAGE         reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    VAR             reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    VARIABLE        reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    IF              reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    FOR             reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    IMPRIMIR        reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    MAP             reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    PRODUCTO        reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    SCAN            reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    SWITCH          reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    ENTERO          reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    FLOTANTE        reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    BOOL            reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    FUNC            reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    PARLEFT         reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    BREAK           reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    CONTINUE        reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    CASE            reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)
    DEFAULT         reduce using rule 157 (declaracion_slices_enteros -> VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT .)


state 267

    (14) masInstrucciones -> masInstrucciones instrucciones .

    RETURN          reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    LLAVERIGHT      reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    PACKAGE         reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    VAR             reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    VARIABLE        reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    IF              reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    FOR             reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    IMPRIMIR        reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    MAP             reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    PRODUCTO        reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    SCAN            reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    SWITCH          reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    ENTERO          reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    FLOTANTE        reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    BOOL            reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    FUNC            reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    PARLEFT         reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    BREAK           reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    CONTINUE        reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    CASE            reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)
    DEFAULT         reduce using rule 14 (masInstrucciones -> masInstrucciones instrucciones .)


state 268

    (41) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN . VARIABLE LLAVERIGHT
    (42) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN . VARIABLE LLAVERIGHT else

    VARIABLE        shift and go to state 298


state 269

    (43) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .
    (44) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT . else
    (47) else -> . ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (48) else -> . ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (49) else -> . ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (50) else -> . ELSE sentenciaIf

    $end            reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    RETURN          reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PACKAGE         reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    VAR             reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    VARIABLE        reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    IF              reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FOR             reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    IMPRIMIR        reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    MAP             reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PRODUCTO        reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    SCAN            reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    SWITCH          reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    ENTERO          reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FLOTANTE        reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    BOOL            reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FUNC            reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PARLEFT         reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    BREAK           reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    CONTINUE        reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    CASE            reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    DEFAULT         reduce using rule 43 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    ELSE            shift and go to state 300

    else                           shift and go to state 299

state 270

    (45) sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .
    (46) sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT . else
    (47) else -> . ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (48) else -> . ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (49) else -> . ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (50) else -> . ELSE sentenciaIf

    $end            reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    RETURN          reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    PACKAGE         reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    VAR             reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    VARIABLE        reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    IF              reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    FOR             reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    IMPRIMIR        reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    MAP             reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    PRODUCTO        reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    SCAN            reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    SWITCH          reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    ENTERO          reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    FLOTANTE        reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    BOOL            reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    FUNC            reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    PARLEFT         reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    BREAK           reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    CONTINUE        reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    CASE            reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    DEFAULT         reduce using rule 45 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    ELSE            shift and go to state 300

    else                           shift and go to state 301

state 271

    (85) sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa . LLAVELEFT instrucciones masInstrucciones LLAVERIGHT

    LLAVELEFT       shift and go to state 302


state 272

    (87) incrementa -> VARIABLE . INCREMENTO

    INCREMENTO      shift and go to state 303


state 273

    (109) masCont -> masCont COMA contenido .

    COMA            reduce using rule 109 (masCont -> masCont COMA contenido .)
    PARRIGHT        reduce using rule 109 (masCont -> masCont COMA contenido .)


state 274

    (103) methodArray -> namemetodoArr PARLEFT VARIABLE PARRIGHT .

    COMA            reduce using rule 103 (methodArray -> namemetodoArr PARLEFT VARIABLE PARRIGHT .)
    PARRIGHT        reduce using rule 103 (methodArray -> namemetodoArr PARLEFT VARIABLE PARRIGHT .)


state 275

    (54) contMapa -> STRING LLAVELEFT . parCadena LLAVERIGHT
    (63) parCadena -> . CADENA DOSPUNTOS datoCadena masCadena
    (64) parCadena -> . CADENA DOSPUNTOS datoCadena

    CADENA          shift and go to state 305

    parCadena                      shift and go to state 304

state 276

    (51) mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT . LLAVERIGHT

    LLAVERIGHT      shift and go to state 306


state 277

    (56) contMapa -> BOOL LLAVELEFT . parBoolean LLAVERIGHT
    (75) parBoolean -> . CADENA DOSPUNTOS datoBoolean masBoolean
    (76) parBoolean -> . CADENA DOSPUNTOS datoBoolean

    CADENA          shift and go to state 308

    parBoolean                     shift and go to state 307

state 278

    (53) contMapa -> INT LLAVELEFT . parEntero LLAVERIGHT
    (57) parEntero -> . CADENA DOSPUNTOS datoEntero masEntero
    (58) parEntero -> . CADENA DOSPUNTOS datoEntero

    CADENA          shift and go to state 310

    parEntero                      shift and go to state 309

state 279

    (55) contMapa -> FLOAT LLAVELEFT . parFlotante LLAVERIGHT
    (69) parFlotante -> . CADENA DOSPUNTOS datoFlotante masFlotante
    (70) parFlotante -> . CADENA DOSPUNTOS datoFlotante

    CADENA          shift and go to state 312

    parFlotante                    shift and go to state 311

state 280

    (184) bloque_switch -> CASE caso_switch DOSPUNTOS . instrucciones masInstrucciones BREAK
    (185) bloque_switch -> CASE caso_switch DOSPUNTOS . instrucciones masInstrucciones
    (186) bloque_switch -> CASE caso_switch DOSPUNTOS . instrucciones BREAK
    (187) bloque_switch -> CASE caso_switch DOSPUNTOS . instrucciones
    (188) bloque_switch -> CASE caso_switch DOSPUNTOS . instrucciones masInstrucciones CONTINUE
    (189) bloque_switch -> CASE caso_switch DOSPUNTOS . instrucciones CONTINUE
    (190) bloque_switch -> CASE caso_switch DOSPUNTOS . instrucciones masInstrucciones BREAK bloque_switch
    (191) bloque_switch -> CASE caso_switch DOSPUNTOS . instrucciones masInstrucciones bloque_switch
    (192) bloque_switch -> CASE caso_switch DOSPUNTOS . instrucciones bloque_switch
    (193) bloque_switch -> CASE caso_switch DOSPUNTOS . instrucciones switch_default
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (204) condiciones -> . factor MAYORQUE factor
    (205) condiciones -> . factor MENORQUE factor
    (206) condiciones -> . factor DIFERENTE factor
    (207) condiciones -> . factor ESIGUAL factor
    (208) condiciones -> . factor MENORIGUAL factor
    (209) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (183) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (169) funcion -> . funcion_sin_parametro
    (170) funcion -> . funcion_parametro
    (171) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT
    (136) slices -> . declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT
    (137) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (138) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (139) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (140) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (141) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (142) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (143) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (144) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (145) slices -> . declaracion_slices_enteros
    (146) slices -> . declaracion_slices_strings
    (147) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (148) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (149) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (150) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (151) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (152) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (153) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (154) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (172) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (173) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (174) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (176) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (156) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (157) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT
    (158) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT CORCHRIGHT INT
    (159) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT
    (160) declaracion_slices_enteros -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (161) declaracion_slices_enteros -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT
    (162) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING
    (163) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (164) declaracion_slices_strings -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (165) declaracion_slices_strings -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    BOOL            shift and go to state 17
    FUNC            shift and go to state 40
    PARLEFT         shift and go to state 27

    instrucciones                  shift and go to state 313
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices_enteros     shift and go to state 36
    declaracion_slices_strings     shift and go to state 37
    numericos                      shift and go to state 39

state 281

    (198) switch_default -> DEFAULT DOSPUNTOS instrucciones . masInstrucciones BREAK
    (199) switch_default -> DEFAULT DOSPUNTOS instrucciones . masInstrucciones
    (200) switch_default -> DEFAULT DOSPUNTOS instrucciones . BREAK
    (201) switch_default -> DEFAULT DOSPUNTOS instrucciones . masInstrucciones CONTINUE
    (202) switch_default -> DEFAULT DOSPUNTOS instrucciones . CONTINUE
    (203) switch_default -> DEFAULT DOSPUNTOS instrucciones .
    (14) masInstrucciones -> . masInstrucciones instrucciones
    (15) masInstrucciones -> . masInstrucciones
    (16) masInstrucciones -> .

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! reduce/reduce conflict for LLAVERIGHT resolved using rule 16 (masInstrucciones -> .)
    BREAK           shift and go to state 315
    CONTINUE        shift and go to state 316
    PACKAGE         reduce using rule 16 (masInstrucciones -> .)
    VAR             reduce using rule 16 (masInstrucciones -> .)
    VARIABLE        reduce using rule 16 (masInstrucciones -> .)
    IF              reduce using rule 16 (masInstrucciones -> .)
    FOR             reduce using rule 16 (masInstrucciones -> .)
    IMPRIMIR        reduce using rule 16 (masInstrucciones -> .)
    MAP             reduce using rule 16 (masInstrucciones -> .)
    PRODUCTO        reduce using rule 16 (masInstrucciones -> .)
    SCAN            reduce using rule 16 (masInstrucciones -> .)
    SWITCH          reduce using rule 16 (masInstrucciones -> .)
    ENTERO          reduce using rule 16 (masInstrucciones -> .)
    FLOTANTE        reduce using rule 16 (masInstrucciones -> .)
    BOOL            reduce using rule 16 (masInstrucciones -> .)
    FUNC            reduce using rule 16 (masInstrucciones -> .)
    PARLEFT         reduce using rule 16 (masInstrucciones -> .)
    LLAVERIGHT      reduce using rule 16 (masInstrucciones -> .)

  ! LLAVERIGHT      [ reduce using rule 203 (switch_default -> DEFAULT DOSPUNTOS instrucciones .) ]
  ! BREAK           [ reduce using rule 16 (masInstrucciones -> .) ]
  ! CONTINUE        [ reduce using rule 16 (masInstrucciones -> .) ]

    masInstrucciones               shift and go to state 314

state 282

    (180) parametros -> VARIABLE COMA parametros .

    PARRIGHT        reduce using rule 180 (parametros -> VARIABLE COMA parametros .)


state 283

    (172) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones . masInstrucciones LLAVERIGHT
    (174) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones . masInstrucciones RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones . masInstrucciones RETURN VARIABLE LLAVERIGHT
    (14) masInstrucciones -> . masInstrucciones instrucciones
    (15) masInstrucciones -> . masInstrucciones
    (16) masInstrucciones -> .

    LLAVERIGHT      reduce using rule 16 (masInstrucciones -> .)
    RETURN          reduce using rule 16 (masInstrucciones -> .)
    PACKAGE         reduce using rule 16 (masInstrucciones -> .)
    VAR             reduce using rule 16 (masInstrucciones -> .)
    VARIABLE        reduce using rule 16 (masInstrucciones -> .)
    IF              reduce using rule 16 (masInstrucciones -> .)
    FOR             reduce using rule 16 (masInstrucciones -> .)
    IMPRIMIR        reduce using rule 16 (masInstrucciones -> .)
    MAP             reduce using rule 16 (masInstrucciones -> .)
    PRODUCTO        reduce using rule 16 (masInstrucciones -> .)
    SCAN            reduce using rule 16 (masInstrucciones -> .)
    SWITCH          reduce using rule 16 (masInstrucciones -> .)
    ENTERO          reduce using rule 16 (masInstrucciones -> .)
    FLOTANTE        reduce using rule 16 (masInstrucciones -> .)
    BOOL            reduce using rule 16 (masInstrucciones -> .)
    FUNC            reduce using rule 16 (masInstrucciones -> .)
    PARLEFT         reduce using rule 16 (masInstrucciones -> .)

    masInstrucciones               shift and go to state 317

state 284

    (173) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN . LLAVERIGHT

    LLAVERIGHT      shift and go to state 318


state 285

    (176) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT . instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT . instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT . RETURN LLAVERIGHT
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (204) condiciones -> . factor MAYORQUE factor
    (205) condiciones -> . factor MENORQUE factor
    (206) condiciones -> . factor DIFERENTE factor
    (207) condiciones -> . factor ESIGUAL factor
    (208) condiciones -> . factor MENORIGUAL factor
    (209) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (183) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (169) funcion -> . funcion_sin_parametro
    (170) funcion -> . funcion_parametro
    (171) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT
    (136) slices -> . declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT
    (137) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (138) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (139) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (140) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (141) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (142) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (143) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (144) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (145) slices -> . declaracion_slices_enteros
    (146) slices -> . declaracion_slices_strings
    (147) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (148) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (149) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (150) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (151) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (152) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (153) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (154) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (172) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (173) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (174) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (176) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (156) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (157) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT
    (158) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT CORCHRIGHT INT
    (159) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT
    (160) declaracion_slices_enteros -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (161) declaracion_slices_enteros -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT
    (162) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING
    (163) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (164) declaracion_slices_strings -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (165) declaracion_slices_strings -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    RETURN          shift and go to state 320
    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    BOOL            shift and go to state 17
    FUNC            shift and go to state 40
    PARLEFT         shift and go to state 27

    instrucciones                  shift and go to state 319
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices_enteros     shift and go to state 36
    declaracion_slices_strings     shift and go to state 37
    numericos                      shift and go to state 39

state 286

    (182) parametros -> typeData VARIABLE COMA . parametros
    (179) parametros -> . VARIABLE
    (180) parametros -> . VARIABLE COMA parametros
    (181) parametros -> . typeData VARIABLE
    (182) parametros -> . typeData VARIABLE COMA parametros
    (88) typeData -> . BOOL
    (89) typeData -> . INT
    (90) typeData -> . FLOAT
    (91) typeData -> . STRING

    VARIABLE        shift and go to state 202
    BOOL            shift and go to state 78
    INT             shift and go to state 79
    FLOAT           shift and go to state 80
    STRING          shift and go to state 81

    typeData                       shift and go to state 205
    parametros                     shift and go to state 321

state 287

    (93) contArray -> INT LLAVELEFT . contArrayEnteros LLAVERIGHT
    (96) contArrayEnteros -> . ENTERO COMA ENTERO
    (97) contArrayEnteros -> . contArrayEnteros COMA ENTERO

    ENTERO          shift and go to state 156

    contArrayEnteros               shift and go to state 322

state 288

    (94) contArray -> STRING LLAVELEFT . contArrayCadenas LLAVERIGHT
    (98) contArrayCadenas -> . CADENA COMA CADENA
    (99) contArrayCadenas -> . contArrayCadenas COMA CADENA

    CADENA          shift and go to state 158

    contArrayCadenas               shift and go to state 323

state 289

    (95) contArray -> FLOAT LLAVELEFT . contArrayFloat LLAVERIGHT
    (100) contArrayFloat -> . FLOTANTE COMA FLOTANTE
    (101) contArrayFloat -> . contArrayFloat COMA FLOTANTE

    FLOTANTE        shift and go to state 325

    contArrayFloat                 shift and go to state 324

state 290

    (137) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT . COMA ENTERO PARRIGHT
    (141) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT . COMA ENTERO COMA ENTERO PARRIGHT

    COMA            shift and go to state 326


state 291

    (147) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING . COMA ENTERO PARRIGHT
    (151) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING . COMA ENTERO COMA ENTERO PARRIGHT

    COMA            shift and go to state 327


state 292

    (138) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT . COMA ENTERO PARRIGHT
    (142) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT . COMA ENTERO COMA ENTERO PARRIGHT

    COMA            shift and go to state 328


state 293

    (148) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING . COMA ENTERO PARRIGHT
    (152) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING . COMA ENTERO COMA ENTERO PARRIGHT

    COMA            shift and go to state 329


state 294

    (140) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT . INT COMA ENTERO PARRIGHT
    (144) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT . INT COMA ENTERO COMA ENTERO PARRIGHT
    (150) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT . STRING COMA ENTERO PARRIGHT
    (154) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT . STRING COMA ENTERO COMA ENTERO PARRIGHT

    INT             shift and go to state 330
    STRING          shift and go to state 331


state 295

    (156) declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .

    LLAVELEFT       reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    $end            reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    RETURN          reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    LLAVERIGHT      reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    PACKAGE         reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    VAR             reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    VARIABLE        reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    IF              reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    FOR             reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    IMPRIMIR        reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    MAP             reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    PRODUCTO        reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    SCAN            reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    SWITCH          reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    ENTERO          reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    FLOTANTE        reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    BOOL            reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    FUNC            reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    PARLEFT         reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    BREAK           reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    CONTINUE        reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    CASE            reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)
    DEFAULT         reduce using rule 156 (declaracion_slices_enteros -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT .)


state 296

    (163) declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .

    LLAVELEFT       reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    $end            reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    RETURN          reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    LLAVERIGHT      reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    PACKAGE         reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    VAR             reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    VARIABLE        reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    IF              reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    FOR             reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    IMPRIMIR        reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    MAP             reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    PRODUCTO        reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    SCAN            reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    SWITCH          reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    ENTERO          reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    FLOTANTE        reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    BOOL            reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    FUNC            reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    PARLEFT         reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    BREAK           reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    CONTINUE        reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    CASE            reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)
    DEFAULT         reduce using rule 163 (declaracion_slices_strings -> VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING .)


state 297

    (139) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT . INT COMA ENTERO PARRIGHT
    (143) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT . INT COMA ENTERO COMA ENTERO PARRIGHT
    (149) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT . STRING COMA ENTERO PARRIGHT
    (153) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT . STRING COMA ENTERO COMA ENTERO PARRIGHT

    INT             shift and go to state 332
    STRING          shift and go to state 333


state 298

    (41) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE . LLAVERIGHT
    (42) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE . LLAVERIGHT else

    LLAVERIGHT      shift and go to state 334


state 299

    (44) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .

    $end            reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    RETURN          reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    LLAVERIGHT      reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    PACKAGE         reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    VAR             reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    VARIABLE        reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    IF              reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    FOR             reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    IMPRIMIR        reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    MAP             reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    PRODUCTO        reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    SCAN            reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    SWITCH          reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    ENTERO          reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    FLOTANTE        reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    BOOL            reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    FUNC            reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    PARLEFT         reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    BREAK           reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    CONTINUE        reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    CASE            reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)
    DEFAULT         reduce using rule 44 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else .)


state 300

    (47) else -> ELSE . LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (48) else -> ELSE . LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (49) else -> ELSE . LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (50) else -> ELSE . sentenciaIf
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else

    LLAVELEFT       shift and go to state 335
    IF              shift and go to state 24

    sentenciaIf                    shift and go to state 336

state 301

    (46) sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .

    $end            reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    RETURN          reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    LLAVERIGHT      reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    PACKAGE         reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    VAR             reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    VARIABLE        reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    IF              reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    FOR             reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    IMPRIMIR        reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    MAP             reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    PRODUCTO        reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    SCAN            reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    SWITCH          reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    ENTERO          reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    FLOTANTE        reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    BOOL            reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    FUNC            reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    PARLEFT         reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    BREAK           reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    CONTINUE        reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    CASE            reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)
    DEFAULT         reduce using rule 46 (sentenciaIf -> IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else .)


state 302

    (85) sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT . instrucciones masInstrucciones LLAVERIGHT
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (204) condiciones -> . factor MAYORQUE factor
    (205) condiciones -> . factor MENORQUE factor
    (206) condiciones -> . factor DIFERENTE factor
    (207) condiciones -> . factor ESIGUAL factor
    (208) condiciones -> . factor MENORIGUAL factor
    (209) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (183) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (169) funcion -> . funcion_sin_parametro
    (170) funcion -> . funcion_parametro
    (171) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT
    (136) slices -> . declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT
    (137) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (138) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (139) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (140) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (141) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (142) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (143) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (144) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (145) slices -> . declaracion_slices_enteros
    (146) slices -> . declaracion_slices_strings
    (147) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (148) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (149) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (150) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (151) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (152) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (153) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (154) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (172) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (173) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (174) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (176) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (156) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (157) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT
    (158) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT CORCHRIGHT INT
    (159) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT
    (160) declaracion_slices_enteros -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (161) declaracion_slices_enteros -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT
    (162) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING
    (163) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (164) declaracion_slices_strings -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (165) declaracion_slices_strings -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    BOOL            shift and go to state 17
    FUNC            shift and go to state 40
    PARLEFT         shift and go to state 27

    condiciones                    shift and go to state 4
    instrucciones                  shift and go to state 337
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices_enteros     shift and go to state 36
    declaracion_slices_strings     shift and go to state 37
    numericos                      shift and go to state 39

state 303

    (87) incrementa -> VARIABLE INCREMENTO .

    LLAVELEFT       reduce using rule 87 (incrementa -> VARIABLE INCREMENTO .)


state 304

    (54) contMapa -> STRING LLAVELEFT parCadena . LLAVERIGHT

    LLAVERIGHT      shift and go to state 338


state 305

    (63) parCadena -> CADENA . DOSPUNTOS datoCadena masCadena
    (64) parCadena -> CADENA . DOSPUNTOS datoCadena

    DOSPUNTOS       shift and go to state 339


state 306

    (51) mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .

    $end            reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    RETURN          reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    PACKAGE         reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    VAR             reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    VARIABLE        reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    IF              reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    FOR             reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    IMPRIMIR        reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    MAP             reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    PRODUCTO        reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    SCAN            reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    SWITCH          reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    ENTERO          reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    FLOTANTE        reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    BOOL            reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    FUNC            reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    PARLEFT         reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    BREAK           reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    CONTINUE        reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    CASE            reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)
    DEFAULT         reduce using rule 51 (mapa -> MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT .)


state 307

    (56) contMapa -> BOOL LLAVELEFT parBoolean . LLAVERIGHT

    LLAVERIGHT      shift and go to state 340


state 308

    (75) parBoolean -> CADENA . DOSPUNTOS datoBoolean masBoolean
    (76) parBoolean -> CADENA . DOSPUNTOS datoBoolean

    DOSPUNTOS       shift and go to state 341


state 309

    (53) contMapa -> INT LLAVELEFT parEntero . LLAVERIGHT

    LLAVERIGHT      shift and go to state 342


state 310

    (57) parEntero -> CADENA . DOSPUNTOS datoEntero masEntero
    (58) parEntero -> CADENA . DOSPUNTOS datoEntero

    DOSPUNTOS       shift and go to state 343


state 311

    (55) contMapa -> FLOAT LLAVELEFT parFlotante . LLAVERIGHT

    LLAVERIGHT      shift and go to state 344


state 312

    (69) parFlotante -> CADENA . DOSPUNTOS datoFlotante masFlotante
    (70) parFlotante -> CADENA . DOSPUNTOS datoFlotante

    DOSPUNTOS       shift and go to state 345


state 313

    (184) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones . masInstrucciones BREAK
    (185) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones . masInstrucciones
    (186) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones . BREAK
    (187) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones .
    (188) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones . masInstrucciones CONTINUE
    (189) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones . CONTINUE
    (190) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones . masInstrucciones BREAK bloque_switch
    (191) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones . masInstrucciones bloque_switch
    (192) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones . bloque_switch
    (193) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones . switch_default
    (14) masInstrucciones -> . masInstrucciones instrucciones
    (15) masInstrucciones -> . masInstrucciones
    (16) masInstrucciones -> .
    (184) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK
    (185) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones
    (186) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones BREAK
    (187) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones
    (188) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones CONTINUE
    (189) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones CONTINUE
    (190) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK bloque_switch
    (191) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones bloque_switch
    (192) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones bloque_switch
    (193) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones switch_default
    (194) bloque_switch -> . switch_default
    (198) switch_default -> . DEFAULT DOSPUNTOS instrucciones masInstrucciones BREAK
    (199) switch_default -> . DEFAULT DOSPUNTOS instrucciones masInstrucciones
    (200) switch_default -> . DEFAULT DOSPUNTOS instrucciones BREAK
    (201) switch_default -> . DEFAULT DOSPUNTOS instrucciones masInstrucciones CONTINUE
    (202) switch_default -> . DEFAULT DOSPUNTOS instrucciones CONTINUE
    (203) switch_default -> . DEFAULT DOSPUNTOS instrucciones

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! reduce/reduce conflict for LLAVERIGHT resolved using rule 16 (masInstrucciones -> .)
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
    BREAK           shift and go to state 347
    CONTINUE        shift and go to state 348
    PACKAGE         reduce using rule 16 (masInstrucciones -> .)
    VAR             reduce using rule 16 (masInstrucciones -> .)
    VARIABLE        reduce using rule 16 (masInstrucciones -> .)
    IF              reduce using rule 16 (masInstrucciones -> .)
    FOR             reduce using rule 16 (masInstrucciones -> .)
    IMPRIMIR        reduce using rule 16 (masInstrucciones -> .)
    MAP             reduce using rule 16 (masInstrucciones -> .)
    PRODUCTO        reduce using rule 16 (masInstrucciones -> .)
    SCAN            reduce using rule 16 (masInstrucciones -> .)
    SWITCH          reduce using rule 16 (masInstrucciones -> .)
    ENTERO          reduce using rule 16 (masInstrucciones -> .)
    FLOTANTE        reduce using rule 16 (masInstrucciones -> .)
    BOOL            reduce using rule 16 (masInstrucciones -> .)
    FUNC            reduce using rule 16 (masInstrucciones -> .)
    PARLEFT         reduce using rule 16 (masInstrucciones -> .)
    LLAVERIGHT      reduce using rule 16 (masInstrucciones -> .)
    CASE            shift and go to state 193
    DEFAULT         shift and go to state 195

  ! LLAVERIGHT      [ reduce using rule 187 (bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones .) ]
  ! BREAK           [ reduce using rule 16 (masInstrucciones -> .) ]
  ! CONTINUE        [ reduce using rule 16 (masInstrucciones -> .) ]
  ! CASE            [ reduce using rule 16 (masInstrucciones -> .) ]
  ! DEFAULT         [ reduce using rule 16 (masInstrucciones -> .) ]

    masInstrucciones               shift and go to state 346
    bloque_switch                  shift and go to state 349
    switch_default                 shift and go to state 350

state 314

    (198) switch_default -> DEFAULT DOSPUNTOS instrucciones masInstrucciones . BREAK
    (199) switch_default -> DEFAULT DOSPUNTOS instrucciones masInstrucciones .
    (201) switch_default -> DEFAULT DOSPUNTOS instrucciones masInstrucciones . CONTINUE
    (14) masInstrucciones -> masInstrucciones . instrucciones
    (15) masInstrucciones -> masInstrucciones .
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (204) condiciones -> . factor MAYORQUE factor
    (205) condiciones -> . factor MENORQUE factor
    (206) condiciones -> . factor DIFERENTE factor
    (207) condiciones -> . factor ESIGUAL factor
    (208) condiciones -> . factor MENORIGUAL factor
    (209) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (183) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (169) funcion -> . funcion_sin_parametro
    (170) funcion -> . funcion_parametro
    (171) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT
    (136) slices -> . declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT
    (137) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (138) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (139) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (140) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (141) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (142) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (143) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (144) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (145) slices -> . declaracion_slices_enteros
    (146) slices -> . declaracion_slices_strings
    (147) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (148) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (149) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (150) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (151) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (152) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (153) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (154) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (172) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (173) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (174) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (176) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (156) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (157) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT
    (158) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT CORCHRIGHT INT
    (159) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT
    (160) declaracion_slices_enteros -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (161) declaracion_slices_enteros -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT
    (162) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING
    (163) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (164) declaracion_slices_strings -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (165) declaracion_slices_strings -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! reduce/reduce conflict for LLAVERIGHT resolved using rule 15 (masInstrucciones -> masInstrucciones .)
  ! shift/reduce conflict for PACKAGE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for PRODUCTO resolved as shift
  ! shift/reduce conflict for SCAN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for PARLEFT resolved as shift
    BREAK           shift and go to state 351
    CONTINUE        shift and go to state 352
    LLAVERIGHT      reduce using rule 15 (masInstrucciones -> masInstrucciones .)
    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    BOOL            shift and go to state 17
    FUNC            shift and go to state 40
    PARLEFT         shift and go to state 27

  ! LLAVERIGHT      [ reduce using rule 199 (switch_default -> DEFAULT DOSPUNTOS instrucciones masInstrucciones .) ]
  ! BREAK           [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! CONTINUE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PACKAGE         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VAR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VARIABLE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IF              [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FOR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IMPRIMIR        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! MAP             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PRODUCTO        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SCAN            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SWITCH          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! ENTERO          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FLOTANTE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! BOOL            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FUNC            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PARLEFT         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]

    instrucciones                  shift and go to state 267
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices_enteros     shift and go to state 36
    declaracion_slices_strings     shift and go to state 37
    numericos                      shift and go to state 39

state 315

    (200) switch_default -> DEFAULT DOSPUNTOS instrucciones BREAK .

    LLAVERIGHT      reduce using rule 200 (switch_default -> DEFAULT DOSPUNTOS instrucciones BREAK .)


state 316

    (202) switch_default -> DEFAULT DOSPUNTOS instrucciones CONTINUE .

    LLAVERIGHT      reduce using rule 202 (switch_default -> DEFAULT DOSPUNTOS instrucciones CONTINUE .)


state 317

    (172) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones . LLAVERIGHT
    (174) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones . RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones . RETURN VARIABLE LLAVERIGHT
    (14) masInstrucciones -> masInstrucciones . instrucciones
    (15) masInstrucciones -> masInstrucciones .
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (204) condiciones -> . factor MAYORQUE factor
    (205) condiciones -> . factor MENORQUE factor
    (206) condiciones -> . factor DIFERENTE factor
    (207) condiciones -> . factor ESIGUAL factor
    (208) condiciones -> . factor MENORIGUAL factor
    (209) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (183) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (169) funcion -> . funcion_sin_parametro
    (170) funcion -> . funcion_parametro
    (171) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT
    (136) slices -> . declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT
    (137) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (138) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (139) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (140) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (141) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (142) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (143) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (144) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (145) slices -> . declaracion_slices_enteros
    (146) slices -> . declaracion_slices_strings
    (147) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (148) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (149) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (150) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (151) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (152) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (153) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (154) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (172) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (173) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (174) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (176) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (156) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (157) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT
    (158) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT CORCHRIGHT INT
    (159) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT
    (160) declaracion_slices_enteros -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (161) declaracion_slices_enteros -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT
    (162) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING
    (163) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (164) declaracion_slices_strings -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (165) declaracion_slices_strings -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

  ! shift/reduce conflict for LLAVERIGHT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PACKAGE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for PRODUCTO resolved as shift
  ! shift/reduce conflict for SCAN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for PARLEFT resolved as shift
    LLAVERIGHT      shift and go to state 353
    RETURN          shift and go to state 354
    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    BOOL            shift and go to state 17
    FUNC            shift and go to state 40
    PARLEFT         shift and go to state 27

  ! LLAVERIGHT      [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! RETURN          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PACKAGE         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VAR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VARIABLE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IF              [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FOR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IMPRIMIR        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! MAP             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PRODUCTO        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SCAN            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SWITCH          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! ENTERO          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FLOTANTE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! BOOL            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FUNC            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PARLEFT         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]

    instrucciones                  shift and go to state 267
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices_enteros     shift and go to state 36
    declaracion_slices_strings     shift and go to state 37
    numericos                      shift and go to state 39

state 318

    (173) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .

    $end            reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    RETURN          reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    PACKAGE         reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    VAR             reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    VARIABLE        reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    IF              reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    FOR             reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    IMPRIMIR        reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    MAP             reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    PRODUCTO        reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    SCAN            reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    SWITCH          reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    ENTERO          reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    FLOTANTE        reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    BOOL            reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    FUNC            reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    PARLEFT         reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    BREAK           reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    CONTINUE        reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    CASE            reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    DEFAULT         reduce using rule 173 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)


state 319

    (176) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones . masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones . masInstrucciones RETURN LLAVERIGHT
    (14) masInstrucciones -> . masInstrucciones instrucciones
    (15) masInstrucciones -> . masInstrucciones
    (16) masInstrucciones -> .

    LLAVERIGHT      reduce using rule 16 (masInstrucciones -> .)
    RETURN          reduce using rule 16 (masInstrucciones -> .)
    PACKAGE         reduce using rule 16 (masInstrucciones -> .)
    VAR             reduce using rule 16 (masInstrucciones -> .)
    VARIABLE        reduce using rule 16 (masInstrucciones -> .)
    IF              reduce using rule 16 (masInstrucciones -> .)
    FOR             reduce using rule 16 (masInstrucciones -> .)
    IMPRIMIR        reduce using rule 16 (masInstrucciones -> .)
    MAP             reduce using rule 16 (masInstrucciones -> .)
    PRODUCTO        reduce using rule 16 (masInstrucciones -> .)
    SCAN            reduce using rule 16 (masInstrucciones -> .)
    SWITCH          reduce using rule 16 (masInstrucciones -> .)
    ENTERO          reduce using rule 16 (masInstrucciones -> .)
    FLOTANTE        reduce using rule 16 (masInstrucciones -> .)
    BOOL            reduce using rule 16 (masInstrucciones -> .)
    FUNC            reduce using rule 16 (masInstrucciones -> .)
    PARLEFT         reduce using rule 16 (masInstrucciones -> .)

    masInstrucciones               shift and go to state 355

state 320

    (178) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN . LLAVERIGHT

    LLAVERIGHT      shift and go to state 356


state 321

    (182) parametros -> typeData VARIABLE COMA parametros .

    PARRIGHT        reduce using rule 182 (parametros -> typeData VARIABLE COMA parametros .)


state 322

    (93) contArray -> INT LLAVELEFT contArrayEnteros . LLAVERIGHT
    (97) contArrayEnteros -> contArrayEnteros . COMA ENTERO

    LLAVERIGHT      shift and go to state 357
    COMA            shift and go to state 197


state 323

    (94) contArray -> STRING LLAVELEFT contArrayCadenas . LLAVERIGHT
    (99) contArrayCadenas -> contArrayCadenas . COMA CADENA

    LLAVERIGHT      shift and go to state 358
    COMA            shift and go to state 200


state 324

    (95) contArray -> FLOAT LLAVELEFT contArrayFloat . LLAVERIGHT
    (101) contArrayFloat -> contArrayFloat . COMA FLOTANTE

    LLAVERIGHT      shift and go to state 359
    COMA            shift and go to state 360


state 325

    (100) contArrayFloat -> FLOTANTE . COMA FLOTANTE

    COMA            shift and go to state 361


state 326

    (137) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA . ENTERO PARRIGHT
    (141) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA . ENTERO COMA ENTERO PARRIGHT

    ENTERO          shift and go to state 362


state 327

    (147) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA . ENTERO PARRIGHT
    (151) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA . ENTERO COMA ENTERO PARRIGHT

    ENTERO          shift and go to state 363


state 328

    (138) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA . ENTERO PARRIGHT
    (142) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA . ENTERO COMA ENTERO PARRIGHT

    ENTERO          shift and go to state 364


state 329

    (148) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA . ENTERO PARRIGHT
    (152) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA . ENTERO COMA ENTERO PARRIGHT

    ENTERO          shift and go to state 365


state 330

    (140) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT . COMA ENTERO PARRIGHT
    (144) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT . COMA ENTERO COMA ENTERO PARRIGHT

    COMA            shift and go to state 366


state 331

    (150) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING . COMA ENTERO PARRIGHT
    (154) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING . COMA ENTERO COMA ENTERO PARRIGHT

    COMA            shift and go to state 367


state 332

    (139) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT . COMA ENTERO PARRIGHT
    (143) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT . COMA ENTERO COMA ENTERO PARRIGHT

    COMA            shift and go to state 368


state 333

    (149) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING . COMA ENTERO PARRIGHT
    (153) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING . COMA ENTERO COMA ENTERO PARRIGHT

    COMA            shift and go to state 369


state 334

    (41) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .
    (42) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT . else
    (47) else -> . ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (48) else -> . ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (49) else -> . ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (50) else -> . ELSE sentenciaIf

    $end            reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    RETURN          reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    PACKAGE         reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    VAR             reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    VARIABLE        reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    IF              reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    FOR             reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    IMPRIMIR        reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    MAP             reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    PRODUCTO        reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    SCAN            reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    SWITCH          reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    ENTERO          reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    FLOTANTE        reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    BOOL            reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    FUNC            reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    PARLEFT         reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    BREAK           reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    CONTINUE        reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    CASE            reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    DEFAULT         reduce using rule 41 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    ELSE            shift and go to state 300

    else                           shift and go to state 370

state 335

    (47) else -> ELSE LLAVELEFT . instrucciones masInstrucciones LLAVERIGHT
    (48) else -> ELSE LLAVELEFT . instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (49) else -> ELSE LLAVELEFT . RETURN VARIABLE LLAVERIGHT
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (204) condiciones -> . factor MAYORQUE factor
    (205) condiciones -> . factor MENORQUE factor
    (206) condiciones -> . factor DIFERENTE factor
    (207) condiciones -> . factor ESIGUAL factor
    (208) condiciones -> . factor MENORIGUAL factor
    (209) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (183) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (169) funcion -> . funcion_sin_parametro
    (170) funcion -> . funcion_parametro
    (171) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT
    (136) slices -> . declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT
    (137) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (138) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (139) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (140) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (141) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (142) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (143) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (144) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (145) slices -> . declaracion_slices_enteros
    (146) slices -> . declaracion_slices_strings
    (147) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (148) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (149) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (150) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (151) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (152) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (153) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (154) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (172) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (173) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (174) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (176) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (156) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (157) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT
    (158) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT CORCHRIGHT INT
    (159) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT
    (160) declaracion_slices_enteros -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (161) declaracion_slices_enteros -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT
    (162) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING
    (163) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (164) declaracion_slices_strings -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (165) declaracion_slices_strings -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    RETURN          shift and go to state 372
    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    BOOL            shift and go to state 17
    FUNC            shift and go to state 40
    PARLEFT         shift and go to state 27

    instrucciones                  shift and go to state 371
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices_enteros     shift and go to state 36
    declaracion_slices_strings     shift and go to state 37
    numericos                      shift and go to state 39

state 336

    (50) else -> ELSE sentenciaIf .

    $end            reduce using rule 50 (else -> ELSE sentenciaIf .)
    RETURN          reduce using rule 50 (else -> ELSE sentenciaIf .)
    LLAVERIGHT      reduce using rule 50 (else -> ELSE sentenciaIf .)
    PACKAGE         reduce using rule 50 (else -> ELSE sentenciaIf .)
    VAR             reduce using rule 50 (else -> ELSE sentenciaIf .)
    VARIABLE        reduce using rule 50 (else -> ELSE sentenciaIf .)
    IF              reduce using rule 50 (else -> ELSE sentenciaIf .)
    FOR             reduce using rule 50 (else -> ELSE sentenciaIf .)
    IMPRIMIR        reduce using rule 50 (else -> ELSE sentenciaIf .)
    MAP             reduce using rule 50 (else -> ELSE sentenciaIf .)
    PRODUCTO        reduce using rule 50 (else -> ELSE sentenciaIf .)
    SCAN            reduce using rule 50 (else -> ELSE sentenciaIf .)
    SWITCH          reduce using rule 50 (else -> ELSE sentenciaIf .)
    ENTERO          reduce using rule 50 (else -> ELSE sentenciaIf .)
    FLOTANTE        reduce using rule 50 (else -> ELSE sentenciaIf .)
    BOOL            reduce using rule 50 (else -> ELSE sentenciaIf .)
    FUNC            reduce using rule 50 (else -> ELSE sentenciaIf .)
    PARLEFT         reduce using rule 50 (else -> ELSE sentenciaIf .)
    BREAK           reduce using rule 50 (else -> ELSE sentenciaIf .)
    CONTINUE        reduce using rule 50 (else -> ELSE sentenciaIf .)
    CASE            reduce using rule 50 (else -> ELSE sentenciaIf .)
    DEFAULT         reduce using rule 50 (else -> ELSE sentenciaIf .)


state 337

    (85) sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones . masInstrucciones LLAVERIGHT
    (14) masInstrucciones -> . masInstrucciones instrucciones
    (15) masInstrucciones -> . masInstrucciones
    (16) masInstrucciones -> .

    LLAVERIGHT      reduce using rule 16 (masInstrucciones -> .)
    PACKAGE         reduce using rule 16 (masInstrucciones -> .)
    VAR             reduce using rule 16 (masInstrucciones -> .)
    VARIABLE        reduce using rule 16 (masInstrucciones -> .)
    IF              reduce using rule 16 (masInstrucciones -> .)
    FOR             reduce using rule 16 (masInstrucciones -> .)
    IMPRIMIR        reduce using rule 16 (masInstrucciones -> .)
    MAP             reduce using rule 16 (masInstrucciones -> .)
    PRODUCTO        reduce using rule 16 (masInstrucciones -> .)
    SCAN            reduce using rule 16 (masInstrucciones -> .)
    SWITCH          reduce using rule 16 (masInstrucciones -> .)
    ENTERO          reduce using rule 16 (masInstrucciones -> .)
    FLOTANTE        reduce using rule 16 (masInstrucciones -> .)
    BOOL            reduce using rule 16 (masInstrucciones -> .)
    FUNC            reduce using rule 16 (masInstrucciones -> .)
    PARLEFT         reduce using rule 16 (masInstrucciones -> .)

    masInstrucciones               shift and go to state 373

state 338

    (54) contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .

    $end            reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    RETURN          reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    PACKAGE         reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    VAR             reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    VARIABLE        reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    IF              reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    FOR             reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    IMPRIMIR        reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    MAP             reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    PRODUCTO        reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    SCAN            reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    SWITCH          reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    ENTERO          reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    FLOTANTE        reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    BOOL            reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    FUNC            reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    PARLEFT         reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    BREAK           reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    CONTINUE        reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    CASE            reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)
    DEFAULT         reduce using rule 54 (contMapa -> STRING LLAVELEFT parCadena LLAVERIGHT .)


state 339

    (63) parCadena -> CADENA DOSPUNTOS . datoCadena masCadena
    (64) parCadena -> CADENA DOSPUNTOS . datoCadena
    (67) datoCadena -> . VARIABLE
    (68) datoCadena -> . CADENA

    VARIABLE        shift and go to state 376
    CADENA          shift and go to state 374

    datoCadena                     shift and go to state 375

state 340

    (56) contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .

    $end            reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    RETURN          reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    PACKAGE         reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    VAR             reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    VARIABLE        reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    IF              reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    FOR             reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    IMPRIMIR        reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    MAP             reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    PRODUCTO        reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    SCAN            reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    SWITCH          reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    ENTERO          reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    FLOTANTE        reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    BOOL            reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    FUNC            reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    PARLEFT         reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    BREAK           reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    CONTINUE        reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    CASE            reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)
    DEFAULT         reduce using rule 56 (contMapa -> BOOL LLAVELEFT parBoolean LLAVERIGHT .)


state 341

    (75) parBoolean -> CADENA DOSPUNTOS . datoBoolean masBoolean
    (76) parBoolean -> CADENA DOSPUNTOS . datoBoolean
    (79) datoBoolean -> . condicion
    (80) datoBoolean -> . TRUE
    (81) datoBoolean -> . FALSE
    (213) condicion -> . AND
    (214) condicion -> . OR

    TRUE            shift and go to state 379
    FALSE           shift and go to state 380
    AND             shift and go to state 104
    OR              shift and go to state 105

    datoBoolean                    shift and go to state 377
    condicion                      shift and go to state 378

state 342

    (53) contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .

    $end            reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    RETURN          reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    PACKAGE         reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    VAR             reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    VARIABLE        reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    IF              reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    FOR             reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    IMPRIMIR        reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    MAP             reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    PRODUCTO        reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    SCAN            reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    SWITCH          reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    ENTERO          reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    FLOTANTE        reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    BOOL            reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    FUNC            reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    PARLEFT         reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    BREAK           reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    CONTINUE        reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    CASE            reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)
    DEFAULT         reduce using rule 53 (contMapa -> INT LLAVELEFT parEntero LLAVERIGHT .)


state 343

    (57) parEntero -> CADENA DOSPUNTOS . datoEntero masEntero
    (58) parEntero -> CADENA DOSPUNTOS . datoEntero
    (61) datoEntero -> . VARIABLE
    (62) datoEntero -> . expresion
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 382
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    PARLEFT         shift and go to state 27

    datoEntero                     shift and go to state 381
    expresion                      shift and go to state 383
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 74

state 344

    (55) contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .

    $end            reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    RETURN          reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    PACKAGE         reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    VAR             reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    VARIABLE        reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    IF              reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    FOR             reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    IMPRIMIR        reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    MAP             reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    PRODUCTO        reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    SCAN            reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    SWITCH          reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    ENTERO          reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    FLOTANTE        reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    BOOL            reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    FUNC            reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    PARLEFT         reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    BREAK           reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    CONTINUE        reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    CASE            reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)
    DEFAULT         reduce using rule 55 (contMapa -> FLOAT LLAVELEFT parFlotante LLAVERIGHT .)


state 345

    (69) parFlotante -> CADENA DOSPUNTOS . datoFlotante masFlotante
    (70) parFlotante -> CADENA DOSPUNTOS . datoFlotante
    (73) datoFlotante -> . VARIABLE
    (74) datoFlotante -> . expresion
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 385
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    PARLEFT         shift and go to state 27

    datoFlotante                   shift and go to state 384
    expresion                      shift and go to state 386
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 74

state 346

    (184) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones . BREAK
    (185) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones .
    (188) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones . CONTINUE
    (190) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones . BREAK bloque_switch
    (191) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones . bloque_switch
    (14) masInstrucciones -> masInstrucciones . instrucciones
    (15) masInstrucciones -> masInstrucciones .
    (184) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK
    (185) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones
    (186) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones BREAK
    (187) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones
    (188) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones CONTINUE
    (189) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones CONTINUE
    (190) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK bloque_switch
    (191) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones bloque_switch
    (192) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones bloque_switch
    (193) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones switch_default
    (194) bloque_switch -> . switch_default
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (198) switch_default -> . DEFAULT DOSPUNTOS instrucciones masInstrucciones BREAK
    (199) switch_default -> . DEFAULT DOSPUNTOS instrucciones masInstrucciones
    (200) switch_default -> . DEFAULT DOSPUNTOS instrucciones BREAK
    (201) switch_default -> . DEFAULT DOSPUNTOS instrucciones masInstrucciones CONTINUE
    (202) switch_default -> . DEFAULT DOSPUNTOS instrucciones CONTINUE
    (203) switch_default -> . DEFAULT DOSPUNTOS instrucciones
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (204) condiciones -> . factor MAYORQUE factor
    (205) condiciones -> . factor MENORQUE factor
    (206) condiciones -> . factor DIFERENTE factor
    (207) condiciones -> . factor ESIGUAL factor
    (208) condiciones -> . factor MENORIGUAL factor
    (209) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (183) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (169) funcion -> . funcion_sin_parametro
    (170) funcion -> . funcion_parametro
    (171) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT
    (136) slices -> . declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT
    (137) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (138) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (139) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (140) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (141) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (142) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (143) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (144) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (145) slices -> . declaracion_slices_enteros
    (146) slices -> . declaracion_slices_strings
    (147) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (148) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (149) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (150) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (151) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (152) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (153) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (154) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (172) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (173) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (174) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (176) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (156) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (157) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT
    (158) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT CORCHRIGHT INT
    (159) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT
    (160) declaracion_slices_enteros -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (161) declaracion_slices_enteros -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT
    (162) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING
    (163) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (164) declaracion_slices_strings -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (165) declaracion_slices_strings -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! reduce/reduce conflict for LLAVERIGHT resolved using rule 15 (masInstrucciones -> masInstrucciones .)
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for PACKAGE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for PRODUCTO resolved as shift
  ! shift/reduce conflict for SCAN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for PARLEFT resolved as shift
    BREAK           shift and go to state 387
    CONTINUE        shift and go to state 388
    LLAVERIGHT      reduce using rule 15 (masInstrucciones -> masInstrucciones .)
    CASE            shift and go to state 193
    PACKAGE         shift and go to state 14
    DEFAULT         shift and go to state 195
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    BOOL            shift and go to state 17
    FUNC            shift and go to state 40
    PARLEFT         shift and go to state 27

  ! LLAVERIGHT      [ reduce using rule 185 (bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones .) ]
  ! BREAK           [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! CONTINUE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! CASE            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PACKAGE         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! DEFAULT         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VAR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VARIABLE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IF              [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FOR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IMPRIMIR        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! MAP             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PRODUCTO        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SCAN            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SWITCH          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! ENTERO          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FLOTANTE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! BOOL            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FUNC            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PARLEFT         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]

    instrucciones                  shift and go to state 267
    bloque_switch                  shift and go to state 389
    switch_default                 shift and go to state 194
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices_enteros     shift and go to state 36
    declaracion_slices_strings     shift and go to state 37
    numericos                      shift and go to state 39

state 347

    (186) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones BREAK .

    LLAVERIGHT      reduce using rule 186 (bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones BREAK .)


state 348

    (189) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones CONTINUE .

    LLAVERIGHT      reduce using rule 189 (bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones CONTINUE .)


state 349

    (192) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones bloque_switch .

    LLAVERIGHT      reduce using rule 192 (bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones bloque_switch .)


state 350

    (193) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones switch_default .
    (194) bloque_switch -> switch_default .

  ! reduce/reduce conflict for LLAVERIGHT resolved using rule 193 (bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones switch_default .)
    LLAVERIGHT      reduce using rule 193 (bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones switch_default .)

  ! LLAVERIGHT      [ reduce using rule 194 (bloque_switch -> switch_default .) ]


state 351

    (198) switch_default -> DEFAULT DOSPUNTOS instrucciones masInstrucciones BREAK .

    LLAVERIGHT      reduce using rule 198 (switch_default -> DEFAULT DOSPUNTOS instrucciones masInstrucciones BREAK .)


state 352

    (201) switch_default -> DEFAULT DOSPUNTOS instrucciones masInstrucciones CONTINUE .

    LLAVERIGHT      reduce using rule 201 (switch_default -> DEFAULT DOSPUNTOS instrucciones masInstrucciones CONTINUE .)


state 353

    (172) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .

    $end            reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    RETURN          reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PACKAGE         reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    VAR             reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    VARIABLE        reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    IF              reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FOR             reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    IMPRIMIR        reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    MAP             reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PRODUCTO        reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    SCAN            reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    SWITCH          reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    ENTERO          reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FLOTANTE        reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    BOOL            reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FUNC            reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PARLEFT         reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    BREAK           reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    CONTINUE        reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    CASE            reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    DEFAULT         reduce using rule 172 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)


state 354

    (174) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN . LLAVERIGHT
    (175) funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN . VARIABLE LLAVERIGHT

    LLAVERIGHT      shift and go to state 391
    VARIABLE        shift and go to state 390


state 355

    (176) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones . LLAVERIGHT
    (177) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones . RETURN LLAVERIGHT
    (14) masInstrucciones -> masInstrucciones . instrucciones
    (15) masInstrucciones -> masInstrucciones .
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (204) condiciones -> . factor MAYORQUE factor
    (205) condiciones -> . factor MENORQUE factor
    (206) condiciones -> . factor DIFERENTE factor
    (207) condiciones -> . factor ESIGUAL factor
    (208) condiciones -> . factor MENORIGUAL factor
    (209) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (183) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (169) funcion -> . funcion_sin_parametro
    (170) funcion -> . funcion_parametro
    (171) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT
    (136) slices -> . declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT
    (137) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (138) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (139) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (140) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (141) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (142) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (143) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (144) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (145) slices -> . declaracion_slices_enteros
    (146) slices -> . declaracion_slices_strings
    (147) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (148) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (149) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (150) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (151) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (152) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (153) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (154) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (172) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (173) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (174) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (176) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (156) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (157) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT
    (158) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT CORCHRIGHT INT
    (159) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT
    (160) declaracion_slices_enteros -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (161) declaracion_slices_enteros -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT
    (162) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING
    (163) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (164) declaracion_slices_strings -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (165) declaracion_slices_strings -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

  ! shift/reduce conflict for LLAVERIGHT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PACKAGE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for PRODUCTO resolved as shift
  ! shift/reduce conflict for SCAN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for PARLEFT resolved as shift
    LLAVERIGHT      shift and go to state 392
    RETURN          shift and go to state 393
    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    BOOL            shift and go to state 17
    FUNC            shift and go to state 40
    PARLEFT         shift and go to state 27

  ! LLAVERIGHT      [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! RETURN          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PACKAGE         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VAR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VARIABLE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IF              [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FOR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IMPRIMIR        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! MAP             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PRODUCTO        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SCAN            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SWITCH          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! ENTERO          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FLOTANTE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! BOOL            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FUNC            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PARLEFT         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]

    instrucciones                  shift and go to state 267
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices_enteros     shift and go to state 36
    declaracion_slices_strings     shift and go to state 37
    numericos                      shift and go to state 39

state 356

    (178) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .

    $end            reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    RETURN          reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    PACKAGE         reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    VAR             reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    VARIABLE        reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    IF              reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    FOR             reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    IMPRIMIR        reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    MAP             reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    PRODUCTO        reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    SCAN            reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    SWITCH          reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    ENTERO          reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    FLOTANTE        reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    BOOL            reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    FUNC            reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    PARLEFT         reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    BREAK           reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    CONTINUE        reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    CASE            reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)
    DEFAULT         reduce using rule 178 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT .)


state 357

    (93) contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .

    $end            reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    RETURN          reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    PACKAGE         reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    VAR             reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    VARIABLE        reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    IF              reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    FOR             reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    IMPRIMIR        reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    MAP             reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    PRODUCTO        reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    SCAN            reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    SWITCH          reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    ENTERO          reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    FLOTANTE        reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    BOOL            reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    FUNC            reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    PARLEFT         reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    BREAK           reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    CONTINUE        reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    CASE            reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)
    DEFAULT         reduce using rule 93 (contArray -> INT LLAVELEFT contArrayEnteros LLAVERIGHT .)


state 358

    (94) contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .

    $end            reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    RETURN          reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    PACKAGE         reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    VAR             reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    VARIABLE        reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    IF              reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    FOR             reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    IMPRIMIR        reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    MAP             reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    PRODUCTO        reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    SCAN            reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    SWITCH          reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    ENTERO          reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    FLOTANTE        reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    BOOL            reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    FUNC            reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    PARLEFT         reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    BREAK           reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    CONTINUE        reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    CASE            reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)
    DEFAULT         reduce using rule 94 (contArray -> STRING LLAVELEFT contArrayCadenas LLAVERIGHT .)


state 359

    (95) contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .

    $end            reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    RETURN          reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    PACKAGE         reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    VAR             reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    VARIABLE        reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    IF              reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    FOR             reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    IMPRIMIR        reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    MAP             reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    PRODUCTO        reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    SCAN            reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    SWITCH          reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    ENTERO          reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    FLOTANTE        reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    BOOL            reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    FUNC            reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    PARLEFT         reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    BREAK           reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    CONTINUE        reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    CASE            reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)
    DEFAULT         reduce using rule 95 (contArray -> FLOAT LLAVELEFT contArrayFloat LLAVERIGHT .)


state 360

    (101) contArrayFloat -> contArrayFloat COMA . FLOTANTE

    FLOTANTE        shift and go to state 394


state 361

    (100) contArrayFloat -> FLOTANTE COMA . FLOTANTE

    FLOTANTE        shift and go to state 395


state 362

    (137) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO . PARRIGHT
    (141) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO . COMA ENTERO PARRIGHT

    PARRIGHT        shift and go to state 397
    COMA            shift and go to state 396


state 363

    (147) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO . PARRIGHT
    (151) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO . COMA ENTERO PARRIGHT

    PARRIGHT        shift and go to state 399
    COMA            shift and go to state 398


state 364

    (138) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO . PARRIGHT
    (142) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO . COMA ENTERO PARRIGHT

    PARRIGHT        shift and go to state 401
    COMA            shift and go to state 400


state 365

    (148) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO . PARRIGHT
    (152) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO . COMA ENTERO PARRIGHT

    PARRIGHT        shift and go to state 403
    COMA            shift and go to state 402


state 366

    (140) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA . ENTERO PARRIGHT
    (144) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA . ENTERO COMA ENTERO PARRIGHT

    ENTERO          shift and go to state 404


state 367

    (150) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA . ENTERO PARRIGHT
    (154) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA . ENTERO COMA ENTERO PARRIGHT

    ENTERO          shift and go to state 405


state 368

    (139) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA . ENTERO PARRIGHT
    (143) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA . ENTERO COMA ENTERO PARRIGHT

    ENTERO          shift and go to state 406


state 369

    (149) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA . ENTERO PARRIGHT
    (153) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA . ENTERO COMA ENTERO PARRIGHT

    ENTERO          shift and go to state 407


state 370

    (42) sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .

    $end            reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    RETURN          reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    LLAVERIGHT      reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    PACKAGE         reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    VAR             reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    VARIABLE        reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    IF              reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    FOR             reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    IMPRIMIR        reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    MAP             reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    PRODUCTO        reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    SCAN            reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    SWITCH          reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    ENTERO          reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    FLOTANTE        reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    BOOL            reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    FUNC            reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    PARLEFT         reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    BREAK           reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    CONTINUE        reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    CASE            reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)
    DEFAULT         reduce using rule 42 (sentenciaIf -> IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else .)


state 371

    (47) else -> ELSE LLAVELEFT instrucciones . masInstrucciones LLAVERIGHT
    (48) else -> ELSE LLAVELEFT instrucciones . masInstrucciones RETURN VARIABLE LLAVERIGHT
    (14) masInstrucciones -> . masInstrucciones instrucciones
    (15) masInstrucciones -> . masInstrucciones
    (16) masInstrucciones -> .

    LLAVERIGHT      reduce using rule 16 (masInstrucciones -> .)
    RETURN          reduce using rule 16 (masInstrucciones -> .)
    PACKAGE         reduce using rule 16 (masInstrucciones -> .)
    VAR             reduce using rule 16 (masInstrucciones -> .)
    VARIABLE        reduce using rule 16 (masInstrucciones -> .)
    IF              reduce using rule 16 (masInstrucciones -> .)
    FOR             reduce using rule 16 (masInstrucciones -> .)
    IMPRIMIR        reduce using rule 16 (masInstrucciones -> .)
    MAP             reduce using rule 16 (masInstrucciones -> .)
    PRODUCTO        reduce using rule 16 (masInstrucciones -> .)
    SCAN            reduce using rule 16 (masInstrucciones -> .)
    SWITCH          reduce using rule 16 (masInstrucciones -> .)
    ENTERO          reduce using rule 16 (masInstrucciones -> .)
    FLOTANTE        reduce using rule 16 (masInstrucciones -> .)
    BOOL            reduce using rule 16 (masInstrucciones -> .)
    FUNC            reduce using rule 16 (masInstrucciones -> .)
    PARLEFT         reduce using rule 16 (masInstrucciones -> .)

    masInstrucciones               shift and go to state 408

state 372

    (49) else -> ELSE LLAVELEFT RETURN . VARIABLE LLAVERIGHT

    VARIABLE        shift and go to state 409


state 373

    (85) sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones . LLAVERIGHT
    (14) masInstrucciones -> masInstrucciones . instrucciones
    (15) masInstrucciones -> masInstrucciones .
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (204) condiciones -> . factor MAYORQUE factor
    (205) condiciones -> . factor MENORQUE factor
    (206) condiciones -> . factor DIFERENTE factor
    (207) condiciones -> . factor ESIGUAL factor
    (208) condiciones -> . factor MENORIGUAL factor
    (209) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (183) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (169) funcion -> . funcion_sin_parametro
    (170) funcion -> . funcion_parametro
    (171) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT
    (136) slices -> . declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT
    (137) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (138) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (139) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (140) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (141) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (142) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (143) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (144) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (145) slices -> . declaracion_slices_enteros
    (146) slices -> . declaracion_slices_strings
    (147) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (148) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (149) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (150) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (151) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (152) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (153) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (154) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (172) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (173) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (174) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (176) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (156) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (157) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT
    (158) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT CORCHRIGHT INT
    (159) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT
    (160) declaracion_slices_enteros -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (161) declaracion_slices_enteros -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT
    (162) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING
    (163) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (164) declaracion_slices_strings -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (165) declaracion_slices_strings -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

  ! shift/reduce conflict for LLAVERIGHT resolved as shift
  ! shift/reduce conflict for PACKAGE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for PRODUCTO resolved as shift
  ! shift/reduce conflict for SCAN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for PARLEFT resolved as shift
    LLAVERIGHT      shift and go to state 410
    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    BOOL            shift and go to state 17
    FUNC            shift and go to state 40
    PARLEFT         shift and go to state 27

  ! LLAVERIGHT      [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PACKAGE         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VAR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VARIABLE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IF              [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FOR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IMPRIMIR        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! MAP             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PRODUCTO        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SCAN            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SWITCH          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! ENTERO          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FLOTANTE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! BOOL            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FUNC            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PARLEFT         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]

    condiciones                    shift and go to state 4
    instrucciones                  shift and go to state 267
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices_enteros     shift and go to state 36
    declaracion_slices_strings     shift and go to state 37
    numericos                      shift and go to state 39

state 374

    (68) datoCadena -> CADENA .

    COMA            reduce using rule 68 (datoCadena -> CADENA .)
    LLAVERIGHT      reduce using rule 68 (datoCadena -> CADENA .)


state 375

    (63) parCadena -> CADENA DOSPUNTOS datoCadena . masCadena
    (64) parCadena -> CADENA DOSPUNTOS datoCadena .
    (65) masCadena -> . masCadena COMA CADENA DOSPUNTOS datoCadena
    (66) masCadena -> . COMA CADENA DOSPUNTOS datoCadena

    LLAVERIGHT      reduce using rule 64 (parCadena -> CADENA DOSPUNTOS datoCadena .)
    COMA            shift and go to state 412

    masCadena                      shift and go to state 411

state 376

    (67) datoCadena -> VARIABLE .

    COMA            reduce using rule 67 (datoCadena -> VARIABLE .)
    LLAVERIGHT      reduce using rule 67 (datoCadena -> VARIABLE .)


state 377

    (75) parBoolean -> CADENA DOSPUNTOS datoBoolean . masBoolean
    (76) parBoolean -> CADENA DOSPUNTOS datoBoolean .
    (77) masBoolean -> . masBoolean COMA CADENA DOSPUNTOS datoBoolean
    (78) masBoolean -> . COMA CADENA DOSPUNTOS datoBoolean

    LLAVERIGHT      reduce using rule 76 (parBoolean -> CADENA DOSPUNTOS datoBoolean .)
    COMA            shift and go to state 414

    masBoolean                     shift and go to state 413

state 378

    (79) datoBoolean -> condicion .

    COMA            reduce using rule 79 (datoBoolean -> condicion .)
    LLAVERIGHT      reduce using rule 79 (datoBoolean -> condicion .)


state 379

    (80) datoBoolean -> TRUE .

    COMA            reduce using rule 80 (datoBoolean -> TRUE .)
    LLAVERIGHT      reduce using rule 80 (datoBoolean -> TRUE .)


state 380

    (81) datoBoolean -> FALSE .

    COMA            reduce using rule 81 (datoBoolean -> FALSE .)
    LLAVERIGHT      reduce using rule 81 (datoBoolean -> FALSE .)


state 381

    (57) parEntero -> CADENA DOSPUNTOS datoEntero . masEntero
    (58) parEntero -> CADENA DOSPUNTOS datoEntero .
    (59) masEntero -> . masEntero COMA CADENA DOSPUNTOS datoEntero
    (60) masEntero -> . COMA CADENA DOSPUNTOS datoEntero

    LLAVERIGHT      reduce using rule 58 (parEntero -> CADENA DOSPUNTOS datoEntero .)
    COMA            shift and go to state 416

    masEntero                      shift and go to state 415

state 382

    (61) datoEntero -> VARIABLE .

    COMA            reduce using rule 61 (datoEntero -> VARIABLE .)
    LLAVERIGHT      reduce using rule 61 (datoEntero -> VARIABLE .)


state 383

    (62) datoEntero -> expresion .

    COMA            reduce using rule 62 (datoEntero -> expresion .)
    LLAVERIGHT      reduce using rule 62 (datoEntero -> expresion .)


state 384

    (69) parFlotante -> CADENA DOSPUNTOS datoFlotante . masFlotante
    (70) parFlotante -> CADENA DOSPUNTOS datoFlotante .
    (71) masFlotante -> . masFlotante COMA CADENA DOSPUNTOS datoFlotante
    (72) masFlotante -> . COMA CADENA DOSPUNTOS datoFlotante

    LLAVERIGHT      reduce using rule 70 (parFlotante -> CADENA DOSPUNTOS datoFlotante .)
    COMA            shift and go to state 418

    masFlotante                    shift and go to state 417

state 385

    (73) datoFlotante -> VARIABLE .

    COMA            reduce using rule 73 (datoFlotante -> VARIABLE .)
    LLAVERIGHT      reduce using rule 73 (datoFlotante -> VARIABLE .)


state 386

    (74) datoFlotante -> expresion .

    COMA            reduce using rule 74 (datoFlotante -> expresion .)
    LLAVERIGHT      reduce using rule 74 (datoFlotante -> expresion .)


state 387

    (184) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK .
    (190) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK . bloque_switch
    (184) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK
    (185) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones
    (186) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones BREAK
    (187) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones
    (188) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones CONTINUE
    (189) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones CONTINUE
    (190) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK bloque_switch
    (191) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones masInstrucciones bloque_switch
    (192) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones bloque_switch
    (193) bloque_switch -> . CASE caso_switch DOSPUNTOS instrucciones switch_default
    (194) bloque_switch -> . switch_default
    (198) switch_default -> . DEFAULT DOSPUNTOS instrucciones masInstrucciones BREAK
    (199) switch_default -> . DEFAULT DOSPUNTOS instrucciones masInstrucciones
    (200) switch_default -> . DEFAULT DOSPUNTOS instrucciones BREAK
    (201) switch_default -> . DEFAULT DOSPUNTOS instrucciones masInstrucciones CONTINUE
    (202) switch_default -> . DEFAULT DOSPUNTOS instrucciones CONTINUE
    (203) switch_default -> . DEFAULT DOSPUNTOS instrucciones

    LLAVERIGHT      reduce using rule 184 (bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK .)
    CASE            shift and go to state 193
    DEFAULT         shift and go to state 195

    bloque_switch                  shift and go to state 419
    switch_default                 shift and go to state 194

state 388

    (188) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones CONTINUE .

    LLAVERIGHT      reduce using rule 188 (bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones CONTINUE .)


state 389

    (191) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones bloque_switch .

    LLAVERIGHT      reduce using rule 191 (bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones bloque_switch .)


state 390

    (175) funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE . LLAVERIGHT

    LLAVERIGHT      shift and go to state 420


state 391

    (174) funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .

    $end            reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    RETURN          reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    PACKAGE         reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    VAR             reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    VARIABLE        reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    IF              reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    FOR             reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    IMPRIMIR        reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    MAP             reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    PRODUCTO        reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    SCAN            reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    SWITCH          reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    ENTERO          reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    FLOTANTE        reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    BOOL            reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    FUNC            reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    PARLEFT         reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    BREAK           reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    CONTINUE        reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    CASE            reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    DEFAULT         reduce using rule 174 (funcion_sin_parametro -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)


state 392

    (176) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .

    $end            reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    RETURN          reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PACKAGE         reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    VAR             reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    VARIABLE        reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    IF              reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FOR             reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    IMPRIMIR        reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    MAP             reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PRODUCTO        reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    SCAN            reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    SWITCH          reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    ENTERO          reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FLOTANTE        reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    BOOL            reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FUNC            reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PARLEFT         reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    BREAK           reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    CONTINUE        reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    CASE            reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    DEFAULT         reduce using rule 176 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)


state 393

    (177) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN . LLAVERIGHT

    LLAVERIGHT      shift and go to state 421


state 394

    (101) contArrayFloat -> contArrayFloat COMA FLOTANTE .

    LLAVERIGHT      reduce using rule 101 (contArrayFloat -> contArrayFloat COMA FLOTANTE .)
    COMA            reduce using rule 101 (contArrayFloat -> contArrayFloat COMA FLOTANTE .)


state 395

    (100) contArrayFloat -> FLOTANTE COMA FLOTANTE .

    LLAVERIGHT      reduce using rule 100 (contArrayFloat -> FLOTANTE COMA FLOTANTE .)
    COMA            reduce using rule 100 (contArrayFloat -> FLOTANTE COMA FLOTANTE .)


state 396

    (141) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA . ENTERO PARRIGHT

    ENTERO          shift and go to state 422


state 397

    (137) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .

    $end            reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    RETURN          reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    LLAVERIGHT      reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    PACKAGE         reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    VAR             reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    VARIABLE        reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    IF              reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    FOR             reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    IMPRIMIR        reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    MAP             reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    PRODUCTO        reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    SCAN            reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    SWITCH          reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    ENTERO          reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    FLOTANTE        reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    BOOL            reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    FUNC            reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    PARLEFT         reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    BREAK           reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    CONTINUE        reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    CASE            reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    DEFAULT         reduce using rule 137 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)


state 398

    (151) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA . ENTERO PARRIGHT

    ENTERO          shift and go to state 423


state 399

    (147) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .

    $end            reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    RETURN          reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    LLAVERIGHT      reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    PACKAGE         reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    VAR             reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    VARIABLE        reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    IF              reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    FOR             reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    IMPRIMIR        reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    MAP             reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    PRODUCTO        reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    SCAN            reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    SWITCH          reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    ENTERO          reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    FLOTANTE        reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    BOOL            reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    FUNC            reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    PARLEFT         reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    BREAK           reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    CONTINUE        reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    CASE            reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    DEFAULT         reduce using rule 147 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)


state 400

    (142) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA . ENTERO PARRIGHT

    ENTERO          shift and go to state 424


state 401

    (138) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .

    $end            reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    RETURN          reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    LLAVERIGHT      reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    PACKAGE         reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    VAR             reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    VARIABLE        reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    IF              reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    FOR             reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    IMPRIMIR        reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    MAP             reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    PRODUCTO        reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    SCAN            reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    SWITCH          reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    ENTERO          reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    FLOTANTE        reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    BOOL            reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    FUNC            reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    PARLEFT         reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    BREAK           reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    CONTINUE        reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    CASE            reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    DEFAULT         reduce using rule 138 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)


state 402

    (152) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA . ENTERO PARRIGHT

    ENTERO          shift and go to state 425


state 403

    (148) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .

    $end            reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    RETURN          reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    LLAVERIGHT      reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    PACKAGE         reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    VAR             reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    VARIABLE        reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    IF              reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    FOR             reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    IMPRIMIR        reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    MAP             reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    PRODUCTO        reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    SCAN            reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    SWITCH          reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    ENTERO          reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    FLOTANTE        reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    BOOL            reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    FUNC            reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    PARLEFT         reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    BREAK           reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    CONTINUE        reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    CASE            reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    DEFAULT         reduce using rule 148 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)


state 404

    (140) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO . PARRIGHT
    (144) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO . COMA ENTERO PARRIGHT

    PARRIGHT        shift and go to state 427
    COMA            shift and go to state 426


state 405

    (150) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO . PARRIGHT
    (154) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO . COMA ENTERO PARRIGHT

    PARRIGHT        shift and go to state 429
    COMA            shift and go to state 428


state 406

    (139) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO . PARRIGHT
    (143) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO . COMA ENTERO PARRIGHT

    PARRIGHT        shift and go to state 431
    COMA            shift and go to state 430


state 407

    (149) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO . PARRIGHT
    (153) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO . COMA ENTERO PARRIGHT

    PARRIGHT        shift and go to state 433
    COMA            shift and go to state 432


state 408

    (47) else -> ELSE LLAVELEFT instrucciones masInstrucciones . LLAVERIGHT
    (48) else -> ELSE LLAVELEFT instrucciones masInstrucciones . RETURN VARIABLE LLAVERIGHT
    (14) masInstrucciones -> masInstrucciones . instrucciones
    (15) masInstrucciones -> masInstrucciones .
    (1) instrucciones -> . asignacion
    (2) instrucciones -> . expresion
    (3) instrucciones -> . condiciones
    (4) instrucciones -> . sentenciaIf
    (5) instrucciones -> . sentenciaFor
    (6) instrucciones -> . print
    (7) instrucciones -> . mapa
    (8) instrucciones -> . puntero
    (9) instrucciones -> . lectura
    (10) instrucciones -> . array
    (11) instrucciones -> . switch
    (12) instrucciones -> . funcion
    (13) instrucciones -> . PACKAGE VARIABLE IMPORT CADENA funcion
    (17) asignacion -> . VAR VARIABLE BOOL IGUAL booleano
    (18) asignacion -> . VAR VARIABLE INT IGUAL expresionInt
    (19) asignacion -> . VAR VARIABLE FLOAT IGUAL expresionFloat
    (20) asignacion -> . VAR VARIABLE STRING IGUAL CADENA
    (21) asignacion -> . VAR VARIABLE puntero IGUAL refer
    (22) asignacion -> . VAR VARIABLE puntero
    (23) asignacion -> . slices
    (24) asignacion -> . VARIABLE DECLARADOR valor
    (25) asignacion -> . VARIABLE IGUAL valor
    (26) asignacion -> . VARIABLE MASIGUAL acumular
    (27) asignacion -> . VARIABLE MENOSIGUAL expresion
    (28) asignacion -> . derefer IGUAL valor
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (204) condiciones -> . factor MAYORQUE factor
    (205) condiciones -> . factor MENORQUE factor
    (206) condiciones -> . factor DIFERENTE factor
    (207) condiciones -> . factor ESIGUAL factor
    (208) condiciones -> . factor MENORIGUAL factor
    (209) condiciones -> . factor MAYORIGUAL factor
    (41) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (42) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT else
    (43) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (44) sentenciaIf -> . IF comparaciones LLAVELEFT instrucciones masInstrucciones LLAVERIGHT else
    (45) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT
    (46) sentenciaIf -> . IF comparaciones LLAVELEFT RETURN VARIABLE LLAVERIGHT else
    (85) sentenciaFor -> . FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (106) print -> . IMPRIMIR PARLEFT contPrint PARRIGHT
    (51) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT typeData LLAVELEFT LLAVERIGHT
    (52) mapa -> . MAP CORCHLEFT STRING CORCHRIGHT contMapa
    (82) puntero -> . PRODUCTO typeData
    (115) lectura -> . SCAN PARLEFT contScan PARRIGHT
    (92) array -> . VARIABLE DECLARADOR CORCHLEFT ENTERO CORCHRIGHT contArray
    (183) switch -> . SWITCH VARIABLE LLAVELEFT bloque_switch LLAVERIGHT
    (169) funcion -> . funcion_sin_parametro
    (170) funcion -> . funcion_parametro
    (171) funcion -> . funcion_sin_parametro_return
    (135) slices -> . declaracion_slices_enteros LLAVELEFT contArrayEnteros LLAVERIGHT
    (136) slices -> . declaracion_slices_strings LLAVELEFT contArrayCadenas LLAVERIGHT
    (137) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (138) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (139) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (140) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT
    (141) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (142) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (143) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (144) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT
    (145) slices -> . declaracion_slices_enteros
    (146) slices -> . declaracion_slices_strings
    (147) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (148) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (149) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (150) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT
    (151) slices -> . VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (152) slices -> . VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (153) slices -> . VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (154) slices -> . VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT
    (84) derefer -> . PRODUCTO VARIABLE
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (130) factor -> . numericos
    (131) factor -> . VARIABLE
    (215) factor -> . BOOL
    (172) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (173) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (174) funcion_sin_parametro -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (176) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones LLAVERIGHT
    (177) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT
    (178) funcion_parametro -> . FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT RETURN LLAVERIGHT
    (175) funcion_sin_parametro_return -> . FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT
    (156) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (157) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT ENTERO CORCHRIGHT INT
    (158) declaracion_slices_enteros -> . VAR VARIABLE CORCHLEFT CORCHRIGHT INT
    (159) declaracion_slices_enteros -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT INT
    (160) declaracion_slices_enteros -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT INT
    (161) declaracion_slices_enteros -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT INT
    (162) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT CORCHRIGHT STRING
    (163) declaracion_slices_strings -> . VAR VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (164) declaracion_slices_strings -> . VARIABLE IGUAL CORCHLEFT ENTERO CORCHRIGHT STRING
    (165) declaracion_slices_strings -> . VARIABLE DECLARADOR CORCHLEFT CORCHRIGHT STRING
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

  ! shift/reduce conflict for LLAVERIGHT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for PACKAGE resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for IMPRIMIR resolved as shift
  ! shift/reduce conflict for MAP resolved as shift
  ! shift/reduce conflict for PRODUCTO resolved as shift
  ! shift/reduce conflict for SCAN resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for ENTERO resolved as shift
  ! shift/reduce conflict for FLOTANTE resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for FUNC resolved as shift
  ! shift/reduce conflict for PARLEFT resolved as shift
    LLAVERIGHT      shift and go to state 434
    RETURN          shift and go to state 435
    PACKAGE         shift and go to state 14
    VAR             shift and go to state 16
    VARIABLE        shift and go to state 15
    IF              shift and go to state 24
    FOR             shift and go to state 25
    IMPRIMIR        shift and go to state 26
    MAP             shift and go to state 28
    PRODUCTO        shift and go to state 29
    SCAN            shift and go to state 30
    SWITCH          shift and go to state 32
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    BOOL            shift and go to state 17
    FUNC            shift and go to state 40
    PARLEFT         shift and go to state 27

  ! LLAVERIGHT      [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! RETURN          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PACKAGE         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VAR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! VARIABLE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IF              [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FOR             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! IMPRIMIR        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! MAP             [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PRODUCTO        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SCAN            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! SWITCH          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! ENTERO          [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FLOTANTE        [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! BOOL            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! FUNC            [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]
  ! PARLEFT         [ reduce using rule 15 (masInstrucciones -> masInstrucciones .) ]

    instrucciones                  shift and go to state 267
    asignacion                     shift and go to state 2
    expresion                      shift and go to state 3
    condiciones                    shift and go to state 4
    sentenciaIf                    shift and go to state 5
    sentenciaFor                   shift and go to state 6
    print                          shift and go to state 7
    mapa                           shift and go to state 8
    puntero                        shift and go to state 9
    lectura                        shift and go to state 10
    array                          shift and go to state 11
    switch                         shift and go to state 12
    funcion                        shift and go to state 13
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    slices                         shift and go to state 20
    derefer                        shift and go to state 21
    term                           shift and go to state 22
    factor                         shift and go to state 23
    funcion_sin_parametro          shift and go to state 33
    funcion_parametro              shift and go to state 34
    funcion_sin_parametro_return   shift and go to state 35
    declaracion_slices_enteros     shift and go to state 36
    declaracion_slices_strings     shift and go to state 37
    numericos                      shift and go to state 39

state 409

    (49) else -> ELSE LLAVELEFT RETURN VARIABLE . LLAVERIGHT

    LLAVERIGHT      shift and go to state 436


state 410

    (85) sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .

    $end            reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    RETURN          reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PACKAGE         reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    VAR             reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    VARIABLE        reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    IF              reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FOR             reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    IMPRIMIR        reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    MAP             reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PRODUCTO        reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    SCAN            reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    SWITCH          reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    ENTERO          reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FLOTANTE        reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    BOOL            reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FUNC            reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PARLEFT         reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    BREAK           reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    CONTINUE        reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    CASE            reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    DEFAULT         reduce using rule 85 (sentenciaFor -> FOR inicio PUNTOCOMA condiciones PUNTOCOMA incrementa LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)


state 411

    (63) parCadena -> CADENA DOSPUNTOS datoCadena masCadena .
    (65) masCadena -> masCadena . COMA CADENA DOSPUNTOS datoCadena

    LLAVERIGHT      reduce using rule 63 (parCadena -> CADENA DOSPUNTOS datoCadena masCadena .)
    COMA            shift and go to state 437


state 412

    (66) masCadena -> COMA . CADENA DOSPUNTOS datoCadena

    CADENA          shift and go to state 438


state 413

    (75) parBoolean -> CADENA DOSPUNTOS datoBoolean masBoolean .
    (77) masBoolean -> masBoolean . COMA CADENA DOSPUNTOS datoBoolean

    LLAVERIGHT      reduce using rule 75 (parBoolean -> CADENA DOSPUNTOS datoBoolean masBoolean .)
    COMA            shift and go to state 439


state 414

    (78) masBoolean -> COMA . CADENA DOSPUNTOS datoBoolean

    CADENA          shift and go to state 440


state 415

    (57) parEntero -> CADENA DOSPUNTOS datoEntero masEntero .
    (59) masEntero -> masEntero . COMA CADENA DOSPUNTOS datoEntero

    LLAVERIGHT      reduce using rule 57 (parEntero -> CADENA DOSPUNTOS datoEntero masEntero .)
    COMA            shift and go to state 441


state 416

    (60) masEntero -> COMA . CADENA DOSPUNTOS datoEntero

    CADENA          shift and go to state 442


state 417

    (69) parFlotante -> CADENA DOSPUNTOS datoFlotante masFlotante .
    (71) masFlotante -> masFlotante . COMA CADENA DOSPUNTOS datoFlotante

    LLAVERIGHT      reduce using rule 69 (parFlotante -> CADENA DOSPUNTOS datoFlotante masFlotante .)
    COMA            shift and go to state 443


state 418

    (72) masFlotante -> COMA . CADENA DOSPUNTOS datoFlotante

    CADENA          shift and go to state 444


state 419

    (190) bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK bloque_switch .

    LLAVERIGHT      reduce using rule 190 (bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones BREAK bloque_switch .)


state 420

    (175) funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .

    $end            reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    RETURN          reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    PACKAGE         reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    VAR             reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    VARIABLE        reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    IF              reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    FOR             reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    IMPRIMIR        reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    MAP             reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    PRODUCTO        reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    SCAN            reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    SWITCH          reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    ENTERO          reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    FLOTANTE        reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    BOOL            reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    FUNC            reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    PARLEFT         reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    BREAK           reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    CONTINUE        reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    CASE            reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    DEFAULT         reduce using rule 175 (funcion_sin_parametro_return -> FUNC VARIABLE PARLEFT PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)


state 421

    (177) funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .

    $end            reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    RETURN          reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    PACKAGE         reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    VAR             reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    VARIABLE        reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    IF              reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    FOR             reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    IMPRIMIR        reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    MAP             reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    PRODUCTO        reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    SCAN            reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    SWITCH          reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    ENTERO          reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    FLOTANTE        reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    BOOL            reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    FUNC            reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    PARLEFT         reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    BREAK           reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    CONTINUE        reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    CASE            reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)
    DEFAULT         reduce using rule 177 (funcion_parametro -> FUNC VARIABLE PARLEFT parametros PARRIGHT LLAVELEFT instrucciones masInstrucciones RETURN LLAVERIGHT .)


state 422

    (141) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO . PARRIGHT

    PARRIGHT        shift and go to state 445


state 423

    (151) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO . PARRIGHT

    PARRIGHT        shift and go to state 446


state 424

    (142) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO . PARRIGHT

    PARRIGHT        shift and go to state 447


state 425

    (152) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO . PARRIGHT

    PARRIGHT        shift and go to state 448


state 426

    (144) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA . ENTERO PARRIGHT

    ENTERO          shift and go to state 449


state 427

    (140) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .

    $end            reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    RETURN          reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    LLAVERIGHT      reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    PACKAGE         reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    VAR             reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    VARIABLE        reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    IF              reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    FOR             reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    IMPRIMIR        reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    MAP             reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    PRODUCTO        reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    SCAN            reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    SWITCH          reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    ENTERO          reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    FLOTANTE        reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    BOOL            reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    FUNC            reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    PARLEFT         reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    BREAK           reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    CONTINUE        reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    CASE            reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    DEFAULT         reduce using rule 140 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)


state 428

    (154) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA . ENTERO PARRIGHT

    ENTERO          shift and go to state 450


state 429

    (150) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .

    $end            reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    RETURN          reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    LLAVERIGHT      reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    PACKAGE         reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    VAR             reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    VARIABLE        reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    IF              reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    FOR             reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    IMPRIMIR        reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    MAP             reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    PRODUCTO        reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    SCAN            reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    SWITCH          reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    ENTERO          reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    FLOTANTE        reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    BOOL            reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    FUNC            reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    PARLEFT         reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    BREAK           reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    CONTINUE        reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    CASE            reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    DEFAULT         reduce using rule 150 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)


state 430

    (143) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA . ENTERO PARRIGHT

    ENTERO          shift and go to state 451


state 431

    (139) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .

    $end            reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    RETURN          reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    LLAVERIGHT      reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    PACKAGE         reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    VAR             reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    VARIABLE        reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    IF              reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    FOR             reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    IMPRIMIR        reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    MAP             reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    PRODUCTO        reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    SCAN            reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    SWITCH          reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    ENTERO          reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    FLOTANTE        reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    BOOL            reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    FUNC            reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    PARLEFT         reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    BREAK           reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    CONTINUE        reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    CASE            reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)
    DEFAULT         reduce using rule 139 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO PARRIGHT .)


state 432

    (153) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA . ENTERO PARRIGHT

    ENTERO          shift and go to state 452


state 433

    (149) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .

    $end            reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    RETURN          reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    LLAVERIGHT      reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    PACKAGE         reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    VAR             reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    VARIABLE        reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    IF              reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    FOR             reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    IMPRIMIR        reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    MAP             reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    PRODUCTO        reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    SCAN            reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    SWITCH          reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    ENTERO          reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    FLOTANTE        reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    BOOL            reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    FUNC            reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    PARLEFT         reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    BREAK           reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    CONTINUE        reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    CASE            reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)
    DEFAULT         reduce using rule 149 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO PARRIGHT .)


state 434

    (47) else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .

    $end            reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    RETURN          reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PACKAGE         reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    VAR             reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    VARIABLE        reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    IF              reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FOR             reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    IMPRIMIR        reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    MAP             reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PRODUCTO        reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    SCAN            reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    SWITCH          reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    ENTERO          reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FLOTANTE        reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    BOOL            reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    FUNC            reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    PARLEFT         reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    BREAK           reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    CONTINUE        reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    CASE            reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)
    DEFAULT         reduce using rule 47 (else -> ELSE LLAVELEFT instrucciones masInstrucciones LLAVERIGHT .)


state 435

    (48) else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN . VARIABLE LLAVERIGHT

    VARIABLE        shift and go to state 453


state 436

    (49) else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .

    $end            reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    RETURN          reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    PACKAGE         reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    VAR             reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    VARIABLE        reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    IF              reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    FOR             reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    IMPRIMIR        reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    MAP             reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    PRODUCTO        reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    SCAN            reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    SWITCH          reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    ENTERO          reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    FLOTANTE        reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    BOOL            reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    FUNC            reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    PARLEFT         reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    BREAK           reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    CONTINUE        reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    CASE            reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)
    DEFAULT         reduce using rule 49 (else -> ELSE LLAVELEFT RETURN VARIABLE LLAVERIGHT .)


state 437

    (65) masCadena -> masCadena COMA . CADENA DOSPUNTOS datoCadena

    CADENA          shift and go to state 454


state 438

    (66) masCadena -> COMA CADENA . DOSPUNTOS datoCadena

    DOSPUNTOS       shift and go to state 455


state 439

    (77) masBoolean -> masBoolean COMA . CADENA DOSPUNTOS datoBoolean

    CADENA          shift and go to state 456


state 440

    (78) masBoolean -> COMA CADENA . DOSPUNTOS datoBoolean

    DOSPUNTOS       shift and go to state 457


state 441

    (59) masEntero -> masEntero COMA . CADENA DOSPUNTOS datoEntero

    CADENA          shift and go to state 458


state 442

    (60) masEntero -> COMA CADENA . DOSPUNTOS datoEntero

    DOSPUNTOS       shift and go to state 459


state 443

    (71) masFlotante -> masFlotante COMA . CADENA DOSPUNTOS datoFlotante

    CADENA          shift and go to state 460


state 444

    (72) masFlotante -> COMA CADENA . DOSPUNTOS datoFlotante

    DOSPUNTOS       shift and go to state 461


state 445

    (141) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .

    $end            reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    RETURN          reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    LLAVERIGHT      reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    PACKAGE         reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    VAR             reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    VARIABLE        reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    IF              reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    FOR             reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    IMPRIMIR        reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    MAP             reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    PRODUCTO        reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    SCAN            reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    SWITCH          reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    ENTERO          reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    FLOTANTE        reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    BOOL            reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    FUNC            reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    PARLEFT         reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    BREAK           reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    CONTINUE        reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    CASE            reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    DEFAULT         reduce using rule 141 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)


state 446

    (151) slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .

    $end            reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    RETURN          reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    LLAVERIGHT      reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    PACKAGE         reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    VAR             reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    VARIABLE        reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    IF              reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    FOR             reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    IMPRIMIR        reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    MAP             reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    PRODUCTO        reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    SCAN            reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    SWITCH          reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    ENTERO          reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    FLOTANTE        reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    BOOL            reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    FUNC            reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    PARLEFT         reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    BREAK           reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    CONTINUE        reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    CASE            reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    DEFAULT         reduce using rule 151 (slices -> VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)


state 447

    (142) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .

    $end            reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    RETURN          reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    LLAVERIGHT      reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    PACKAGE         reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    VAR             reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    VARIABLE        reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    IF              reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    FOR             reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    IMPRIMIR        reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    MAP             reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    PRODUCTO        reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    SCAN            reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    SWITCH          reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    ENTERO          reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    FLOTANTE        reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    BOOL            reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    FUNC            reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    PARLEFT         reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    BREAK           reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    CONTINUE        reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    CASE            reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    DEFAULT         reduce using rule 142 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)


state 448

    (152) slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .

    $end            reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    RETURN          reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    LLAVERIGHT      reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    PACKAGE         reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    VAR             reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    VARIABLE        reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    IF              reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    FOR             reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    IMPRIMIR        reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    MAP             reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    PRODUCTO        reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    SCAN            reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    SWITCH          reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    ENTERO          reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    FLOTANTE        reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    BOOL            reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    FUNC            reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    PARLEFT         reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    BREAK           reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    CONTINUE        reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    CASE            reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    DEFAULT         reduce using rule 152 (slices -> VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)


state 449

    (144) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO . PARRIGHT

    PARRIGHT        shift and go to state 462


state 450

    (154) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO . PARRIGHT

    PARRIGHT        shift and go to state 463


state 451

    (143) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO . PARRIGHT

    PARRIGHT        shift and go to state 464


state 452

    (153) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO . PARRIGHT

    PARRIGHT        shift and go to state 465


state 453

    (48) else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE . LLAVERIGHT

    LLAVERIGHT      shift and go to state 466


state 454

    (65) masCadena -> masCadena COMA CADENA . DOSPUNTOS datoCadena

    DOSPUNTOS       shift and go to state 467


state 455

    (66) masCadena -> COMA CADENA DOSPUNTOS . datoCadena
    (67) datoCadena -> . VARIABLE
    (68) datoCadena -> . CADENA

    VARIABLE        shift and go to state 376
    CADENA          shift and go to state 374

    datoCadena                     shift and go to state 468

state 456

    (77) masBoolean -> masBoolean COMA CADENA . DOSPUNTOS datoBoolean

    DOSPUNTOS       shift and go to state 469


state 457

    (78) masBoolean -> COMA CADENA DOSPUNTOS . datoBoolean
    (79) datoBoolean -> . condicion
    (80) datoBoolean -> . TRUE
    (81) datoBoolean -> . FALSE
    (213) condicion -> . AND
    (214) condicion -> . OR

    TRUE            shift and go to state 379
    FALSE           shift and go to state 380
    AND             shift and go to state 104
    OR              shift and go to state 105

    datoBoolean                    shift and go to state 470
    condicion                      shift and go to state 378

state 458

    (59) masEntero -> masEntero COMA CADENA . DOSPUNTOS datoEntero

    DOSPUNTOS       shift and go to state 471


state 459

    (60) masEntero -> COMA CADENA DOSPUNTOS . datoEntero
    (61) datoEntero -> . VARIABLE
    (62) datoEntero -> . expresion
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 382
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    PARLEFT         shift and go to state 27

    datoEntero                     shift and go to state 472
    expresion                      shift and go to state 383
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 74

state 460

    (71) masFlotante -> masFlotante COMA CADENA . DOSPUNTOS datoFlotante

    DOSPUNTOS       shift and go to state 473


state 461

    (72) masFlotante -> COMA CADENA DOSPUNTOS . datoFlotante
    (73) datoFlotante -> . VARIABLE
    (74) datoFlotante -> . expresion
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 385
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    PARLEFT         shift and go to state 27

    datoFlotante                   shift and go to state 474
    expresion                      shift and go to state 386
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 74

state 462

    (144) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .

    $end            reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    RETURN          reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    LLAVERIGHT      reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    PACKAGE         reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    VAR             reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    VARIABLE        reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    IF              reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    FOR             reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    IMPRIMIR        reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    MAP             reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    PRODUCTO        reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    SCAN            reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    SWITCH          reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    ENTERO          reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    FLOTANTE        reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    BOOL            reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    FUNC            reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    PARLEFT         reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    BREAK           reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    CONTINUE        reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    CASE            reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    DEFAULT         reduce using rule 144 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)


state 463

    (154) slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .

    $end            reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    RETURN          reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    LLAVERIGHT      reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    PACKAGE         reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    VAR             reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    VARIABLE        reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    IF              reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    FOR             reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    IMPRIMIR        reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    MAP             reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    PRODUCTO        reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    SCAN            reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    SWITCH          reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    ENTERO          reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    FLOTANTE        reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    BOOL            reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    FUNC            reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    PARLEFT         reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    BREAK           reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    CONTINUE        reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    CASE            reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    DEFAULT         reduce using rule 154 (slices -> VAR VARIABLE IGUAL metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)


state 464

    (143) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .

    $end            reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    RETURN          reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    LLAVERIGHT      reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    PACKAGE         reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    VAR             reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    VARIABLE        reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    IF              reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    FOR             reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    IMPRIMIR        reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    MAP             reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    PRODUCTO        reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    SCAN            reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    SWITCH          reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    ENTERO          reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    FLOTANTE        reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    BOOL            reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    FUNC            reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    PARLEFT         reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    BREAK           reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    CONTINUE        reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    CASE            reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)
    DEFAULT         reduce using rule 143 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT INT COMA ENTERO COMA ENTERO PARRIGHT .)


state 465

    (153) slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .

    $end            reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    RETURN          reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    LLAVERIGHT      reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    PACKAGE         reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    VAR             reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    VARIABLE        reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    IF              reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    FOR             reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    IMPRIMIR        reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    MAP             reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    PRODUCTO        reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    SCAN            reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    SWITCH          reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    ENTERO          reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    FLOTANTE        reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    BOOL            reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    FUNC            reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    PARLEFT         reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    BREAK           reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    CONTINUE        reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    CASE            reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)
    DEFAULT         reduce using rule 153 (slices -> VAR VARIABLE DECLARADOR metodos_slices PARLEFT CORCHLEFT CORCHRIGHT STRING COMA ENTERO COMA ENTERO PARRIGHT .)


state 466

    (48) else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .

    $end            reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    RETURN          reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    LLAVERIGHT      reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    PACKAGE         reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    VAR             reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    VARIABLE        reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    IF              reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    FOR             reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    IMPRIMIR        reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    MAP             reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    PRODUCTO        reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    SCAN            reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    SWITCH          reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    ENTERO          reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    FLOTANTE        reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    BOOL            reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    FUNC            reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    PARLEFT         reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    BREAK           reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    CONTINUE        reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    CASE            reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)
    DEFAULT         reduce using rule 48 (else -> ELSE LLAVELEFT instrucciones masInstrucciones RETURN VARIABLE LLAVERIGHT .)


state 467

    (65) masCadena -> masCadena COMA CADENA DOSPUNTOS . datoCadena
    (67) datoCadena -> . VARIABLE
    (68) datoCadena -> . CADENA

    VARIABLE        shift and go to state 376
    CADENA          shift and go to state 374

    datoCadena                     shift and go to state 475

state 468

    (66) masCadena -> COMA CADENA DOSPUNTOS datoCadena .

    COMA            reduce using rule 66 (masCadena -> COMA CADENA DOSPUNTOS datoCadena .)
    LLAVERIGHT      reduce using rule 66 (masCadena -> COMA CADENA DOSPUNTOS datoCadena .)


state 469

    (77) masBoolean -> masBoolean COMA CADENA DOSPUNTOS . datoBoolean
    (79) datoBoolean -> . condicion
    (80) datoBoolean -> . TRUE
    (81) datoBoolean -> . FALSE
    (213) condicion -> . AND
    (214) condicion -> . OR

    TRUE            shift and go to state 379
    FALSE           shift and go to state 380
    AND             shift and go to state 104
    OR              shift and go to state 105

    datoBoolean                    shift and go to state 476
    condicion                      shift and go to state 378

state 470

    (78) masBoolean -> COMA CADENA DOSPUNTOS datoBoolean .

    COMA            reduce using rule 78 (masBoolean -> COMA CADENA DOSPUNTOS datoBoolean .)
    LLAVERIGHT      reduce using rule 78 (masBoolean -> COMA CADENA DOSPUNTOS datoBoolean .)


state 471

    (59) masEntero -> masEntero COMA CADENA DOSPUNTOS . datoEntero
    (61) datoEntero -> . VARIABLE
    (62) datoEntero -> . expresion
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 382
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    PARLEFT         shift and go to state 27

    datoEntero                     shift and go to state 477
    expresion                      shift and go to state 383
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 74

state 472

    (60) masEntero -> COMA CADENA DOSPUNTOS datoEntero .

    COMA            reduce using rule 60 (masEntero -> COMA CADENA DOSPUNTOS datoEntero .)
    LLAVERIGHT      reduce using rule 60 (masEntero -> COMA CADENA DOSPUNTOS datoEntero .)


state 473

    (71) masFlotante -> masFlotante COMA CADENA DOSPUNTOS . datoFlotante
    (73) datoFlotante -> . VARIABLE
    (74) datoFlotante -> . expresion
    (117) expresion -> . expresionInt
    (118) expresion -> . expresionFloat
    (128) expresion -> . term
    (119) expresionInt -> . expresionInt operadorArit ENTERO
    (120) expresionInt -> . ENTERO operadorArit ENTERO
    (121) expresionFloat -> . expresionFloat operadorArit FLOTANTE
    (122) expresionFloat -> . FLOTANTE operadorArit FLOTANTE
    (129) term -> . numericos
    (132) numericos -> . ENTERO
    (133) numericos -> . FLOTANTE
    (134) numericos -> . PARLEFT expresion PARRIGHT

    VARIABLE        shift and go to state 385
    ENTERO          shift and go to state 31
    FLOTANTE        shift and go to state 38
    PARLEFT         shift and go to state 27

    datoFlotante                   shift and go to state 478
    expresion                      shift and go to state 386
    expresionInt                   shift and go to state 18
    expresionFloat                 shift and go to state 19
    term                           shift and go to state 22
    numericos                      shift and go to state 74

state 474

    (72) masFlotante -> COMA CADENA DOSPUNTOS datoFlotante .

    COMA            reduce using rule 72 (masFlotante -> COMA CADENA DOSPUNTOS datoFlotante .)
    LLAVERIGHT      reduce using rule 72 (masFlotante -> COMA CADENA DOSPUNTOS datoFlotante .)


state 475

    (65) masCadena -> masCadena COMA CADENA DOSPUNTOS datoCadena .

    COMA            reduce using rule 65 (masCadena -> masCadena COMA CADENA DOSPUNTOS datoCadena .)
    LLAVERIGHT      reduce using rule 65 (masCadena -> masCadena COMA CADENA DOSPUNTOS datoCadena .)


state 476

    (77) masBoolean -> masBoolean COMA CADENA DOSPUNTOS datoBoolean .

    COMA            reduce using rule 77 (masBoolean -> masBoolean COMA CADENA DOSPUNTOS datoBoolean .)
    LLAVERIGHT      reduce using rule 77 (masBoolean -> masBoolean COMA CADENA DOSPUNTOS datoBoolean .)


state 477

    (59) masEntero -> masEntero COMA CADENA DOSPUNTOS datoEntero .

    COMA            reduce using rule 59 (masEntero -> masEntero COMA CADENA DOSPUNTOS datoEntero .)
    LLAVERIGHT      reduce using rule 59 (masEntero -> masEntero COMA CADENA DOSPUNTOS datoEntero .)


state 478

    (71) masFlotante -> masFlotante COMA CADENA DOSPUNTOS datoFlotante .

    COMA            reduce using rule 71 (masFlotante -> masFlotante COMA CADENA DOSPUNTOS datoFlotante .)
    LLAVERIGHT      reduce using rule 71 (masFlotante -> masFlotante COMA CADENA DOSPUNTOS datoFlotante .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PRODUCTO in state 18 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 19 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 31 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 38 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 217 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 219 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 226 resolved as shift
WARNING: shift/reduce conflict for LLAVERIGHT in state 226 resolved as shift
WARNING: shift/reduce conflict for PACKAGE in state 226 resolved as shift
WARNING: shift/reduce conflict for VAR in state 226 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 226 resolved as shift
WARNING: shift/reduce conflict for IF in state 226 resolved as shift
WARNING: shift/reduce conflict for FOR in state 226 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 226 resolved as shift
WARNING: shift/reduce conflict for MAP in state 226 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 226 resolved as shift
WARNING: shift/reduce conflict for SCAN in state 226 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 226 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 226 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 226 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 226 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 226 resolved as shift
WARNING: shift/reduce conflict for PARLEFT in state 226 resolved as shift
WARNING: shift/reduce conflict for LLAVELEFT in state 233 resolved as shift
WARNING: shift/reduce conflict for LLAVELEFT in state 236 resolved as shift
WARNING: shift/reduce conflict for LLAVELEFT in state 237 resolved as shift
WARNING: shift/reduce conflict for LLAVELEFT in state 238 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 281 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 281 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 313 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 313 resolved as shift
WARNING: shift/reduce conflict for CASE in state 313 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 313 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 314 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 314 resolved as shift
WARNING: shift/reduce conflict for PACKAGE in state 314 resolved as shift
WARNING: shift/reduce conflict for VAR in state 314 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 314 resolved as shift
WARNING: shift/reduce conflict for IF in state 314 resolved as shift
WARNING: shift/reduce conflict for FOR in state 314 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 314 resolved as shift
WARNING: shift/reduce conflict for MAP in state 314 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 314 resolved as shift
WARNING: shift/reduce conflict for SCAN in state 314 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 314 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 314 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 314 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 314 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 314 resolved as shift
WARNING: shift/reduce conflict for PARLEFT in state 314 resolved as shift
WARNING: shift/reduce conflict for LLAVERIGHT in state 317 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 317 resolved as shift
WARNING: shift/reduce conflict for PACKAGE in state 317 resolved as shift
WARNING: shift/reduce conflict for VAR in state 317 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 317 resolved as shift
WARNING: shift/reduce conflict for IF in state 317 resolved as shift
WARNING: shift/reduce conflict for FOR in state 317 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 317 resolved as shift
WARNING: shift/reduce conflict for MAP in state 317 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 317 resolved as shift
WARNING: shift/reduce conflict for SCAN in state 317 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 317 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 317 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 317 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 317 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 317 resolved as shift
WARNING: shift/reduce conflict for PARLEFT in state 317 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 346 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 346 resolved as shift
WARNING: shift/reduce conflict for CASE in state 346 resolved as shift
WARNING: shift/reduce conflict for PACKAGE in state 346 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 346 resolved as shift
WARNING: shift/reduce conflict for VAR in state 346 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 346 resolved as shift
WARNING: shift/reduce conflict for IF in state 346 resolved as shift
WARNING: shift/reduce conflict for FOR in state 346 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 346 resolved as shift
WARNING: shift/reduce conflict for MAP in state 346 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 346 resolved as shift
WARNING: shift/reduce conflict for SCAN in state 346 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 346 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 346 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 346 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 346 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 346 resolved as shift
WARNING: shift/reduce conflict for PARLEFT in state 346 resolved as shift
WARNING: shift/reduce conflict for LLAVERIGHT in state 355 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 355 resolved as shift
WARNING: shift/reduce conflict for PACKAGE in state 355 resolved as shift
WARNING: shift/reduce conflict for VAR in state 355 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 355 resolved as shift
WARNING: shift/reduce conflict for IF in state 355 resolved as shift
WARNING: shift/reduce conflict for FOR in state 355 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 355 resolved as shift
WARNING: shift/reduce conflict for MAP in state 355 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 355 resolved as shift
WARNING: shift/reduce conflict for SCAN in state 355 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 355 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 355 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 355 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 355 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 355 resolved as shift
WARNING: shift/reduce conflict for PARLEFT in state 355 resolved as shift
WARNING: shift/reduce conflict for LLAVERIGHT in state 373 resolved as shift
WARNING: shift/reduce conflict for PACKAGE in state 373 resolved as shift
WARNING: shift/reduce conflict for VAR in state 373 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 373 resolved as shift
WARNING: shift/reduce conflict for IF in state 373 resolved as shift
WARNING: shift/reduce conflict for FOR in state 373 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 373 resolved as shift
WARNING: shift/reduce conflict for MAP in state 373 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 373 resolved as shift
WARNING: shift/reduce conflict for SCAN in state 373 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 373 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 373 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 373 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 373 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 373 resolved as shift
WARNING: shift/reduce conflict for PARLEFT in state 373 resolved as shift
WARNING: shift/reduce conflict for LLAVERIGHT in state 408 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 408 resolved as shift
WARNING: shift/reduce conflict for PACKAGE in state 408 resolved as shift
WARNING: shift/reduce conflict for VAR in state 408 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 408 resolved as shift
WARNING: shift/reduce conflict for IF in state 408 resolved as shift
WARNING: shift/reduce conflict for FOR in state 408 resolved as shift
WARNING: shift/reduce conflict for IMPRIMIR in state 408 resolved as shift
WARNING: shift/reduce conflict for MAP in state 408 resolved as shift
WARNING: shift/reduce conflict for PRODUCTO in state 408 resolved as shift
WARNING: shift/reduce conflict for SCAN in state 408 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 408 resolved as shift
WARNING: shift/reduce conflict for ENTERO in state 408 resolved as shift
WARNING: shift/reduce conflict for FLOTANTE in state 408 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 408 resolved as shift
WARNING: shift/reduce conflict for FUNC in state 408 resolved as shift
WARNING: shift/reduce conflict for PARLEFT in state 408 resolved as shift
WARNING: reduce/reduce conflict in state 281 resolved using rule (masInstrucciones -> <empty>)
WARNING: rejected rule (switch_default -> DEFAULT DOSPUNTOS instrucciones) in state 281
WARNING: reduce/reduce conflict in state 313 resolved using rule (masInstrucciones -> <empty>)
WARNING: rejected rule (bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones) in state 313
WARNING: reduce/reduce conflict in state 314 resolved using rule (masInstrucciones -> masInstrucciones)
WARNING: rejected rule (switch_default -> DEFAULT DOSPUNTOS instrucciones masInstrucciones) in state 314
WARNING: reduce/reduce conflict in state 346 resolved using rule (masInstrucciones -> masInstrucciones)
WARNING: rejected rule (bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones) in state 346
WARNING: reduce/reduce conflict in state 350 resolved using rule (bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones switch_default)
WARNING: rejected rule (bloque_switch -> switch_default) in state 350
WARNING: Rule (switch_default -> DEFAULT DOSPUNTOS instrucciones) is never reduced
WARNING: Rule (bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones) is never reduced
WARNING: Rule (switch_default -> DEFAULT DOSPUNTOS instrucciones masInstrucciones) is never reduced
WARNING: Rule (bloque_switch -> CASE caso_switch DOSPUNTOS instrucciones masInstrucciones) is never reduced
